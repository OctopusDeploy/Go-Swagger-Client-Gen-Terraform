// Code generated by go-swagger; DO NOT EDIT.

package user_permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user permissions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user permissions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetUserGetPermissions(params *GetUserGetPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetPermissionsOK, error)

	GetUserGetPermissionsConfiguration(params *GetUserGetPermissionsConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetPermissionsConfigurationOK, error)

	GetUserGetPermissionsConfigurationSpaces(params *GetUserGetPermissionsConfigurationSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetPermissionsConfigurationSpacesOK, error)

	GetUserGetPermissionsSpaces(params *GetUserGetPermissionsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetPermissionsSpacesOK, error)

	GetUserPermissionsExport(params *GetUserPermissionsExportParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetUserPermissionsExportOK, error)

	GetUserPermissionsExportSpaces(params *GetUserPermissionsExportSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetUserPermissionsExportSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetUserGetPermissions Gets summarized permission information. Available for the current authenticated user only.
*/
func (a *Client) GetUserGetPermissions(params *GetUserGetPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGetPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGetPermissions",
		Method:             "GET",
		PathPattern:        "/api/users/{id}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGetPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGetPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGetPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserGetPermissionsConfiguration Gets a summary of the configuration of the user's permissions information. Available for the current authenticated user only.
*/
func (a *Client) GetUserGetPermissionsConfiguration(params *GetUserGetPermissionsConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetPermissionsConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGetPermissionsConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGetPermissionsConfiguration",
		Method:             "GET",
		PathPattern:        "/api/users/{id}/permissions/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGetPermissionsConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGetPermissionsConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGetPermissionsConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserGetPermissionsConfigurationSpaces Gets a summary of the configuration of the user's permissions information. Available for the current authenticated user only.
*/
func (a *Client) GetUserGetPermissionsConfigurationSpaces(params *GetUserGetPermissionsConfigurationSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetPermissionsConfigurationSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGetPermissionsConfigurationSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGetPermissionsConfiguration_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/users/{id}/permissions/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGetPermissionsConfigurationSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGetPermissionsConfigurationSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGetPermissionsConfiguration_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserGetPermissionsSpaces Gets summarized permission information. Available for the current authenticated user only.
*/
func (a *Client) GetUserGetPermissionsSpaces(params *GetUserGetPermissionsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetPermissionsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGetPermissionsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGetPermissions_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/users/{id}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGetPermissionsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGetPermissionsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGetPermissions_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserPermissionsExport Gets list of permissions as a csv file. Available for the current authenticated user only.
*/
func (a *Client) GetUserPermissionsExport(params *GetUserPermissionsExportParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetUserPermissionsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionsExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserPermissionsExport",
		Method:             "GET",
		PathPattern:        "/api/users/{id}/permissions/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserPermissionsExportReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPermissionsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserPermissionsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserPermissionsExportSpaces Gets list of permissions as a csv file. Available for the current authenticated user only.
*/
func (a *Client) GetUserPermissionsExportSpaces(params *GetUserPermissionsExportSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetUserPermissionsExportSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionsExportSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserPermissionsExport_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/users/{id}/permissions/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserPermissionsExportSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPermissionsExportSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserPermissionsExport_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
