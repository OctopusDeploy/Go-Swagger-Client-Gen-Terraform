// Code generated by go-swagger; DO NOT EDIT.

package community_action_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new community action templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for community action templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCommunityActionTemplateInstallation(params *CreateCommunityActionTemplateInstallationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCommunityActionTemplateInstallationCreated, error)

	CreateCommunityActionTemplateInstallation1(params *CreateCommunityActionTemplateInstallation1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateCommunityActionTemplateInstallation1Created, error)

	GetActionTemplateBasedOnCommunityActionTemplate(params *GetActionTemplateBasedOnCommunityActionTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateBasedOnCommunityActionTemplateOK, error)

	GetActionTemplateBasedOnCommunityActionTemplate1(params *GetActionTemplateBasedOnCommunityActionTemplate1Params, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateBasedOnCommunityActionTemplate1OK, error)

	GetCommunityActionTemplateByID(params *GetCommunityActionTemplateByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommunityActionTemplateByIDOK, error)

	GetCommunityActionTemplateLogo(params *GetCommunityActionTemplateLogoParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetCommunityActionTemplateLogoOK, error)

	IndexCommunityActionTemplates(params *IndexCommunityActionTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexCommunityActionTemplatesOK, error)

	UpdateCommunityActionTemplateInstallationPut(params *UpdateCommunityActionTemplateInstallationPutParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommunityActionTemplateInstallationPutOK, error)

	UpdateCommunityActionTemplateInstallationPut1(params *UpdateCommunityActionTemplateInstallationPut1Params, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommunityActionTemplateInstallationPut1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCommunityActionTemplateInstallation Installs community step template.
*/
func (a *Client) CreateCommunityActionTemplateInstallation(params *CreateCommunityActionTemplateInstallationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCommunityActionTemplateInstallationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCommunityActionTemplateInstallationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCommunityActionTemplateInstallation",
		Method:             "POST",
		PathPattern:        "/api/communityactiontemplates/{id}/installation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCommunityActionTemplateInstallationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCommunityActionTemplateInstallationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCommunityActionTemplateInstallation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCommunityActionTemplateInstallation1 Installs community step template.
*/
func (a *Client) CreateCommunityActionTemplateInstallation1(params *CreateCommunityActionTemplateInstallation1Params, authInfo runtime.ClientAuthInfoWriter) (*CreateCommunityActionTemplateInstallation1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCommunityActionTemplateInstallation1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCommunityActionTemplateInstallation_1",
		Method:             "POST",
		PathPattern:        "/api/communityactiontemplates/{id}/installation/{spaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCommunityActionTemplateInstallation1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCommunityActionTemplateInstallation1Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCommunityActionTemplateInstallation_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateBasedOnCommunityActionTemplate Gets installed version of the template.
*/
func (a *Client) GetActionTemplateBasedOnCommunityActionTemplate(params *GetActionTemplateBasedOnCommunityActionTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateBasedOnCommunityActionTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateBasedOnCommunityActionTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateBasedOnCommunityActionTemplate",
		Method:             "GET",
		PathPattern:        "/api/communityactiontemplates/{id}/actiontemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateBasedOnCommunityActionTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateBasedOnCommunityActionTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateBasedOnCommunityActionTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateBasedOnCommunityActionTemplate1 Gets installed version of the template.
*/
func (a *Client) GetActionTemplateBasedOnCommunityActionTemplate1(params *GetActionTemplateBasedOnCommunityActionTemplate1Params, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateBasedOnCommunityActionTemplate1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateBasedOnCommunityActionTemplate1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateBasedOnCommunityActionTemplate_1",
		Method:             "GET",
		PathPattern:        "/api/communityactiontemplates/{id}/actiontemplate/{spaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateBasedOnCommunityActionTemplate1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateBasedOnCommunityActionTemplate1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateBasedOnCommunityActionTemplate_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCommunityActionTemplateByID gets a community action template resource by ID

  Gets a single community step template.
*/
func (a *Client) GetCommunityActionTemplateByID(params *GetCommunityActionTemplateByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommunityActionTemplateByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommunityActionTemplateByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommunityActionTemplateById",
		Method:             "GET",
		PathPattern:        "/api/communityactiontemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommunityActionTemplateByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommunityActionTemplateByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCommunityActionTemplateById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCommunityActionTemplateLogo Gets the logo associated with the community step template.
*/
func (a *Client) GetCommunityActionTemplateLogo(params *GetCommunityActionTemplateLogoParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetCommunityActionTemplateLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommunityActionTemplateLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommunityActionTemplateLogo",
		Method:             "GET",
		PathPattern:        "/api/communityactiontemplates/{id}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommunityActionTemplateLogoReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommunityActionTemplateLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCommunityActionTemplateLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexCommunityActionTemplates gets a list of community action template resources

  Gets a list of community step templates.
*/
func (a *Client) IndexCommunityActionTemplates(params *IndexCommunityActionTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexCommunityActionTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexCommunityActionTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexCommunityActionTemplates",
		Method:             "GET",
		PathPattern:        "/api/communityactiontemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexCommunityActionTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexCommunityActionTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexCommunityActionTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCommunityActionTemplateInstallationPut Updates installed community step template to the latest version.
*/
func (a *Client) UpdateCommunityActionTemplateInstallationPut(params *UpdateCommunityActionTemplateInstallationPutParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommunityActionTemplateInstallationPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCommunityActionTemplateInstallationPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCommunityActionTemplateInstallationPut",
		Method:             "PUT",
		PathPattern:        "/api/communityactiontemplates/{id}/installation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCommunityActionTemplateInstallationPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCommunityActionTemplateInstallationPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCommunityActionTemplateInstallationPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCommunityActionTemplateInstallationPut1 Updates installed community step template to the latest version.
*/
func (a *Client) UpdateCommunityActionTemplateInstallationPut1(params *UpdateCommunityActionTemplateInstallationPut1Params, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommunityActionTemplateInstallationPut1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCommunityActionTemplateInstallationPut1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCommunityActionTemplateInstallationPut_1",
		Method:             "PUT",
		PathPattern:        "/api/communityactiontemplates/{id}/installation/{spaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCommunityActionTemplateInstallationPut1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCommunityActionTemplateInstallationPut1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCommunityActionTemplateInstallationPut_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
