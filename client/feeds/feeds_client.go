// Code generated by go-swagger; DO NOT EDIT.

package feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new feeds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for feeds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFeed(params *CreateFeedParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFeedCreated, error)

	CreateFeedSpaces(params *CreateFeedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFeedSpacesCreated, error)

	DeleteFeed(params *DeleteFeedParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeedOK, error)

	DeleteFeedSpaces(params *DeleteFeedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeedSpacesOK, error)

	GetBuiltInFeedStats(params *GetBuiltInFeedStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuiltInFeedStatsOK, error)

	GetBuiltInFeedStatsSpaces(params *GetBuiltInFeedStatsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuiltInFeedStatsSpacesOK, error)

	GetFeedByID(params *GetFeedByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedByIDOK, error)

	GetFeedByIDSpaces(params *GetFeedByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedByIDSpacesOK, error)

	GetPackageSearch(params *GetPackageSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageSearchOK, error)

	GetPackageSearchSpaces(params *GetPackageSearchSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageSearchSpacesOK, error)

	GetPackageVersionSearch(params *GetPackageVersionSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionSearchOK, error)

	GetPackageVersionSearchSpaces(params *GetPackageVersionSearchSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionSearchSpacesOK, error)

	IndexFeeds(params *IndexFeedsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexFeedsOK, error)

	IndexFeedsSpaces(params *IndexFeedsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexFeedsSpacesOK, error)

	ListAllFeeds(params *ListAllFeedsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllFeedsOK, error)

	ListAllFeedsSpaces(params *ListAllFeedsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllFeedsSpacesOK, error)

	UpdateFeed(params *UpdateFeedParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeedOK, error)

	UpdateFeedSpaces(params *UpdateFeedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeedSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFeed creates a feed resource

  Creates a feed.
*/
func (a *Client) CreateFeed(params *CreateFeedParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFeedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFeed",
		Method:             "POST",
		PathPattern:        "/api/feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFeedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFeed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFeedSpaces creates a feed resource

  Creates a feed.
*/
func (a *Client) CreateFeedSpaces(params *CreateFeedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFeedSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFeedSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFeed_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFeedSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFeedSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFeed_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFeed deletes a feed resource by ID

  Deletes an existing feed.
*/
func (a *Client) DeleteFeed(params *DeleteFeedParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFeed",
		Method:             "DELETE",
		PathPattern:        "/api/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFeedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFeed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFeedSpaces deletes a feed resource by ID

  Deletes an existing feed.
*/
func (a *Client) DeleteFeedSpaces(params *DeleteFeedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeedSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeedSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFeed_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFeedSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFeedSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFeed_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuiltInFeedStats Provides statistics for the built-in package repository.
*/
func (a *Client) GetBuiltInFeedStats(params *GetBuiltInFeedStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuiltInFeedStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuiltInFeedStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuiltInFeedStats",
		Method:             "GET",
		PathPattern:        "/api/feeds/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuiltInFeedStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuiltInFeedStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuiltInFeedStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuiltInFeedStatsSpaces Provides statistics for the built-in package repository.
*/
func (a *Client) GetBuiltInFeedStatsSpaces(params *GetBuiltInFeedStatsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuiltInFeedStatsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuiltInFeedStatsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuiltInFeedStats_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/feeds/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuiltInFeedStatsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuiltInFeedStatsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuiltInFeedStats_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeedByID gets a feed resource by ID

  Gets a single feed by ID.
*/
func (a *Client) GetFeedByID(params *GetFeedByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeedById",
		Method:             "GET",
		PathPattern:        "/api/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFeedByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeedByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeedById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeedByIDSpaces gets a feed resource by ID

  Gets a single feed by ID.
*/
func (a *Client) GetFeedByIDSpaces(params *GetFeedByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeedByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeedById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFeedByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeedByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeedById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageSearch Searches the specified feed for packages based on the specified search term
*/
func (a *Client) GetPackageSearch(params *GetPackageSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageSearch",
		Method:             "GET",
		PathPattern:        "/api/feeds/{id}/packages/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageSearchSpaces Searches the specified feed for packages based on the specified search term
*/
func (a *Client) GetPackageSearchSpaces(params *GetPackageSearchSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageSearchSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageSearchSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageSearch_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/feeds/{id}/packages/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageSearchSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageSearchSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageSearch_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageVersionSearch Lists available versions of the package specified
*/
func (a *Client) GetPackageVersionSearch(params *GetPackageVersionSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageVersionSearch",
		Method:             "GET",
		PathPattern:        "/api/feeds/{id}/packages/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageVersionSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageVersionSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageVersionSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageVersionSearchSpaces Lists available versions of the package specified
*/
func (a *Client) GetPackageVersionSearchSpaces(params *GetPackageVersionSearchSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageVersionSearchSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageVersionSearchSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageVersionSearch_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/feeds/{id}/packages/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageVersionSearchSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageVersionSearchSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageVersionSearch_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexFeeds gets a list of feed resources

  Lists all the feeds used by the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexFeeds(params *IndexFeedsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexFeedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexFeedsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexFeeds",
		Method:             "GET",
		PathPattern:        "/api/feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexFeedsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexFeedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexFeeds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexFeedsSpaces gets a list of feed resources

  Lists all the feeds used by the current Octopus installation. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexFeedsSpaces(params *IndexFeedsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexFeedsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexFeedsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexFeeds_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexFeedsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexFeedsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexFeeds_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllFeeds gets a list of feed resources

  Lists all the feeds in the specified Octopus Deploy Space.
*/
func (a *Client) ListAllFeeds(params *ListAllFeedsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllFeedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllFeedsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllFeeds",
		Method:             "GET",
		PathPattern:        "/api/feeds/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllFeedsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllFeedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllFeeds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllFeedsSpaces gets a list of feed resources

  Lists all the feeds in the specified Octopus Deploy Space.
*/
func (a *Client) ListAllFeedsSpaces(params *ListAllFeedsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllFeedsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllFeedsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllFeeds_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/feeds/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllFeedsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllFeedsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllFeeds_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFeed modifies a feed resource by ID

  Modifies an existing feed.
*/
func (a *Client) UpdateFeed(params *UpdateFeedParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFeed",
		Method:             "PUT",
		PathPattern:        "/api/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFeedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFeed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFeedSpaces modifies a feed resource by ID

  Modifies an existing feed.
*/
func (a *Client) UpdateFeedSpaces(params *UpdateFeedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeedSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFeedSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFeed_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/feeds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFeedSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFeedSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFeed_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
