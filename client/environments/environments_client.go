// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new environments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for environments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEnvironment(params *CreateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEnvironmentCreated, error)

	CreateEnvironmentSpaces(params *CreateEnvironmentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEnvironmentSpacesCreated, error)

	DeleteEnvironment(params *DeleteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEnvironmentOK, error)

	DeleteEnvironmentSpaces(params *DeleteEnvironmentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEnvironmentSpacesOK, error)

	GetDeploymentEnvironmentSettingsMetadata(params *GetDeploymentEnvironmentSettingsMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEnvironmentSettingsMetadataOK, error)

	GetDeploymentEnvironmentSettingsMetadataSpaces(params *GetDeploymentEnvironmentSettingsMetadataSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEnvironmentSettingsMetadataSpacesOK, error)

	GetEnvironmentByID(params *GetEnvironmentByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentByIDOK, error)

	GetEnvironmentByIDSpaces(params *GetEnvironmentByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentByIDSpacesOK, error)

	GetEnvironmentsSummary(params *GetEnvironmentsSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentsSummaryOK, error)

	GetEnvironmentsSummarySpaces(params *GetEnvironmentsSummarySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentsSummarySpacesOK, error)

	GetVariablesScopedToEnvironment(params *GetVariablesScopedToEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetVariablesScopedToEnvironmentOK, error)

	GetVariablesScopedToEnvironmentSpaces(params *GetVariablesScopedToEnvironmentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVariablesScopedToEnvironmentSpacesOK, error)

	IndexEnvironmentDeploymentTargets(params *IndexEnvironmentDeploymentTargetsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexEnvironmentDeploymentTargetsOK, error)

	IndexEnvironmentDeploymentTargetsSpaces(params *IndexEnvironmentDeploymentTargetsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexEnvironmentDeploymentTargetsSpacesOK, error)

	IndexEnvironments(params *IndexEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexEnvironmentsOK, error)

	IndexEnvironmentsSpaces(params *IndexEnvironmentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexEnvironmentsSpacesOK, error)

	ListAllEnvironments(params *ListAllEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllEnvironmentsOK, error)

	ListAllEnvironmentsSpaces(params *ListAllEnvironmentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllEnvironmentsSpacesOK, error)

	UpdateEnvironment(params *UpdateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvironmentOK, error)

	UpdateEnvironmentSpaces(params *UpdateEnvironmentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvironmentSpacesOK, error)

	UpdateSortEnvironments(params *UpdateSortEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSortEnvironmentsOK, error)

	UpdateSortEnvironmentsSpaces(params *UpdateSortEnvironmentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSortEnvironmentsSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEnvironment creates a environment resource

  Creates a new environment.
*/
func (a *Client) CreateEnvironment(params *CreateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEnvironmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEnvironment",
		Method:             "POST",
		PathPattern:        "/api/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEnvironmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEnvironmentSpaces creates a environment resource

  Creates a new environment.
*/
func (a *Client) CreateEnvironmentSpaces(params *CreateEnvironmentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEnvironmentSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnvironmentSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEnvironment_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEnvironmentSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEnvironmentSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEnvironment_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEnvironment deletes a environment resource by ID

  Deletes an existing environment.
*/
func (a *Client) DeleteEnvironment(params *DeleteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEnvironment",
		Method:             "DELETE",
		PathPattern:        "/api/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEnvironmentSpaces deletes a environment resource by ID

  Deletes an existing environment.
*/
func (a *Client) DeleteEnvironmentSpaces(params *DeleteEnvironmentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEnvironmentSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEnvironment_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEnvironmentSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnvironmentSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEnvironment_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentEnvironmentSettingsMetadata Gets the custom settings metadata from the extensions.
*/
func (a *Client) GetDeploymentEnvironmentSettingsMetadata(params *GetDeploymentEnvironmentSettingsMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEnvironmentSettingsMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentEnvironmentSettingsMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentEnvironmentSettingsMetadata",
		Method:             "GET",
		PathPattern:        "/api/environments/{id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentEnvironmentSettingsMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentEnvironmentSettingsMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentEnvironmentSettingsMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentEnvironmentSettingsMetadataSpaces Gets the custom settings metadata from the extensions.
*/
func (a *Client) GetDeploymentEnvironmentSettingsMetadataSpaces(params *GetDeploymentEnvironmentSettingsMetadataSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEnvironmentSettingsMetadataSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentEnvironmentSettingsMetadataSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentEnvironmentSettingsMetadata_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/environments/{id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentEnvironmentSettingsMetadataSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentEnvironmentSettingsMetadataSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentEnvironmentSettingsMetadata_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentByID gets a environment resource by ID

  Gets a single environment by ID.
*/
func (a *Client) GetEnvironmentByID(params *GetEnvironmentByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentById",
		Method:             "GET",
		PathPattern:        "/api/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentByIDSpaces gets a environment resource by ID

  Gets a single environment by ID.
*/
func (a *Client) GetEnvironmentByIDSpaces(params *GetEnvironmentByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentsSummary Lists all environments, including a summary of machine information
*/
func (a *Client) GetEnvironmentsSummary(params *GetEnvironmentsSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentsSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentsSummary",
		Method:             "GET",
		PathPattern:        "/api/environments/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentsSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentsSummarySpaces Lists all environments, including a summary of machine information
*/
func (a *Client) GetEnvironmentsSummarySpaces(params *GetEnvironmentsSummarySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentsSummarySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentsSummarySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentsSummary_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/environments/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentsSummarySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentsSummarySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentsSummary_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVariablesScopedToEnvironment Lists all the variable set names (projects and library variable sets) that have variables that are scoped to only the given environment
*/
func (a *Client) GetVariablesScopedToEnvironment(params *GetVariablesScopedToEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetVariablesScopedToEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariablesScopedToEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVariablesScopedToEnvironment",
		Method:             "GET",
		PathPattern:        "/api/environments/{id}/singlyScopedVariableDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVariablesScopedToEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVariablesScopedToEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVariablesScopedToEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVariablesScopedToEnvironmentSpaces Lists all the variable set names (projects and library variable sets) that have variables that are scoped to only the given environment
*/
func (a *Client) GetVariablesScopedToEnvironmentSpaces(params *GetVariablesScopedToEnvironmentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVariablesScopedToEnvironmentSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariablesScopedToEnvironmentSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVariablesScopedToEnvironment_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/environments/{id}/singlyScopedVariableDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVariablesScopedToEnvironmentSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVariablesScopedToEnvironmentSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVariablesScopedToEnvironment_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexEnvironmentDeploymentTargets gets a list of deployment target resources for the given environment resource

  Lists all of the machines that belong to the given environment.
*/
func (a *Client) IndexEnvironmentDeploymentTargets(params *IndexEnvironmentDeploymentTargetsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexEnvironmentDeploymentTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexEnvironmentDeploymentTargetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexEnvironmentDeploymentTargets",
		Method:             "GET",
		PathPattern:        "/api/environments/{id}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexEnvironmentDeploymentTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexEnvironmentDeploymentTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexEnvironmentDeploymentTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexEnvironmentDeploymentTargetsSpaces gets a list of deployment target resources for the given environment resource

  Lists all of the machines that belong to the given environment.
*/
func (a *Client) IndexEnvironmentDeploymentTargetsSpaces(params *IndexEnvironmentDeploymentTargetsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexEnvironmentDeploymentTargetsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexEnvironmentDeploymentTargetsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexEnvironmentDeploymentTargets_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/environments/{id}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexEnvironmentDeploymentTargetsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexEnvironmentDeploymentTargetsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexEnvironmentDeploymentTargets_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexEnvironments gets a list of environment resources

  Lists all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.
*/
func (a *Client) IndexEnvironments(params *IndexEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexEnvironments",
		Method:             "GET",
		PathPattern:        "/api/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexEnvironments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexEnvironmentsSpaces gets a list of environment resources

  Lists all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.
*/
func (a *Client) IndexEnvironmentsSpaces(params *IndexEnvironmentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexEnvironmentsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexEnvironmentsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexEnvironments_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexEnvironmentsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexEnvironmentsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexEnvironments_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllEnvironments gets a list of environment resources

  Lists the name and ID of all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.
*/
func (a *Client) ListAllEnvironments(params *ListAllEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllEnvironments",
		Method:             "GET",
		PathPattern:        "/api/environments/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllEnvironments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllEnvironmentsSpaces gets a list of environment resources

  Lists the name and ID of all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.
*/
func (a *Client) ListAllEnvironmentsSpaces(params *ListAllEnvironmentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllEnvironmentsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllEnvironmentsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllEnvironments_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/environments/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllEnvironmentsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllEnvironmentsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllEnvironments_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEnvironment modifies a environment resource by ID

  Modifies an existing environment.
*/
func (a *Client) UpdateEnvironment(params *UpdateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEnvironment",
		Method:             "PUT",
		PathPattern:        "/api/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEnvironmentSpaces modifies a environment resource by ID

  Modifies an existing environment.
*/
func (a *Client) UpdateEnvironmentSpaces(params *UpdateEnvironmentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvironmentSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnvironmentSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEnvironment_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/environments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEnvironmentSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnvironmentSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEnvironment_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSortEnvironments Takes an array of environment IDs as the request body, uses the order of items in the array to sort the environments on the server. The ID of every environment must be specified.
*/
func (a *Client) UpdateSortEnvironments(params *UpdateSortEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSortEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSortEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSortEnvironments",
		Method:             "PUT",
		PathPattern:        "/api/environments/sortorder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSortEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSortEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSortEnvironments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSortEnvironmentsSpaces Takes an array of environment IDs as the request body, uses the order of items in the array to sort the environments on the server. The ID of every environment must be specified.
*/
func (a *Client) UpdateSortEnvironmentsSpaces(params *UpdateSortEnvironmentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSortEnvironmentsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSortEnvironmentsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSortEnvironments_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/environments/sortorder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSortEnvironmentsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSortEnvironmentsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSortEnvironments_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
