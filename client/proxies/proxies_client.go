// Code generated by go-swagger; DO NOT EDIT.

package proxies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new proxies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for proxies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProxy(params *CreateProxyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProxyCreated, error)

	CreateProxySpaces(params *CreateProxySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProxySpacesCreated, error)

	DeleteProxy(params *DeleteProxyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProxyOK, error)

	DeleteProxySpaces(params *DeleteProxySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProxySpacesOK, error)

	GetProxyByID(params *GetProxyByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxyByIDOK, error)

	GetProxyByIDSpaces(params *GetProxyByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxyByIDSpacesOK, error)

	IndexProxies(params *IndexProxiesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProxiesOK, error)

	IndexProxiesSpaces(params *IndexProxiesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProxiesSpacesOK, error)

	ListAllProxies(params *ListAllProxiesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllProxiesOK, error)

	ListAllProxiesSpaces(params *ListAllProxiesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllProxiesSpacesOK, error)

	UpdateProxy(params *UpdateProxyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProxyOK, error)

	UpdateProxySpaces(params *UpdateProxySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProxySpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateProxy creates a proxy resource

  Creates a proxy.
*/
func (a *Client) CreateProxy(params *CreateProxyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProxy",
		Method:             "POST",
		PathPattern:        "/api/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProxySpaces creates a proxy resource

  Creates a proxy.
*/
func (a *Client) CreateProxySpaces(params *CreateProxySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProxySpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProxy_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProxySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProxySpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProxy_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProxy deletes a proxy resource by ID

  Deletes an existing proxy.
*/
func (a *Client) DeleteProxy(params *DeleteProxyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProxy",
		Method:             "DELETE",
		PathPattern:        "/api/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProxySpaces deletes a proxy resource by ID

  Deletes an existing proxy.
*/
func (a *Client) DeleteProxySpaces(params *DeleteProxySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProxySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProxy_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProxySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProxySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProxy_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxyByID gets a proxy resource by ID

  Gets a proxy by ID.
*/
func (a *Client) GetProxyByID(params *GetProxyByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxyByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProxyById",
		Method:             "GET",
		PathPattern:        "/api/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProxyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProxyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxyByIDSpaces gets a proxy resource by ID

  Gets a proxy by ID.
*/
func (a *Client) GetProxyByIDSpaces(params *GetProxyByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProxyByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProxyById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProxyByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProxyById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProxies gets a list of proxy resources

  Lists all of the proxies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexProxies(params *IndexProxiesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProxiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProxiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProxies",
		Method:             "GET",
		PathPattern:        "/api/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProxiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProxiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProxies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProxiesSpaces gets a list of proxy resources

  Lists all of the proxies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexProxiesSpaces(params *IndexProxiesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProxiesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProxiesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProxies_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProxiesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProxiesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProxies_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllProxies gets a list of proxy resources

  Lists the name and ID of all of the proxies in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) ListAllProxies(params *ListAllProxiesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllProxiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllProxiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllProxies",
		Method:             "GET",
		PathPattern:        "/api/proxies/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllProxiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllProxiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllProxies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllProxiesSpaces gets a list of proxy resources

  Lists the name and ID of all of the proxies in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) ListAllProxiesSpaces(params *ListAllProxiesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllProxiesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllProxiesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllProxies_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/proxies/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllProxiesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllProxiesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllProxies_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProxy modifies a proxy resource by ID

  Modifies an existing proxy.
*/
func (a *Client) UpdateProxy(params *UpdateProxyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProxy",
		Method:             "PUT",
		PathPattern:        "/api/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProxySpaces modifies a proxy resource by ID

  Modifies an existing proxy.
*/
func (a *Client) UpdateProxySpaces(params *UpdateProxySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProxySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProxy_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProxySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProxySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProxy_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
