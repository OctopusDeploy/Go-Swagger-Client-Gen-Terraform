// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetPackageRepositoryGetRawReader is a Reader for the GetPackageRepositoryGetRaw structure.
type GetPackageRepositoryGetRawReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetPackageRepositoryGetRawReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPackageRepositoryGetRawOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPackageRepositoryGetRawBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPackageRepositoryGetRawOK creates a GetPackageRepositoryGetRawOK with default headers values
func NewGetPackageRepositoryGetRawOK(writer io.Writer) *GetPackageRepositoryGetRawOK {
	return &GetPackageRepositoryGetRawOK{
		Payload: writer,
	}
}

/*GetPackageRepositoryGetRawOK handles this case with default header values.

OK
*/
type GetPackageRepositoryGetRawOK struct {
	Payload io.Writer
}

func (o *GetPackageRepositoryGetRawOK) Error() string {
	return fmt.Sprintf("[GET /api/packages/{id}/raw][%d] getPackageRepositoryGetRawOK  %+v", 200, o.Payload)
}

func (o *GetPackageRepositoryGetRawOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *GetPackageRepositoryGetRawOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPackageRepositoryGetRawBadRequest creates a GetPackageRepositoryGetRawBadRequest with default headers values
func NewGetPackageRepositoryGetRawBadRequest() *GetPackageRepositoryGetRawBadRequest {
	return &GetPackageRepositoryGetRawBadRequest{}
}

/*GetPackageRepositoryGetRawBadRequest handles this case with default header values.

Invalid package specified.
No id parameter was provided.
Package was not found in the index of the built-in package repository.
Package was not found on disk, although metadata was found in the built-in package repository index. This could mean that the file was manually deleted from disk after being indexed.
*/
type GetPackageRepositoryGetRawBadRequest struct {
}

func (o *GetPackageRepositoryGetRawBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/packages/{id}/raw][%d] getPackageRepositoryGetRawBadRequest ", 400)
}

func (o *GetPackageRepositoryGetRawBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
