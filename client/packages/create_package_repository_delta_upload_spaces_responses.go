// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"models"
)

// CreatePackageRepositoryDeltaUploadSpacesReader is a Reader for the CreatePackageRepositoryDeltaUploadSpaces structure.
type CreatePackageRepositoryDeltaUploadSpacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePackageRepositoryDeltaUploadSpacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreatePackageRepositoryDeltaUploadSpacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreatePackageRepositoryDeltaUploadSpacesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePackageRepositoryDeltaUploadSpacesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreatePackageRepositoryDeltaUploadSpacesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreatePackageRepositoryDeltaUploadSpacesOK creates a CreatePackageRepositoryDeltaUploadSpacesOK with default headers values
func NewCreatePackageRepositoryDeltaUploadSpacesOK() *CreatePackageRepositoryDeltaUploadSpacesOK {
	return &CreatePackageRepositoryDeltaUploadSpacesOK{}
}

/*CreatePackageRepositoryDeltaUploadSpacesOK handles this case with default header values.

OK
*/
type CreatePackageRepositoryDeltaUploadSpacesOK struct {
}

func (o *CreatePackageRepositoryDeltaUploadSpacesOK) Error() string {
	return fmt.Sprintf("[POST /api/{baseSpaceId}/packages/{packageId}/{baseVersion}/delta][%d] createPackageRepositoryDeltaUploadSpacesOK ", 200)
}

func (o *CreatePackageRepositoryDeltaUploadSpacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreatePackageRepositoryDeltaUploadSpacesCreated creates a CreatePackageRepositoryDeltaUploadSpacesCreated with default headers values
func NewCreatePackageRepositoryDeltaUploadSpacesCreated() *CreatePackageRepositoryDeltaUploadSpacesCreated {
	return &CreatePackageRepositoryDeltaUploadSpacesCreated{}
}

/*CreatePackageRepositoryDeltaUploadSpacesCreated handles this case with default header values.

PackageFromBuiltInFeedResource resource returned
*/
type CreatePackageRepositoryDeltaUploadSpacesCreated struct {
	Payload *models.PackageFromBuiltInFeedResource
}

func (o *CreatePackageRepositoryDeltaUploadSpacesCreated) Error() string {
	return fmt.Sprintf("[POST /api/{baseSpaceId}/packages/{packageId}/{baseVersion}/delta][%d] createPackageRepositoryDeltaUploadSpacesCreated  %+v", 201, o.Payload)
}

func (o *CreatePackageRepositoryDeltaUploadSpacesCreated) GetPayload() *models.PackageFromBuiltInFeedResource {
	return o.Payload
}

func (o *CreatePackageRepositoryDeltaUploadSpacesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PackageFromBuiltInFeedResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePackageRepositoryDeltaUploadSpacesBadRequest creates a CreatePackageRepositoryDeltaUploadSpacesBadRequest with default headers values
func NewCreatePackageRepositoryDeltaUploadSpacesBadRequest() *CreatePackageRepositoryDeltaUploadSpacesBadRequest {
	return &CreatePackageRepositoryDeltaUploadSpacesBadRequest{}
}

/*CreatePackageRepositoryDeltaUploadSpacesBadRequest handles this case with default header values.

A delta file must be provided
A package file must be provided
Invalid semantic version supplied
No baseVersion parameter was provided.
No packageId parameter was provided.
Package Name is too long.
The uploaded delta file had length equal to 0. Please upload a non-empty file.
The uploaded package file had length equal to 0. Please upload a non-empty file.
*/
type CreatePackageRepositoryDeltaUploadSpacesBadRequest struct {
}

func (o *CreatePackageRepositoryDeltaUploadSpacesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/{baseSpaceId}/packages/{packageId}/{baseVersion}/delta][%d] createPackageRepositoryDeltaUploadSpacesBadRequest ", 400)
}

func (o *CreatePackageRepositoryDeltaUploadSpacesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreatePackageRepositoryDeltaUploadSpacesConflict creates a CreatePackageRepositoryDeltaUploadSpacesConflict with default headers values
func NewCreatePackageRepositoryDeltaUploadSpacesConflict() *CreatePackageRepositoryDeltaUploadSpacesConflict {
	return &CreatePackageRepositoryDeltaUploadSpacesConflict{}
}

/*CreatePackageRepositoryDeltaUploadSpacesConflict handles this case with default header values.

A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists.
*/
type CreatePackageRepositoryDeltaUploadSpacesConflict struct {
}

func (o *CreatePackageRepositoryDeltaUploadSpacesConflict) Error() string {
	return fmt.Sprintf("[POST /api/{baseSpaceId}/packages/{packageId}/{baseVersion}/delta][%d] createPackageRepositoryDeltaUploadSpacesConflict ", 409)
}

func (o *CreatePackageRepositoryDeltaUploadSpacesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
