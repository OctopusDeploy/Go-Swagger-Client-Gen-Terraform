// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"models"
)

// CreatePackageRepositoryDeltaUploadReader is a Reader for the CreatePackageRepositoryDeltaUpload structure.
type CreatePackageRepositoryDeltaUploadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePackageRepositoryDeltaUploadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreatePackageRepositoryDeltaUploadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreatePackageRepositoryDeltaUploadCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePackageRepositoryDeltaUploadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreatePackageRepositoryDeltaUploadConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreatePackageRepositoryDeltaUploadOK creates a CreatePackageRepositoryDeltaUploadOK with default headers values
func NewCreatePackageRepositoryDeltaUploadOK() *CreatePackageRepositoryDeltaUploadOK {
	return &CreatePackageRepositoryDeltaUploadOK{}
}

/*CreatePackageRepositoryDeltaUploadOK handles this case with default header values.

OK
*/
type CreatePackageRepositoryDeltaUploadOK struct {
}

func (o *CreatePackageRepositoryDeltaUploadOK) Error() string {
	return fmt.Sprintf("[POST /api/packages/{packageId}/{baseVersion}/delta][%d] createPackageRepositoryDeltaUploadOK ", 200)
}

func (o *CreatePackageRepositoryDeltaUploadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreatePackageRepositoryDeltaUploadCreated creates a CreatePackageRepositoryDeltaUploadCreated with default headers values
func NewCreatePackageRepositoryDeltaUploadCreated() *CreatePackageRepositoryDeltaUploadCreated {
	return &CreatePackageRepositoryDeltaUploadCreated{}
}

/*CreatePackageRepositoryDeltaUploadCreated handles this case with default header values.

PackageFromBuiltInFeedResource resource returned
*/
type CreatePackageRepositoryDeltaUploadCreated struct {
	Payload *models.PackageFromBuiltInFeedResource
}

func (o *CreatePackageRepositoryDeltaUploadCreated) Error() string {
	return fmt.Sprintf("[POST /api/packages/{packageId}/{baseVersion}/delta][%d] createPackageRepositoryDeltaUploadCreated  %+v", 201, o.Payload)
}

func (o *CreatePackageRepositoryDeltaUploadCreated) GetPayload() *models.PackageFromBuiltInFeedResource {
	return o.Payload
}

func (o *CreatePackageRepositoryDeltaUploadCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PackageFromBuiltInFeedResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePackageRepositoryDeltaUploadBadRequest creates a CreatePackageRepositoryDeltaUploadBadRequest with default headers values
func NewCreatePackageRepositoryDeltaUploadBadRequest() *CreatePackageRepositoryDeltaUploadBadRequest {
	return &CreatePackageRepositoryDeltaUploadBadRequest{}
}

/*CreatePackageRepositoryDeltaUploadBadRequest handles this case with default header values.

A delta file must be provided
A package file must be provided
Invalid semantic version supplied
No baseVersion parameter was provided.
No packageId parameter was provided.
Package Name is too long.
The uploaded delta file had length equal to 0. Please upload a non-empty file.
The uploaded package file had length equal to 0. Please upload a non-empty file.
*/
type CreatePackageRepositoryDeltaUploadBadRequest struct {
}

func (o *CreatePackageRepositoryDeltaUploadBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/packages/{packageId}/{baseVersion}/delta][%d] createPackageRepositoryDeltaUploadBadRequest ", 400)
}

func (o *CreatePackageRepositoryDeltaUploadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreatePackageRepositoryDeltaUploadConflict creates a CreatePackageRepositoryDeltaUploadConflict with default headers values
func NewCreatePackageRepositoryDeltaUploadConflict() *CreatePackageRepositoryDeltaUploadConflict {
	return &CreatePackageRepositoryDeltaUploadConflict{}
}

/*CreatePackageRepositoryDeltaUploadConflict handles this case with default header values.

A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists.
*/
type CreatePackageRepositoryDeltaUploadConflict struct {
}

func (o *CreatePackageRepositoryDeltaUploadConflict) Error() string {
	return fmt.Sprintf("[POST /api/packages/{packageId}/{baseVersion}/delta][%d] createPackageRepositoryDeltaUploadConflict ", 409)
}

func (o *CreatePackageRepositoryDeltaUploadConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
