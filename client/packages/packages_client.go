// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new packages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for packages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePackageRepositoryDeltaUpload(params *CreatePackageRepositoryDeltaUploadParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePackageRepositoryDeltaUploadOK, *CreatePackageRepositoryDeltaUploadCreated, error)

	CreatePackageRepositoryDeltaUploadSpaces(params *CreatePackageRepositoryDeltaUploadSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePackageRepositoryDeltaUploadSpacesOK, *CreatePackageRepositoryDeltaUploadSpacesCreated, error)

	CreatePackageRepositoryUpload(params *CreatePackageRepositoryUploadParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePackageRepositoryUploadOK, *CreatePackageRepositoryUploadCreated, error)

	CreatePackageRepositoryUploadSpaces(params *CreatePackageRepositoryUploadSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePackageRepositoryUploadSpacesOK, *CreatePackageRepositoryUploadSpacesCreated, error)

	DeletePackageRepositoryDeleteByID(params *DeletePackageRepositoryDeleteByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageRepositoryDeleteByIDOK, error)

	DeletePackageRepositoryDeleteByIDSpaces(params *DeletePackageRepositoryDeleteByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageRepositoryDeleteByIDSpacesOK, error)

	DeletePackageRepositoryDeleteByIds(params *DeletePackageRepositoryDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageRepositoryDeleteByIdsOK, error)

	DeletePackageRepositoryDeleteByIdsSpaces(params *DeletePackageRepositoryDeleteByIdsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageRepositoryDeleteByIdsSpacesOK, error)

	GetPackageListNotes(params *GetPackageListNotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageListNotesOK, error)

	GetPackageListNotesSpaces(params *GetPackageListNotesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageListNotesSpacesOK, error)

	GetPackageNotes(params *GetPackageNotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageNotesOK, error)

	GetPackageNotesSpaces(params *GetPackageNotesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageNotesSpacesOK, error)

	GetPackageRepository(params *GetPackageRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryOK, error)

	GetPackageRepositoryDeltaSignature(params *GetPackageRepositoryDeltaSignatureParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryDeltaSignatureOK, error)

	GetPackageRepositoryDeltaSignatureSpaces(params *GetPackageRepositoryDeltaSignatureSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryDeltaSignatureSpacesOK, error)

	GetPackageRepositoryGetRaw(params *GetPackageRepositoryGetRawParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetPackageRepositoryGetRawOK, error)

	GetPackageRepositoryGetRawSpaces(params *GetPackageRepositoryGetRawSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetPackageRepositoryGetRawSpacesOK, error)

	GetPackageRepositoryList(params *GetPackageRepositoryListParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryListOK, error)

	GetPackageRepositoryListSpaces(params *GetPackageRepositoryListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryListSpacesOK, error)

	GetPackageRepositorySpaces(params *GetPackageRepositorySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositorySpacesOK, error)

	GetPackageSearchActionOld(params *GetPackageSearchActionOldParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageSearchActionOldOK, error)

	GetPackageSearchActionOldSpaces(params *GetPackageSearchActionOldSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageSearchActionOldSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePackageRepositoryDeltaUpload Uploads a delta patch for the given file. Used to optimize file upload.
*/
func (a *Client) CreatePackageRepositoryDeltaUpload(params *CreatePackageRepositoryDeltaUploadParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePackageRepositoryDeltaUploadOK, *CreatePackageRepositoryDeltaUploadCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePackageRepositoryDeltaUploadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPackageRepositoryDeltaUpload",
		Method:             "POST",
		PathPattern:        "/api/packages/{packageId}/{baseVersion}/delta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePackageRepositoryDeltaUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePackageRepositoryDeltaUploadOK:
		return value, nil, nil
	case *CreatePackageRepositoryDeltaUploadCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for packages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePackageRepositoryDeltaUploadSpaces Uploads a delta patch for the given file. Used to optimize file upload.
*/
func (a *Client) CreatePackageRepositoryDeltaUploadSpaces(params *CreatePackageRepositoryDeltaUploadSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePackageRepositoryDeltaUploadSpacesOK, *CreatePackageRepositoryDeltaUploadSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePackageRepositoryDeltaUploadSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPackageRepositoryDeltaUpload_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/packages/{packageId}/{baseVersion}/delta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePackageRepositoryDeltaUploadSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePackageRepositoryDeltaUploadSpacesOK:
		return value, nil, nil
	case *CreatePackageRepositoryDeltaUploadSpacesCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for packages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePackageRepositoryUpload Uploads a new package
*/
func (a *Client) CreatePackageRepositoryUpload(params *CreatePackageRepositoryUploadParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePackageRepositoryUploadOK, *CreatePackageRepositoryUploadCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePackageRepositoryUploadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPackageRepositoryUpload",
		Method:             "POST",
		PathPattern:        "/api/packages/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePackageRepositoryUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePackageRepositoryUploadOK:
		return value, nil, nil
	case *CreatePackageRepositoryUploadCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for packages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePackageRepositoryUploadSpaces Uploads a new package
*/
func (a *Client) CreatePackageRepositoryUploadSpaces(params *CreatePackageRepositoryUploadSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePackageRepositoryUploadSpacesOK, *CreatePackageRepositoryUploadSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePackageRepositoryUploadSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPackageRepositoryUpload_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/packages/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePackageRepositoryUploadSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePackageRepositoryUploadSpacesOK:
		return value, nil, nil
	case *CreatePackageRepositoryUploadSpacesCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for packages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePackageRepositoryDeleteByID Deletes the specified package
*/
func (a *Client) DeletePackageRepositoryDeleteByID(params *DeletePackageRepositoryDeleteByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageRepositoryDeleteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageRepositoryDeleteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePackageRepositoryDeleteById",
		Method:             "DELETE",
		PathPattern:        "/api/packages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePackageRepositoryDeleteByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackageRepositoryDeleteByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePackageRepositoryDeleteById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePackageRepositoryDeleteByIDSpaces Deletes the specified package
*/
func (a *Client) DeletePackageRepositoryDeleteByIDSpaces(params *DeletePackageRepositoryDeleteByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageRepositoryDeleteByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageRepositoryDeleteByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePackageRepositoryDeleteById_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/packages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePackageRepositoryDeleteByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackageRepositoryDeleteByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePackageRepositoryDeleteById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePackageRepositoryDeleteByIds Bulk deletes packages
*/
func (a *Client) DeletePackageRepositoryDeleteByIds(params *DeletePackageRepositoryDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageRepositoryDeleteByIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageRepositoryDeleteByIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePackageRepositoryDeleteByIds",
		Method:             "DELETE",
		PathPattern:        "/api/packages/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePackageRepositoryDeleteByIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackageRepositoryDeleteByIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePackageRepositoryDeleteByIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePackageRepositoryDeleteByIdsSpaces Bulk deletes packages
*/
func (a *Client) DeletePackageRepositoryDeleteByIdsSpaces(params *DeletePackageRepositoryDeleteByIdsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePackageRepositoryDeleteByIdsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageRepositoryDeleteByIdsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePackageRepositoryDeleteByIds_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/packages/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePackageRepositoryDeleteByIdsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackageRepositoryDeleteByIdsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePackageRepositoryDeleteByIds_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageListNotes Returns a list of release notes for the specified packages
*/
func (a *Client) GetPackageListNotes(params *GetPackageListNotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageListNotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageListNotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageListNotes",
		Method:             "GET",
		PathPattern:        "/api/packages/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageListNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageListNotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageListNotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageListNotesSpaces Returns a list of release notes for the specified packages
*/
func (a *Client) GetPackageListNotesSpaces(params *GetPackageListNotesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageListNotesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageListNotesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageListNotes_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/packages/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageListNotesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageListNotesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageListNotes_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageNotes Returns the release notes for the specified package
*/
func (a *Client) GetPackageNotes(params *GetPackageNotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageNotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageNotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageNotes",
		Method:             "GET",
		PathPattern:        "/api/feeds/{id}/packages/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageNotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageNotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageNotesSpaces Returns the release notes for the specified package
*/
func (a *Client) GetPackageNotesSpaces(params *GetPackageNotesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageNotesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageNotesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageNotes_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/feeds/{id}/packages/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageNotesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageNotesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageNotes_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageRepository Returns package information for the specified package id
*/
func (a *Client) GetPackageRepository(params *GetPackageRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageRepository",
		Method:             "GET",
		PathPattern:        "/api/packages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageRepositoryDeltaSignature Returns the delta-signature for a given package. Used to optimize file upload.
*/
func (a *Client) GetPackageRepositoryDeltaSignature(params *GetPackageRepositoryDeltaSignatureParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryDeltaSignatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageRepositoryDeltaSignatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageRepositoryDeltaSignature",
		Method:             "GET",
		PathPattern:        "/api/packages/{packageId}/{version}/delta-signature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageRepositoryDeltaSignatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageRepositoryDeltaSignatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageRepositoryDeltaSignature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageRepositoryDeltaSignatureSpaces Returns the delta-signature for a given package. Used to optimize file upload.
*/
func (a *Client) GetPackageRepositoryDeltaSignatureSpaces(params *GetPackageRepositoryDeltaSignatureSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryDeltaSignatureSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageRepositoryDeltaSignatureSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageRepositoryDeltaSignature_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/packages/{packageId}/{version}/delta-signature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageRepositoryDeltaSignatureSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageRepositoryDeltaSignatureSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageRepositoryDeltaSignature_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageRepositoryGetRaw Downloads the specified package
*/
func (a *Client) GetPackageRepositoryGetRaw(params *GetPackageRepositoryGetRawParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetPackageRepositoryGetRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageRepositoryGetRawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageRepositoryGetRaw",
		Method:             "GET",
		PathPattern:        "/api/packages/{id}/raw",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageRepositoryGetRawReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageRepositoryGetRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageRepositoryGetRaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageRepositoryGetRawSpaces Downloads the specified package
*/
func (a *Client) GetPackageRepositoryGetRawSpaces(params *GetPackageRepositoryGetRawSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetPackageRepositoryGetRawSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageRepositoryGetRawSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageRepositoryGetRaw_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/packages/{id}/raw",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageRepositoryGetRawSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageRepositoryGetRawSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageRepositoryGetRaw_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageRepositoryList Returns a list of packages matching the specified criteria
*/
func (a *Client) GetPackageRepositoryList(params *GetPackageRepositoryListParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageRepositoryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageRepositoryList",
		Method:             "GET",
		PathPattern:        "/api/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageRepositoryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageRepositoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageRepositoryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageRepositoryListSpaces Returns a list of packages matching the specified criteria
*/
func (a *Client) GetPackageRepositoryListSpaces(params *GetPackageRepositoryListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositoryListSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageRepositoryListSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageRepositoryList_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageRepositoryListSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageRepositoryListSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageRepositoryList_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageRepositorySpaces Returns package information for the specified package id
*/
func (a *Client) GetPackageRepositorySpaces(params *GetPackageRepositorySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageRepositorySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageRepositorySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageRepository_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/packages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageRepositorySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageRepositorySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageRepository_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageSearchActionOld Searches the specified feed for packages. Legacy. Please use the /feeds{id}/packages/search endpoint instead.
*/
func (a *Client) GetPackageSearchActionOld(params *GetPackageSearchActionOldParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageSearchActionOldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageSearchActionOldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageSearchActionOld",
		Method:             "GET",
		PathPattern:        "/api/feeds/{id}/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageSearchActionOldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageSearchActionOldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageSearchActionOld: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPackageSearchActionOldSpaces Searches the specified feed for packages. Legacy. Please use the /feeds{id}/packages/search endpoint instead.
*/
func (a *Client) GetPackageSearchActionOldSpaces(params *GetPackageSearchActionOldSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPackageSearchActionOldSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageSearchActionOldSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPackageSearchActionOld_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/feeds/{id}/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackageSearchActionOldSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageSearchActionOldSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageSearchActionOld_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
