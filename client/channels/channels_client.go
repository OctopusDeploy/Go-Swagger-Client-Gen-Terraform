// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new channels API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for channels API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateChannel(params *CreateChannelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateChannelCreated, error)

	CreateChannelSpaces(params *CreateChannelSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateChannelSpacesCreated, error)

	CreateVersionRuleTest(params *CreateVersionRuleTestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVersionRuleTestOK, error)

	CreateVersionRuleTestSpaces(params *CreateVersionRuleTestSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVersionRuleTestSpacesOK, error)

	DeleteChannel(params *DeleteChannelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteChannelOK, error)

	DeleteChannelSpaces(params *DeleteChannelSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteChannelSpacesOK, error)

	GetChannelByID(params *GetChannelByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetChannelByIDOK, error)

	GetChannelByIDSpaces(params *GetChannelByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetChannelByIDSpacesOK, error)

	GetVersionRuleTest(params *GetVersionRuleTestParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionRuleTestOK, error)

	GetVersionRuleTestSpaces(params *GetVersionRuleTestSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionRuleTestSpacesOK, error)

	IndexChannelReleases(params *IndexChannelReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexChannelReleasesOK, error)

	IndexChannelReleasesSpaces(params *IndexChannelReleasesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexChannelReleasesSpacesOK, error)

	IndexChannels(params *IndexChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexChannelsOK, error)

	IndexChannelsSpaces(params *IndexChannelsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexChannelsSpacesOK, error)

	IndexProjectChannels(params *IndexProjectChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectChannelsOK, error)

	IndexProjectChannelsSpaces(params *IndexProjectChannelsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectChannelsSpacesOK, error)

	ListAllChannels(params *ListAllChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllChannelsOK, error)

	ListAllChannelsSpaces(params *ListAllChannelsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllChannelsSpacesOK, error)

	UpdateChannel(params *UpdateChannelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateChannelOK, error)

	UpdateChannelSpaces(params *UpdateChannelSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateChannelSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateChannel creates a channel resource

  Creates a new channel
*/
func (a *Client) CreateChannel(params *CreateChannelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateChannelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createChannel",
		Method:             "POST",
		PathPattern:        "/api/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChannelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateChannelSpaces creates a channel resource

  Creates a new channel
*/
func (a *Client) CreateChannelSpaces(params *CreateChannelSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateChannelSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChannelSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createChannel_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateChannelSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChannelSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createChannel_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVersionRuleTest Perform channel version rule test against provided package version
*/
func (a *Client) CreateVersionRuleTest(params *CreateVersionRuleTestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVersionRuleTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVersionRuleTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createVersionRuleTest",
		Method:             "POST",
		PathPattern:        "/api/channels/rule-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVersionRuleTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVersionRuleTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVersionRuleTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVersionRuleTestSpaces Perform channel version rule test against provided package version
*/
func (a *Client) CreateVersionRuleTestSpaces(params *CreateVersionRuleTestSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVersionRuleTestSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVersionRuleTestSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createVersionRuleTest_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/channels/rule-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVersionRuleTestSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVersionRuleTestSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVersionRuleTest_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteChannel deletes a channel resource by ID

  Deletes an existing channel.
*/
func (a *Client) DeleteChannel(params *DeleteChannelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteChannel",
		Method:             "DELETE",
		PathPattern:        "/api/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteChannelSpaces deletes a channel resource by ID

  Deletes an existing channel.
*/
func (a *Client) DeleteChannelSpaces(params *DeleteChannelSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteChannelSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChannelSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteChannel_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteChannelSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChannelSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteChannel_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChannelByID gets a channel resource by ID

  Get a channel
*/
func (a *Client) GetChannelByID(params *GetChannelByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetChannelByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChannelById",
		Method:             "GET",
		PathPattern:        "/api/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChannelByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChannelById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChannelByIDSpaces gets a channel resource by ID

  Get a channel
*/
func (a *Client) GetChannelByIDSpaces(params *GetChannelByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetChannelByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChannelById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChannelByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChannelById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVersionRuleTest Perform channel version rule test against provided package version
*/
func (a *Client) GetVersionRuleTest(params *GetVersionRuleTestParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionRuleTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionRuleTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVersionRuleTest",
		Method:             "GET",
		PathPattern:        "/api/channels/rule-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionRuleTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionRuleTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionRuleTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVersionRuleTestSpaces Perform channel version rule test against provided package version
*/
func (a *Client) GetVersionRuleTestSpaces(params *GetVersionRuleTestSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionRuleTestSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionRuleTestSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVersionRuleTest_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/channels/rule-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionRuleTestSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionRuleTestSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionRuleTest_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexChannelReleases gets a list of release resources for the given channel resource

  Lists all of the releases that belong to the given channel. Releases will be ordered from most recent to least recent.
*/
func (a *Client) IndexChannelReleases(params *IndexChannelReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexChannelReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexChannelReleasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexChannelReleases",
		Method:             "GET",
		PathPattern:        "/api/channels/{id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexChannelReleasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexChannelReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexChannelReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexChannelReleasesSpaces gets a list of release resources for the given channel resource

  Lists all of the releases that belong to the given channel. Releases will be ordered from most recent to least recent.
*/
func (a *Client) IndexChannelReleasesSpaces(params *IndexChannelReleasesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexChannelReleasesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexChannelReleasesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexChannelReleases_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/channels/{id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexChannelReleasesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexChannelReleasesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexChannelReleases_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexChannels gets a list of channel resources

  Lists all of the channels in the supplied Octopus Deploy Space, from all projects, sorted by name.
*/
func (a *Client) IndexChannels(params *IndexChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexChannels",
		Method:             "GET",
		PathPattern:        "/api/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexChannelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexChannels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexChannelsSpaces gets a list of channel resources

  Lists all of the channels in the supplied Octopus Deploy Space, from all projects, sorted by name.
*/
func (a *Client) IndexChannelsSpaces(params *IndexChannelsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexChannelsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexChannelsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexChannels_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexChannelsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexChannelsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexChannels_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectChannels gets a list of channel resources for the given project resource

  Lists all the channels for the given project
*/
func (a *Client) IndexProjectChannels(params *IndexProjectChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectChannels",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectChannelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectChannels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectChannelsSpaces gets a list of channel resources for the given project resource

  Lists all the channels for the given project
*/
func (a *Client) IndexProjectChannelsSpaces(params *IndexProjectChannelsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectChannelsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectChannelsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectChannels_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectChannelsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectChannelsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectChannels_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllChannels gets a list of channel resources

  Lists all of the channels in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllChannels(params *ListAllChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllChannels",
		Method:             "GET",
		PathPattern:        "/api/channels/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllChannelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllChannels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllChannelsSpaces gets a list of channel resources

  Lists all of the channels in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllChannelsSpaces(params *ListAllChannelsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllChannelsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllChannelsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllChannels_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/channels/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllChannelsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllChannelsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllChannels_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateChannel modifies a channel resource by ID

  Updates an existing channel
*/
func (a *Client) UpdateChannel(params *UpdateChannelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateChannel",
		Method:             "PUT",
		PathPattern:        "/api/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateChannelSpaces modifies a channel resource by ID

  Updates an existing channel
*/
func (a *Client) UpdateChannelSpaces(params *UpdateChannelSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateChannelSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateChannelSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateChannel_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/channels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateChannelSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateChannelSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateChannel_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
