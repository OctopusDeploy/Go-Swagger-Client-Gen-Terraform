// Code generated by go-swagger; DO NOT EDIT.

package server_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSystemGarbageCollect(params *CreateSystemGarbageCollectParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSystemGarbageCollectOK, error)

	GetExtensionStats(params *GetExtensionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetExtensionStatsOK, error)

	GetListServerTimezones(params *GetListServerTimezonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListServerTimezonesOK, error)

	GetRecentLogs(params *GetRecentLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRecentLogsOK, error)

	GetServerStatus(params *GetServerStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetServerStatusOK, error)

	GetServerStatusHealth(params *GetServerStatusHealthParams) (*GetServerStatusHealthOK, error)

	GetSystemInfo(params *GetSystemInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemInfoOK, error)

	GetSystemReport(params *GetSystemReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemReportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSystemGarbageCollect Forces a GC collect.
*/
func (a *Client) CreateSystemGarbageCollect(params *CreateSystemGarbageCollectParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSystemGarbageCollectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSystemGarbageCollectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSystemGarbageCollect",
		Method:             "POST",
		PathPattern:        "/api/serverstatus/gc-collect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSystemGarbageCollectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSystemGarbageCollectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSystemGarbageCollect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExtensionStats Provides statistics for the loaded server extensions.
*/
func (a *Client) GetExtensionStats(params *GetExtensionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetExtensionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExtensionStats",
		Method:             "GET",
		PathPattern:        "/api/serverstatus/extensions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExtensionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExtensionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExtensionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListServerTimezones Lists timezones supported by the server.
*/
func (a *Client) GetListServerTimezones(params *GetListServerTimezonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListServerTimezonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListServerTimezonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListServerTimezones",
		Method:             "GET",
		PathPattern:        "/api/serverstatus/timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListServerTimezonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListServerTimezonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListServerTimezones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRecentLogs Retrieves the most recent high-priority log messages from this execution of the Octopus Server process.
*/
func (a *Client) GetRecentLogs(params *GetRecentLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRecentLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecentLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRecentLogs",
		Method:             "GET",
		PathPattern:        "/api/serverstatus/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecentLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecentLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRecentLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerStatus Shows information about the status of the Octopus Server.
*/
func (a *Client) GetServerStatus(params *GetServerStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetServerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerStatus",
		Method:             "GET",
		PathPattern:        "/api/serverstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerStatusHealth Provides a super simple interface perfect for checking the general health of your entire Octopus Server cluster.
*/
func (a *Client) GetServerStatusHealth(params *GetServerStatusHealthParams) (*GetServerStatusHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerStatusHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerStatusHealth",
		Method:             "GET",
		PathPattern:        "/api/serverstatus/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerStatusHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerStatusHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerStatusHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemInfo Provides information about the Octopus Server process and the machine on which it is running.
*/
func (a *Client) GetSystemInfo(params *GetSystemInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystemInfo",
		Method:             "GET",
		PathPattern:        "/api/serverstatus/system-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemReport Creates a .zip archive containing an aggregate of the other system information APIs.
*/
func (a *Client) GetSystemReport(params *GetSystemReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystemReport",
		Method:             "GET",
		PathPattern:        "/api/serverstatus/system-report",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
