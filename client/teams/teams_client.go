// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new teams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTeam(params *CreateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTeamCreated, error)

	CreateTeamSpaces(params *CreateTeamSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTeamSpacesCreated, error)

	DeleteTeam(params *DeleteTeamParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamOK, error)

	DeleteTeamSpaces(params *DeleteTeamSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamSpacesOK, error)

	GetListScopedUserRoleForTeam(params *GetListScopedUserRoleForTeamParams, authInfo runtime.ClientAuthInfoWriter) (*GetListScopedUserRoleForTeamOK, error)

	GetListScopedUserRoleForTeamSpaces(params *GetListScopedUserRoleForTeamSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListScopedUserRoleForTeamSpacesOK, error)

	GetTeamByID(params *GetTeamByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamByIDOK, error)

	GetTeamByIDSpaces(params *GetTeamByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamByIDSpacesOK, error)

	IndexTeams(params *IndexTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTeamsOK, error)

	IndexTeamsSpaces(params *IndexTeamsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTeamsSpacesOK, error)

	ListAllTeams(params *ListAllTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllTeamsOK, error)

	ListAllTeamsSpaces(params *ListAllTeamsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllTeamsSpacesOK, error)

	UpdateTeam(params *UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamOK, error)

	UpdateTeamSpaces(params *UpdateTeamSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTeam creates a team resource

  Creates a team.
*/
func (a *Client) CreateTeam(params *CreateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTeamCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTeam",
		Method:             "POST",
		PathPattern:        "/api/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTeamCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTeamSpaces creates a team resource

  Creates a team.
*/
func (a *Client) CreateTeamSpaces(params *CreateTeamSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTeamSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTeam_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTeamSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTeamSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTeam_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTeam deletes a team resource by ID

  Deletes an existing team.
*/
func (a *Client) DeleteTeam(params *DeleteTeamParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTeam",
		Method:             "DELETE",
		PathPattern:        "/api/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTeamSpaces deletes a team resource by ID

  Deletes an existing team.
*/
func (a *Client) DeleteTeamSpaces(params *DeleteTeamSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTeam_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTeamSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTeam_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListScopedUserRoleForTeam Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) GetListScopedUserRoleForTeam(params *GetListScopedUserRoleForTeamParams, authInfo runtime.ClientAuthInfoWriter) (*GetListScopedUserRoleForTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListScopedUserRoleForTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListScopedUserRoleForTeam",
		Method:             "GET",
		PathPattern:        "/api/teams/{id}/scopeduserroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListScopedUserRoleForTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListScopedUserRoleForTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListScopedUserRoleForTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListScopedUserRoleForTeamSpaces Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) GetListScopedUserRoleForTeamSpaces(params *GetListScopedUserRoleForTeamSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListScopedUserRoleForTeamSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListScopedUserRoleForTeamSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListScopedUserRoleForTeam_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/teams/{id}/scopeduserroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListScopedUserRoleForTeamSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListScopedUserRoleForTeamSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListScopedUserRoleForTeam_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamByID gets a team resource by ID

  Gets a team by ID.
*/
func (a *Client) GetTeamByID(params *GetTeamByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeamById",
		Method:             "GET",
		PathPattern:        "/api/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeamById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamByIDSpaces gets a team resource by ID

  Gets a team by ID.
*/
func (a *Client) GetTeamByIDSpaces(params *GetTeamByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeamById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTeamByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeamById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexTeams gets a list of team resources

  Lists all of the teams in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexTeams(params *IndexTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexTeams",
		Method:             "GET",
		PathPattern:        "/api/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexTeamsSpaces gets a list of team resources

  Lists all of the teams in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexTeamsSpaces(params *IndexTeamsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTeamsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexTeamsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexTeams_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexTeamsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexTeamsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexTeams_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllTeams gets a list of team resources

  Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) ListAllTeams(params *ListAllTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllTeams",
		Method:             "GET",
		PathPattern:        "/api/teams/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllTeamsSpaces gets a list of team resources

  Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) ListAllTeamsSpaces(params *ListAllTeamsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllTeamsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllTeamsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllTeams_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/teams/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllTeamsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllTeamsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllTeams_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTeam modifies a team resource by ID

  Modifies an existing team. The Everyone team is treated as a special case and its members and external groups may not be changed.
*/
func (a *Client) UpdateTeam(params *UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTeam",
		Method:             "PUT",
		PathPattern:        "/api/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTeamSpaces modifies a team resource by ID

  Modifies an existing team. The Everyone team is treated as a special case and its members and external groups may not be changed.
*/
func (a *Client) UpdateTeamSpaces(params *UpdateTeamSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTeam_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTeamSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTeam_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
