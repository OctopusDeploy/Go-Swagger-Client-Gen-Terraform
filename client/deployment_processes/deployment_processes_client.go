// Code generated by go-swagger; DO NOT EDIT.

package deployment_processes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deployment processes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployment processes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeploymentProcessByID(params *GetDeploymentProcessByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentProcessByIDOK, error)

	GetDeploymentProcessByIDSpaces(params *GetDeploymentProcessByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentProcessByIDSpacesOK, error)

	GetReleaseTemplate(params *GetReleaseTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseTemplateOK, error)

	GetReleaseTemplateSpaces(params *GetReleaseTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseTemplateSpacesOK, error)

	IndexDeploymentProcesses(params *IndexDeploymentProcessesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexDeploymentProcessesOK, error)

	IndexDeploymentProcessesSpaces(params *IndexDeploymentProcessesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexDeploymentProcessesSpacesOK, error)

	UpdateDeploymentProcess(params *UpdateDeploymentProcessParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeploymentProcessOK, error)

	UpdateDeploymentProcessSpaces(params *UpdateDeploymentProcessSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeploymentProcessSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDeploymentProcessByID gets a deployment process resource by ID

  Gets a deployment process by ID.
*/
func (a *Client) GetDeploymentProcessByID(params *GetDeploymentProcessByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentProcessByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentProcessByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentProcessById",
		Method:             "GET",
		PathPattern:        "/api/deploymentprocesses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentProcessByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentProcessByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentProcessById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentProcessByIDSpaces gets a deployment process resource by ID

  Gets a deployment process by ID.
*/
func (a *Client) GetDeploymentProcessByIDSpaces(params *GetDeploymentProcessByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentProcessByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentProcessByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentProcessById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/deploymentprocesses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentProcessByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentProcessByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentProcessById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseTemplate Gets all of the information necessary for creating or editing a release using this deployment process.
*/
func (a *Client) GetReleaseTemplate(params *GetReleaseTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseTemplate",
		Method:             "GET",
		PathPattern:        "/api/deploymentprocesses/{id}/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseTemplateSpaces Gets all of the information necessary for creating or editing a release using this deployment process.
*/
func (a *Client) GetReleaseTemplateSpaces(params *GetReleaseTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseTemplateSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseTemplateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseTemplate_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/deploymentprocesses/{id}/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseTemplateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseTemplateSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseTemplate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexDeploymentProcesses gets a list of deployment process resources

  Lists all the deployment processes in the supplied Octopus Deploy Space, sorted by Id
*/
func (a *Client) IndexDeploymentProcesses(params *IndexDeploymentProcessesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexDeploymentProcessesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexDeploymentProcessesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexDeploymentProcesses",
		Method:             "GET",
		PathPattern:        "/api/deploymentprocesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexDeploymentProcessesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexDeploymentProcessesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexDeploymentProcesses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexDeploymentProcessesSpaces gets a list of deployment process resources

  Lists all the deployment processes in the supplied Octopus Deploy Space, sorted by Id
*/
func (a *Client) IndexDeploymentProcessesSpaces(params *IndexDeploymentProcessesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexDeploymentProcessesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexDeploymentProcessesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexDeploymentProcesses_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/deploymentprocesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexDeploymentProcessesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexDeploymentProcessesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexDeploymentProcesses_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeploymentProcess Modifies a deployment process. Only allowed for deployment processes owned by a project (cannot be used to change the deployment process owned by a release).
*/
func (a *Client) UpdateDeploymentProcess(params *UpdateDeploymentProcessParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeploymentProcessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeploymentProcessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeploymentProcess",
		Method:             "PUT",
		PathPattern:        "/api/deploymentprocesses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDeploymentProcessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeploymentProcessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeploymentProcess: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeploymentProcessSpaces Modifies a deployment process. Only allowed for deployment processes owned by a project (cannot be used to change the deployment process owned by a release).
*/
func (a *Client) UpdateDeploymentProcessSpaces(params *UpdateDeploymentProcessSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeploymentProcessSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeploymentProcessSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeploymentProcess_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/deploymentprocesses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDeploymentProcessSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeploymentProcessSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeploymentProcess_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
