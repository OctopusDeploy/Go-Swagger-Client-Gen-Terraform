// Code generated by go-swagger; DO NOT EDIT.

package machine_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new machine policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for machine policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMachinePolicy(params *CreateMachinePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMachinePolicyCreated, error)

	CreateMachinePolicySpaces(params *CreateMachinePolicySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMachinePolicySpacesCreated, error)

	DeleteMachinePolicy(params *DeleteMachinePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMachinePolicyOK, error)

	DeleteMachinePolicySpaces(params *DeleteMachinePolicySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMachinePolicySpacesOK, error)

	GetMachinePolicyByID(params *GetMachinePolicyByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinePolicyByIDOK, error)

	GetMachinePolicyByIDSpaces(params *GetMachinePolicyByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinePolicyByIDSpacesOK, error)

	GetMachinePolicyTemplate(params *GetMachinePolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinePolicyTemplateOK, error)

	GetMachinePolicyTemplateSpaces(params *GetMachinePolicyTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinePolicyTemplateSpacesOK, error)

	IndexMachinePolicies(params *IndexMachinePoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePoliciesOK, error)

	IndexMachinePoliciesSpaces(params *IndexMachinePoliciesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePoliciesSpacesOK, error)

	IndexMachinePolicyDeploymentTargets(params *IndexMachinePolicyDeploymentTargetsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePolicyDeploymentTargetsOK, error)

	IndexMachinePolicyDeploymentTargetsSpaces(params *IndexMachinePolicyDeploymentTargetsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePolicyDeploymentTargetsSpacesOK, error)

	IndexMachinePolicyWorkers(params *IndexMachinePolicyWorkersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePolicyWorkersOK, error)

	IndexMachinePolicyWorkersSpaces(params *IndexMachinePolicyWorkersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePolicyWorkersSpacesOK, error)

	ListAllMachinePolicies(params *ListAllMachinePoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllMachinePoliciesOK, error)

	ListAllMachinePoliciesSpaces(params *ListAllMachinePoliciesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllMachinePoliciesSpacesOK, error)

	UpdateMachinePolicy(params *UpdateMachinePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMachinePolicyOK, error)

	UpdateMachinePolicySpaces(params *UpdateMachinePolicySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMachinePolicySpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMachinePolicy creates a machine policy resource

  Creates a new machine policy.
*/
func (a *Client) CreateMachinePolicy(params *CreateMachinePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMachinePolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMachinePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMachinePolicy",
		Method:             "POST",
		PathPattern:        "/api/machinepolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMachinePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMachinePolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMachinePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateMachinePolicySpaces creates a machine policy resource

  Creates a new machine policy.
*/
func (a *Client) CreateMachinePolicySpaces(params *CreateMachinePolicySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMachinePolicySpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMachinePolicySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMachinePolicy_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMachinePolicySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMachinePolicySpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMachinePolicy_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMachinePolicy Deletes an existing machine policy.
*/
func (a *Client) DeleteMachinePolicy(params *DeleteMachinePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMachinePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachinePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMachinePolicy",
		Method:             "DELETE",
		PathPattern:        "/api/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMachinePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMachinePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMachinePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMachinePolicySpaces Deletes an existing machine policy.
*/
func (a *Client) DeleteMachinePolicySpaces(params *DeleteMachinePolicySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMachinePolicySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachinePolicySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMachinePolicy_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMachinePolicySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMachinePolicySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMachinePolicy_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMachinePolicyByID gets a machine policy resource by ID

  Gets a single machine policy by ID.
*/
func (a *Client) GetMachinePolicyByID(params *GetMachinePolicyByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinePolicyByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachinePolicyByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachinePolicyById",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMachinePolicyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMachinePolicyByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMachinePolicyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMachinePolicyByIDSpaces gets a machine policy resource by ID

  Gets a single machine policy by ID.
*/
func (a *Client) GetMachinePolicyByIDSpaces(params *GetMachinePolicyByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinePolicyByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachinePolicyByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachinePolicyById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMachinePolicyByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMachinePolicyByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMachinePolicyById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMachinePolicyTemplate Gets a template for a new Machine Policy, which includes any defaults.
*/
func (a *Client) GetMachinePolicyTemplate(params *GetMachinePolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinePolicyTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachinePolicyTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachinePolicyTemplate",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMachinePolicyTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMachinePolicyTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMachinePolicyTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMachinePolicyTemplateSpaces Gets a template for a new Machine Policy, which includes any defaults.
*/
func (a *Client) GetMachinePolicyTemplateSpaces(params *GetMachinePolicyTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachinePolicyTemplateSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachinePolicyTemplateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachinePolicyTemplate_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMachinePolicyTemplateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMachinePolicyTemplateSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMachinePolicyTemplate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexMachinePolicies gets a list of machine policy resources

  Lists all of the machine policies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexMachinePolicies(params *IndexMachinePoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexMachinePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexMachinePolicies",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexMachinePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexMachinePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexMachinePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexMachinePoliciesSpaces gets a list of machine policy resources

  Lists all of the machine policies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexMachinePoliciesSpaces(params *IndexMachinePoliciesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePoliciesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexMachinePoliciesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexMachinePolicies_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexMachinePoliciesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexMachinePoliciesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexMachinePolicies_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexMachinePolicyDeploymentTargets gets a list of deployment target resources for the given machine policy resource

  Lists all of the machines that belong to the given machine policy.
*/
func (a *Client) IndexMachinePolicyDeploymentTargets(params *IndexMachinePolicyDeploymentTargetsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePolicyDeploymentTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexMachinePolicyDeploymentTargetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexMachinePolicyDeploymentTargets",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies/{id}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexMachinePolicyDeploymentTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexMachinePolicyDeploymentTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexMachinePolicyDeploymentTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexMachinePolicyDeploymentTargetsSpaces gets a list of deployment target resources for the given machine policy resource

  Lists all of the machines that belong to the given machine policy.
*/
func (a *Client) IndexMachinePolicyDeploymentTargetsSpaces(params *IndexMachinePolicyDeploymentTargetsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePolicyDeploymentTargetsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexMachinePolicyDeploymentTargetsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexMachinePolicyDeploymentTargets_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies/{id}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexMachinePolicyDeploymentTargetsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexMachinePolicyDeploymentTargetsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexMachinePolicyDeploymentTargets_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexMachinePolicyWorkers gets a list of worker resources for the given machine policy resource

  Lists all of the workers that belong to the given machine policy.
*/
func (a *Client) IndexMachinePolicyWorkers(params *IndexMachinePolicyWorkersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePolicyWorkersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexMachinePolicyWorkersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexMachinePolicyWorkers",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies/{id}/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexMachinePolicyWorkersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexMachinePolicyWorkersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexMachinePolicyWorkers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexMachinePolicyWorkersSpaces gets a list of worker resources for the given machine policy resource

  Lists all of the workers that belong to the given machine policy.
*/
func (a *Client) IndexMachinePolicyWorkersSpaces(params *IndexMachinePolicyWorkersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexMachinePolicyWorkersSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexMachinePolicyWorkersSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexMachinePolicyWorkers_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies/{id}/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexMachinePolicyWorkersSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexMachinePolicyWorkersSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexMachinePolicyWorkers_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllMachinePolicies gets a list of machine policy resources

  Lists all the machine policies in the supplied Octopus Deploy Space.
*/
func (a *Client) ListAllMachinePolicies(params *ListAllMachinePoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllMachinePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllMachinePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllMachinePolicies",
		Method:             "GET",
		PathPattern:        "/api/machinepolicies/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllMachinePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllMachinePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllMachinePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllMachinePoliciesSpaces gets a list of machine policy resources

  Lists all the machine policies in the supplied Octopus Deploy Space.
*/
func (a *Client) ListAllMachinePoliciesSpaces(params *ListAllMachinePoliciesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllMachinePoliciesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllMachinePoliciesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllMachinePolicies_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllMachinePoliciesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllMachinePoliciesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllMachinePolicies_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMachinePolicy modifies a machine policy resource by ID

  Modifies an existing machine policy.
*/
func (a *Client) UpdateMachinePolicy(params *UpdateMachinePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMachinePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMachinePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMachinePolicy",
		Method:             "PUT",
		PathPattern:        "/api/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMachinePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMachinePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMachinePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMachinePolicySpaces modifies a machine policy resource by ID

  Modifies an existing machine policy.
*/
func (a *Client) UpdateMachinePolicySpaces(params *UpdateMachinePolicySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMachinePolicySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMachinePolicySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMachinePolicy_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/machinepolicies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMachinePolicySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMachinePolicySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMachinePolicy_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
