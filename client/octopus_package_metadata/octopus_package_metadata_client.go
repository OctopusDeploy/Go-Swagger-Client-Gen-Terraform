// Code generated by go-swagger; DO NOT EDIT.

package octopus_package_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new octopus package metadata API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for octopus package metadata API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOctopusPackageMetadata(params *CreateOctopusPackageMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOctopusPackageMetadataOK, error)

	CreateOctopusPackageMetadataSpaces(params *CreateOctopusPackageMetadataSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOctopusPackageMetadataSpacesOK, error)

	GetOctopusPackageMetadata(params *GetOctopusPackageMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusPackageMetadataOK, error)

	GetOctopusPackageMetadataSpaces(params *GetOctopusPackageMetadataSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusPackageMetadataSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOctopusPackageMetadata Creates package build information. Deprecated. Please use the 'build-information' api instead.
*/
func (a *Client) CreateOctopusPackageMetadata(params *CreateOctopusPackageMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOctopusPackageMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOctopusPackageMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOctopusPackageMetadata",
		Method:             "POST",
		PathPattern:        "/api/package-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOctopusPackageMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOctopusPackageMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOctopusPackageMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOctopusPackageMetadataSpaces Creates package build information. Deprecated. Please use the 'build-information' api instead.
*/
func (a *Client) CreateOctopusPackageMetadataSpaces(params *CreateOctopusPackageMetadataSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOctopusPackageMetadataSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOctopusPackageMetadataSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOctopusPackageMetadata_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/package-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOctopusPackageMetadataSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOctopusPackageMetadataSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOctopusPackageMetadata_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOctopusPackageMetadata Returns package build information for the specified id. Deprecated. Please use the 'build-information' api instead.
*/
func (a *Client) GetOctopusPackageMetadata(params *GetOctopusPackageMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusPackageMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOctopusPackageMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOctopusPackageMetadata",
		Method:             "GET",
		PathPattern:        "/api/package-metadata/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOctopusPackageMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOctopusPackageMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOctopusPackageMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOctopusPackageMetadataSpaces Returns package build information for the specified id. Deprecated. Please use the 'build-information' api instead.
*/
func (a *Client) GetOctopusPackageMetadataSpaces(params *GetOctopusPackageMetadataSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusPackageMetadataSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOctopusPackageMetadataSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOctopusPackageMetadata_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/package-metadata/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOctopusPackageMetadataSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOctopusPackageMetadataSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOctopusPackageMetadata_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
