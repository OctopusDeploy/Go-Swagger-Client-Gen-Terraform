// Code generated by go-swagger; DO NOT EDIT.

package artifacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new artifacts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for artifacts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateArtifact(params *CreateArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*CreateArtifactCreated, error)

	CreateArtifactSpaces(params *CreateArtifactSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateArtifactSpacesCreated, error)

	DeleteArtifact(params *DeleteArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteArtifactOK, error)

	DeleteArtifactSpaces(params *DeleteArtifactSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteArtifactSpacesOK, error)

	GetArtifactByID(params *GetArtifactByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactByIDOK, error)

	GetArtifactByIDSpaces(params *GetArtifactByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactByIDSpacesOK, error)

	GetArtifactContent(params *GetArtifactContentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetArtifactContentOK, *GetArtifactContentNoContent, error)

	GetArtifactContentSpaces(params *GetArtifactContentSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetArtifactContentSpacesOK, *GetArtifactContentSpacesNoContent, error)

	IndexArtifacts(params *IndexArtifactsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexArtifactsOK, error)

	IndexArtifactsSpaces(params *IndexArtifactsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexArtifactsSpacesOK, error)

	UpdateArtifact(params *UpdateArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateArtifactOK, error)

	UpdateArtifactContent(params *UpdateArtifactContentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*UpdateArtifactContentOK, *UpdateArtifactContentNoContent, error)

	UpdateArtifactContentSpaces(params *UpdateArtifactContentSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*UpdateArtifactContentSpacesOK, *UpdateArtifactContentSpacesNoContent, error)

	UpdateArtifactSpaces(params *UpdateArtifactSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateArtifactSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateArtifact creates a artifact resource

  Creates a new artifact.
*/
func (a *Client) CreateArtifact(params *CreateArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*CreateArtifactCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArtifactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createArtifact",
		Method:             "POST",
		PathPattern:        "/api/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateArtifactCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateArtifactSpaces creates a artifact resource

  Creates a new artifact.
*/
func (a *Client) CreateArtifactSpaces(params *CreateArtifactSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateArtifactSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArtifactSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createArtifact_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateArtifactSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateArtifactSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createArtifact_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteArtifact deletes a artifact resource by ID

  Deletes an existing artifact.
*/
func (a *Client) DeleteArtifact(params *DeleteArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArtifact",
		Method:             "DELETE",
		PathPattern:        "/api/artifacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteArtifactSpaces deletes a artifact resource by ID

  Deletes an existing artifact.
*/
func (a *Client) DeleteArtifactSpaces(params *DeleteArtifactSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteArtifactSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArtifact_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/artifacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteArtifactSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteArtifactSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteArtifact_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactByID gets a artifact resource by ID

  Gets a single artifact by ID.
*/
func (a *Client) GetArtifactByID(params *GetArtifactByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactById",
		Method:             "GET",
		PathPattern:        "/api/artifacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactByIDSpaces gets a artifact resource by ID

  Gets a single artifact by ID.
*/
func (a *Client) GetArtifactByIDSpaces(params *GetArtifactByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/artifacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactContent Gets the content associated with an artifact.
*/
func (a *Client) GetArtifactContent(params *GetArtifactContentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetArtifactContentOK, *GetArtifactContentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactContent",
		Method:             "GET",
		PathPattern:        "/api/artifacts/{id}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactContentReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetArtifactContentOK:
		return value, nil, nil
	case *GetArtifactContentNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for artifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactContentSpaces Gets the content associated with an artifact.
*/
func (a *Client) GetArtifactContentSpaces(params *GetArtifactContentSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetArtifactContentSpacesOK, *GetArtifactContentSpacesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactContentSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactContent_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/artifacts/{id}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactContentSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetArtifactContentSpacesOK:
		return value, nil, nil
	case *GetArtifactContentSpacesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for artifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexArtifacts gets a list of artifact resources

  Lists all of the artifacts in the supplied Octopus Deploy Space, from all releases. The results will be sorted by date from most recently to least recently created.
*/
func (a *Client) IndexArtifacts(params *IndexArtifactsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexArtifactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexArtifactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexArtifacts",
		Method:             "GET",
		PathPattern:        "/api/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexArtifactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexArtifactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexArtifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexArtifactsSpaces gets a list of artifact resources

  Lists all of the artifacts in the supplied Octopus Deploy Space, from all releases. The results will be sorted by date from most recently to least recently created.
*/
func (a *Client) IndexArtifactsSpaces(params *IndexArtifactsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexArtifactsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexArtifactsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexArtifacts_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexArtifactsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexArtifactsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexArtifacts_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateArtifact modifies a artifact resource by ID

  Modifies an existing artifact.
*/
func (a *Client) UpdateArtifact(params *UpdateArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateArtifactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateArtifact",
		Method:             "PUT",
		PathPattern:        "/api/artifacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateArtifactContent Sets the content associated with an artifact.
*/
func (a *Client) UpdateArtifactContent(params *UpdateArtifactContentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*UpdateArtifactContentOK, *UpdateArtifactContentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateArtifactContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateArtifactContent",
		Method:             "PUT",
		PathPattern:        "/api/artifacts/{id}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateArtifactContentReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateArtifactContentOK:
		return value, nil, nil
	case *UpdateArtifactContentNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for artifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateArtifactContentSpaces Sets the content associated with an artifact.
*/
func (a *Client) UpdateArtifactContentSpaces(params *UpdateArtifactContentSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*UpdateArtifactContentSpacesOK, *UpdateArtifactContentSpacesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateArtifactContentSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateArtifactContent_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/artifacts/{id}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateArtifactContentSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateArtifactContentSpacesOK:
		return value, nil, nil
	case *UpdateArtifactContentSpacesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for artifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateArtifactSpaces modifies a artifact resource by ID

  Modifies an existing artifact.
*/
func (a *Client) UpdateArtifactSpaces(params *UpdateArtifactSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateArtifactSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateArtifactSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateArtifact_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/artifacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateArtifactSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateArtifactSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateArtifact_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
