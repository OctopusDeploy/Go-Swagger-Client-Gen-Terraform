// Code generated by go-swagger; DO NOT EDIT.

package workers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateWorker(params *CreateWorkerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWorkerCreated, error)

	CreateWorkerSpaces(params *CreateWorkerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWorkerSpacesCreated, error)

	DeleteWorker(params *DeleteWorkerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWorkerOK, error)

	DeleteWorkerSpaces(params *DeleteWorkerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWorkerSpacesOK, error)

	GetDiscoverWorker(params *GetDiscoverWorkerParams, authInfo runtime.ClientAuthInfoWriter) (*GetDiscoverWorkerOK, error)

	GetDiscoverWorkerSpaces(params *GetDiscoverWorkerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDiscoverWorkerSpacesOK, error)

	GetWorkerByID(params *GetWorkerByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerByIDOK, error)

	GetWorkerByIDSpaces(params *GetWorkerByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerByIDSpacesOK, error)

	GetWorkerConnectionStatus(params *GetWorkerConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerConnectionStatusOK, error)

	GetWorkerConnectionStatusSpaces(params *GetWorkerConnectionStatusSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerConnectionStatusSpacesOK, error)

	GetWorkerOperatingSystemNamesListAll(params *GetWorkerOperatingSystemNamesListAllParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerOperatingSystemNamesListAllOK, error)

	GetWorkerOperatingSystemNamesListAllSpaces(params *GetWorkerOperatingSystemNamesListAllSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerOperatingSystemNamesListAllSpacesOK, error)

	GetWorkerOperatingSystemShellNameListAll(params *GetWorkerOperatingSystemShellNameListAllParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerOperatingSystemShellNameListAllOK, error)

	GetWorkerOperatingSystemShellNameListAllSpaces(params *GetWorkerOperatingSystemShellNameListAllSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerOperatingSystemShellNameListAllSpacesOK, error)

	IndexWorkers(params *IndexWorkersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexWorkersOK, error)

	IndexWorkersSpaces(params *IndexWorkersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexWorkersSpacesOK, error)

	ListAllWorkers(params *ListAllWorkersParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllWorkersOK, error)

	ListAllWorkersSpaces(params *ListAllWorkersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllWorkersSpacesOK, error)

	UpdateWorker(params *UpdateWorkerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWorkerOK, error)

	UpdateWorkerSpaces(params *UpdateWorkerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWorkerSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateWorker creates a worker resource

  Creates a new worker.
*/
func (a *Client) CreateWorker(params *CreateWorkerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWorkerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorker",
		Method:             "POST",
		PathPattern:        "/api/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWorkerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWorker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateWorkerSpaces creates a worker resource

  Creates a new worker.
*/
func (a *Client) CreateWorkerSpaces(params *CreateWorkerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWorkerSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkerSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorker_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkerSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWorkerSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWorker_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteWorker deletes a worker resource by ID

  Deletes an existing worker machine.
*/
func (a *Client) DeleteWorker(params *DeleteWorkerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorker",
		Method:             "DELETE",
		PathPattern:        "/api/workers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWorker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteWorkerSpaces deletes a worker resource by ID

  Deletes an existing worker machine.
*/
func (a *Client) DeleteWorkerSpaces(params *DeleteWorkerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWorkerSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkerSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorker_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/workers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkerSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkerSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWorker_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiscoverWorker Interrogate a machine for communication details so that it may be added to the installation.
*/
func (a *Client) GetDiscoverWorker(params *GetDiscoverWorkerParams, authInfo runtime.ClientAuthInfoWriter) (*GetDiscoverWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoverWorkerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiscoverWorker",
		Method:             "GET",
		PathPattern:        "/api/workers/discover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoverWorkerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiscoverWorkerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDiscoverWorker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiscoverWorkerSpaces Interrogate a machine for communication details so that it may be added to the installation.
*/
func (a *Client) GetDiscoverWorkerSpaces(params *GetDiscoverWorkerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDiscoverWorkerSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoverWorkerSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiscoverWorker_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/workers/discover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoverWorkerSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiscoverWorkerSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDiscoverWorker_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkerByID gets a worker resource by ID

  Gets a single worker machine by ID.
*/
func (a *Client) GetWorkerByID(params *GetWorkerByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkerById",
		Method:             "GET",
		PathPattern:        "/api/workers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkerByIDSpaces gets a worker resource by ID

  Gets a single worker machine by ID.
*/
func (a *Client) GetWorkerByIDSpaces(params *GetWorkerByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkerById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/workers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkerByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkerConnectionStatus Get the status of the network connection between the Octopus server and a worker.
*/
func (a *Client) GetWorkerConnectionStatus(params *GetWorkerConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerConnectionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerConnectionStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkerConnectionStatus",
		Method:             "GET",
		PathPattern:        "/api/workers/{id}/connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkerConnectionStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerConnectionStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerConnectionStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkerConnectionStatusSpaces Get the status of the network connection between the Octopus server and a worker.
*/
func (a *Client) GetWorkerConnectionStatusSpaces(params *GetWorkerConnectionStatusSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerConnectionStatusSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerConnectionStatusSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkerConnectionStatus_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/workers/{id}/connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkerConnectionStatusSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerConnectionStatusSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerConnectionStatus_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkerOperatingSystemNamesListAll Gets all operating system names for workers. The result will be a string array.
*/
func (a *Client) GetWorkerOperatingSystemNamesListAll(params *GetWorkerOperatingSystemNamesListAllParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerOperatingSystemNamesListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerOperatingSystemNamesListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkerOperatingSystemNamesListAll",
		Method:             "GET",
		PathPattern:        "/api/workers/operatingsystem/names/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkerOperatingSystemNamesListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerOperatingSystemNamesListAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerOperatingSystemNamesListAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkerOperatingSystemNamesListAllSpaces Gets all operating system names for workers. The result will be a string array.
*/
func (a *Client) GetWorkerOperatingSystemNamesListAllSpaces(params *GetWorkerOperatingSystemNamesListAllSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerOperatingSystemNamesListAllSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerOperatingSystemNamesListAllSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkerOperatingSystemNamesListAll_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/workers/operatingsystem/names/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkerOperatingSystemNamesListAllSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerOperatingSystemNamesListAllSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerOperatingSystemNamesListAll_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkerOperatingSystemShellNameListAll Gets all operating system shell names for workers. The result will be a string array.
*/
func (a *Client) GetWorkerOperatingSystemShellNameListAll(params *GetWorkerOperatingSystemShellNameListAllParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerOperatingSystemShellNameListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerOperatingSystemShellNameListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkerOperatingSystemShellNameListAll",
		Method:             "GET",
		PathPattern:        "/api/workers/operatingsystem/shells/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkerOperatingSystemShellNameListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerOperatingSystemShellNameListAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerOperatingSystemShellNameListAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkerOperatingSystemShellNameListAllSpaces Gets all operating system shell names for workers. The result will be a string array.
*/
func (a *Client) GetWorkerOperatingSystemShellNameListAllSpaces(params *GetWorkerOperatingSystemShellNameListAllSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkerOperatingSystemShellNameListAllSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerOperatingSystemShellNameListAllSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkerOperatingSystemShellNameListAll_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/workers/operatingsystem/shells/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkerOperatingSystemShellNameListAllSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerOperatingSystemShellNameListAllSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerOperatingSystemShellNameListAll_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexWorkers gets a list of worker resources

  Lists all of the registered worker machines in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexWorkers(params *IndexWorkersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexWorkersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexWorkersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexWorkers",
		Method:             "GET",
		PathPattern:        "/api/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexWorkersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexWorkersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexWorkers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexWorkersSpaces gets a list of worker resources

  Lists all of the registered worker machines in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexWorkersSpaces(params *IndexWorkersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexWorkersSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexWorkersSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexWorkers_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexWorkersSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexWorkersSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexWorkers_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllWorkers gets a list of worker resources

  Lists all of the workers in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllWorkers(params *ListAllWorkersParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllWorkersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllWorkersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllWorkers",
		Method:             "GET",
		PathPattern:        "/api/workers/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllWorkersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllWorkersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllWorkers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllWorkersSpaces gets a list of worker resources

  Lists all of the workers in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllWorkersSpaces(params *ListAllWorkersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllWorkersSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllWorkersSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllWorkers_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/workers/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllWorkersSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllWorkersSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllWorkers_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateWorker modifies a worker resource by ID

  Modifies an existing worker machine.
*/
func (a *Client) UpdateWorker(params *UpdateWorkerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWorker",
		Method:             "PUT",
		PathPattern:        "/api/workers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWorkerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWorkerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateWorker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateWorkerSpaces modifies a worker resource by ID

  Modifies an existing worker machine.
*/
func (a *Client) UpdateWorkerSpaces(params *UpdateWorkerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWorkerSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkerSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWorker_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/workers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWorkerSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWorkerSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateWorker_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
