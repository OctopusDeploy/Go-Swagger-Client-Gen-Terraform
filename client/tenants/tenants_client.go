// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tenants API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenants API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantCreated, error)

	CreateTenantLogo(params *CreateTenantLogoParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantLogoOK, error)

	CreateTenantLogoSpaces(params *CreateTenantLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantLogoSpacesOK, error)

	CreateTenantVariables(params *CreateTenantVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantVariablesOK, error)

	CreateTenantVariablesSpaces(params *CreateTenantVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantVariablesSpacesOK, error)

	CreateTenantSpaces(params *CreateTenantSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantSpacesCreated, error)

	DeleteTenant(params *DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTenantOK, error)

	DeleteTenantSpaces(params *DeleteTenantSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTenantSpacesOK, error)

	GetTenantByID(params *GetTenantByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantByIDOK, error)

	GetTenantByIDSpaces(params *GetTenantByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantByIDSpacesOK, error)

	GetTenantLogo(params *GetTenantLogoParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetTenantLogoOK, error)

	GetTenantLogoSpaces(params *GetTenantLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetTenantLogoSpacesOK, error)

	GetTenantTagTest(params *GetTenantTagTestParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantTagTestOK, error)

	GetTenantTagTestSpaces(params *GetTenantTagTestSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantTagTestSpacesOK, error)

	GetTenantVariableSetTest(params *GetTenantVariableSetTestParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariableSetTestOK, error)

	GetTenantVariableSetTestSpaces(params *GetTenantVariableSetTestSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariableSetTestSpacesOK, error)

	GetTenantVariables(params *GetTenantVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariablesOK, error)

	GetTenantVariablesMissing(params *GetTenantVariablesMissingParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariablesMissingOK, error)

	GetTenantVariablesMissingSpaces(params *GetTenantVariablesMissingSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariablesMissingSpacesOK, error)

	GetTenantVariablesSpaces(params *GetTenantVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariablesSpacesOK, error)

	GetTenantsConfiguration(params *GetTenantsConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsConfigurationOK, error)

	GetTenantsConfigurationSpaces(params *GetTenantsConfigurationSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsConfigurationSpacesOK, error)

	IndexTenants(params *IndexTenantsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTenantsOK, error)

	IndexTenantsSpaces(params *IndexTenantsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTenantsSpacesOK, error)

	ListAllTenants(params *ListAllTenantsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllTenantsOK, error)

	ListAllTenantsSpaces(params *ListAllTenantsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllTenantsSpacesOK, error)

	UpdateTenant(params *UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantOK, error)

	UpdateTenantLogo(params *UpdateTenantLogoParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantLogoOK, error)

	UpdateTenantLogoSpaces(params *UpdateTenantLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantLogoSpacesOK, error)

	UpdateTenantVariables(params *UpdateTenantVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantVariablesOK, error)

	UpdateTenantVariablesSpaces(params *UpdateTenantVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantVariablesSpacesOK, error)

	UpdateTenantSpaces(params *UpdateTenantSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTenant creates a tenant resource

  Creates a new tenant.
*/
func (a *Client) CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenant",
		Method:             "POST",
		PathPattern:        "/api/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTenantLogo Updates the logo associated with the tenant.
*/
func (a *Client) CreateTenantLogo(params *CreateTenantLogoParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenantLogo",
		Method:             "POST",
		PathPattern:        "/api/tenants/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTenantLogoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenantLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTenantLogoSpaces Updates the logo associated with the tenant.
*/
func (a *Client) CreateTenantLogoSpaces(params *CreateTenantLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenantLogo_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTenantLogoSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenantLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTenantVariables Updates the variables associated with the tenant.
*/
func (a *Client) CreateTenantVariables(params *CreateTenantVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenantVariables",
		Method:             "POST",
		PathPattern:        "/api/tenants/{id}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTenantVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenantVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTenantVariablesSpaces Updates the variables associated with the tenant.
*/
func (a *Client) CreateTenantVariablesSpaces(params *CreateTenantVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantVariablesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantVariablesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenantVariables_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTenantVariablesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantVariablesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenantVariables_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTenantSpaces creates a tenant resource

  Creates a new tenant.
*/
func (a *Client) CreateTenantSpaces(params *CreateTenantSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenant_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTenantSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenant_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTenant deletes a tenant resource by ID

  Deletes an existing tenant.
*/
func (a *Client) DeleteTenant(params *DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTenant",
		Method:             "DELETE",
		PathPattern:        "/api/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTenantSpaces deletes a tenant resource by ID

  Deletes an existing tenant.
*/
func (a *Client) DeleteTenantSpaces(params *DeleteTenantSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTenantSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTenant_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTenantSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTenantSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTenant_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantByID gets a tenant resource by ID

  Gets a single tenant by ID.
*/
func (a *Client) GetTenantByID(params *GetTenantByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantById",
		Method:             "GET",
		PathPattern:        "/api/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantByIDSpaces gets a tenant resource by ID

  Gets a single tenant by ID.
*/
func (a *Client) GetTenantByIDSpaces(params *GetTenantByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantLogo Gets the logo associated with the tenant.
*/
func (a *Client) GetTenantLogo(params *GetTenantLogoParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetTenantLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantLogo",
		Method:             "GET",
		PathPattern:        "/api/tenants/{id}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantLogoReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantLogoSpaces Gets the logo associated with the tenant.
*/
func (a *Client) GetTenantLogoSpaces(params *GetTenantLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetTenantLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantLogo_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantLogoSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantTagTest Checks tenants for matching tags rule
*/
func (a *Client) GetTenantTagTest(params *GetTenantTagTestParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantTagTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantTagTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantTagTest",
		Method:             "GET",
		PathPattern:        "/api/tenants/tag-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantTagTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantTagTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantTagTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantTagTestSpaces Checks tenants for matching tags rule
*/
func (a *Client) GetTenantTagTestSpaces(params *GetTenantTagTestSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantTagTestSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantTagTestSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantTagTest_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants/tag-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantTagTestSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantTagTestSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantTagTest_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantVariableSetTest Checks tenants for matching variable set rule
*/
func (a *Client) GetTenantVariableSetTest(params *GetTenantVariableSetTestParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariableSetTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantVariableSetTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantVariableSetTest",
		Method:             "GET",
		PathPattern:        "/api/tenants/variableset-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantVariableSetTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantVariableSetTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantVariableSetTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantVariableSetTestSpaces Checks tenants for matching variable set rule
*/
func (a *Client) GetTenantVariableSetTestSpaces(params *GetTenantVariableSetTestSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariableSetTestSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantVariableSetTestSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantVariableSetTest_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants/variableset-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantVariableSetTestSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantVariableSetTestSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantVariableSetTest_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantVariables Gets all the available variables associated with the tenant.
*/
func (a *Client) GetTenantVariables(params *GetTenantVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantVariables",
		Method:             "GET",
		PathPattern:        "/api/tenants/{id}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantVariablesMissing Returns list of tenants who are missing required variables
*/
func (a *Client) GetTenantVariablesMissing(params *GetTenantVariablesMissingParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariablesMissingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantVariablesMissingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantVariablesMissing",
		Method:             "GET",
		PathPattern:        "/api/tenants/variables-missing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantVariablesMissingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantVariablesMissingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantVariablesMissing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantVariablesMissingSpaces Returns list of tenants who are missing required variables
*/
func (a *Client) GetTenantVariablesMissingSpaces(params *GetTenantVariablesMissingSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariablesMissingSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantVariablesMissingSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantVariablesMissing_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants/variables-missing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantVariablesMissingSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantVariablesMissingSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantVariablesMissing_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantVariablesSpaces Gets all the available variables associated with the tenant.
*/
func (a *Client) GetTenantVariablesSpaces(params *GetTenantVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantVariablesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantVariablesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantVariables_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantVariablesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantVariablesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantVariables_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantsConfiguration Reports back the status of multi-tenancy
*/
func (a *Client) GetTenantsConfiguration(params *GetTenantsConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantsConfiguration",
		Method:             "GET",
		PathPattern:        "/api/tenants/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantsConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantsConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantsConfigurationSpaces Reports back the status of multi-tenancy
*/
func (a *Client) GetTenantsConfigurationSpaces(params *GetTenantsConfigurationSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsConfigurationSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsConfigurationSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantsConfiguration_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantsConfigurationSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsConfigurationSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantsConfiguration_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexTenants gets a list of tenant resources

  Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name, and returned 30 at a time.
*/
func (a *Client) IndexTenants(params *IndexTenantsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexTenantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexTenants",
		Method:             "GET",
		PathPattern:        "/api/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexTenantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexTenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexTenantsSpaces gets a list of tenant resources

  Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name, and returned 30 at a time.
*/
func (a *Client) IndexTenantsSpaces(params *IndexTenantsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTenantsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexTenantsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexTenants_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexTenantsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexTenantsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexTenants_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllTenants gets a list of tenant resources

  Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllTenants(params *ListAllTenantsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllTenantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllTenants",
		Method:             "GET",
		PathPattern:        "/api/tenants/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllTenantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllTenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllTenantsSpaces gets a list of tenant resources

  Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllTenantsSpaces(params *ListAllTenantsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllTenantsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllTenantsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllTenants_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tenants/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllTenantsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllTenantsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllTenants_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenant modifies a tenant resource by ID

  Modifies an existing tenant.
*/
func (a *Client) UpdateTenant(params *UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenant",
		Method:             "PUT",
		PathPattern:        "/api/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenantLogo Updates the logo associated with the tenant.
*/
func (a *Client) UpdateTenantLogo(params *UpdateTenantLogoParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenantLogo",
		Method:             "PUT",
		PathPattern:        "/api/tenants/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTenantLogoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTenantLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenantLogoSpaces Updates the logo associated with the tenant.
*/
func (a *Client) UpdateTenantLogoSpaces(params *UpdateTenantLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenantLogo_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTenantLogoSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTenantLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenantVariables Updates the variables associated with the tenant.
*/
func (a *Client) UpdateTenantVariables(params *UpdateTenantVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenantVariables",
		Method:             "PUT",
		PathPattern:        "/api/tenants/{id}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTenantVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTenantVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenantVariablesSpaces Updates the variables associated with the tenant.
*/
func (a *Client) UpdateTenantVariablesSpaces(params *UpdateTenantVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantVariablesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantVariablesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenantVariables_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTenantVariablesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantVariablesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTenantVariables_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenantSpaces modifies a tenant resource by ID

  Modifies an existing tenant.
*/
func (a *Client) UpdateTenantSpaces(params *UpdateTenantSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenant_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/tenants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTenantSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTenant_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
