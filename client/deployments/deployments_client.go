// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDeploymentCreate(params *CreateDeploymentCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentCreateCreated, error)

	CreateDeploymentCreateSpaces(params *CreateDeploymentCreateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentCreateSpacesCreated, error)

	DeleteDeployment(params *DeleteDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeploymentOK, error)

	DeleteDeploymentSpaces(params *DeleteDeploymentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeploymentSpacesOK, error)

	GetDeploymentByID(params *GetDeploymentByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentByIDOK, error)

	GetDeploymentByIDSpaces(params *GetDeploymentByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentByIDSpacesOK, error)

	IndexDeployments(params *IndexDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexDeploymentsOK, error)

	IndexDeploymentsSpaces(params *IndexDeploymentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexDeploymentsSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDeploymentCreate Creates a new deployment.
*/
func (a *Client) CreateDeploymentCreate(params *CreateDeploymentCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeploymentCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDeploymentCreate",
		Method:             "POST",
		PathPattern:        "/api/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeploymentCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeploymentCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDeploymentCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDeploymentCreateSpaces Creates a new deployment.
*/
func (a *Client) CreateDeploymentCreateSpaces(params *CreateDeploymentCreateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentCreateSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeploymentCreateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDeploymentCreate_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeploymentCreateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeploymentCreateSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDeploymentCreate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeployment deletes a deployment resource by ID

  Deletes a deployment.
*/
func (a *Client) DeleteDeployment(params *DeleteDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeployment",
		Method:             "DELETE",
		PathPattern:        "/api/deployments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeploymentSpaces deletes a deployment resource by ID

  Deletes a deployment.
*/
func (a *Client) DeleteDeploymentSpaces(params *DeleteDeploymentSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeploymentSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeploymentSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeployment_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/deployments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeploymentSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeploymentSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDeployment_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentByID gets a deployment resource by ID

  Gets a deployment by ID.
*/
func (a *Client) GetDeploymentByID(params *GetDeploymentByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentById",
		Method:             "GET",
		PathPattern:        "/api/deployments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentByIDSpaces gets a deployment resource by ID

  Gets a deployment by ID.
*/
func (a *Client) GetDeploymentByIDSpaces(params *GetDeploymentByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/deployments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexDeployments gets a list of deployment resources

  Lists all of the deployments in the supplied Octopus Deploy Space, from projects, releases and environments accessible by the current user. The results will be sorted from most recent to least recent deployment.
*/
func (a *Client) IndexDeployments(params *IndexDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexDeployments",
		Method:             "GET",
		PathPattern:        "/api/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexDeploymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexDeployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexDeploymentsSpaces gets a list of deployment resources

  Lists all of the deployments in the supplied Octopus Deploy Space, from projects, releases and environments accessible by the current user. The results will be sorted from most recent to least recent deployment.
*/
func (a *Client) IndexDeploymentsSpaces(params *IndexDeploymentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexDeploymentsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexDeploymentsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexDeployments_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexDeploymentsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexDeploymentsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexDeployments_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
