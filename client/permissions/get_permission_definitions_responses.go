// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"models"
)

// GetPermissionDefinitionsReader is a Reader for the GetPermissionDefinitions structure.
type GetPermissionDefinitionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPermissionDefinitionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPermissionDefinitionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPermissionDefinitionsOK creates a GetPermissionDefinitionsOK with default headers values
func NewGetPermissionDefinitionsOK() *GetPermissionDefinitionsOK {
	return &GetPermissionDefinitionsOK{}
}

/*GetPermissionDefinitionsOK handles this case with default header values.

Dictionary_of_Permission,PermissionDescription resource returned
*/
type GetPermissionDefinitionsOK struct {
	Payload *GetPermissionDefinitionsOKBody
}

func (o *GetPermissionDefinitionsOK) Error() string {
	return fmt.Sprintf("[GET /api/permissions/all][%d] getPermissionDefinitionsOK  %+v", 200, o.Payload)
}

func (o *GetPermissionDefinitionsOK) GetPayload() *GetPermissionDefinitionsOKBody {
	return o.Payload
}

func (o *GetPermissionDefinitionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPermissionDefinitionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPermissionDefinitionsOKBody get permission definitions o k body
swagger:model GetPermissionDefinitionsOKBody
*/
type GetPermissionDefinitionsOKBody struct {

	// account create
	AccountCreate *models.PermissionDescription `json:"AccountCreate,omitempty"`

	// account delete
	AccountDelete *models.PermissionDescription `json:"AccountDelete,omitempty"`

	// account edit
	AccountEdit *models.PermissionDescription `json:"AccountEdit,omitempty"`

	// account view
	AccountView *models.PermissionDescription `json:"AccountView,omitempty"`

	// action template create
	ActionTemplateCreate *models.PermissionDescription `json:"ActionTemplateCreate,omitempty"`

	// action template delete
	ActionTemplateDelete *models.PermissionDescription `json:"ActionTemplateDelete,omitempty"`

	// action template edit
	ActionTemplateEdit *models.PermissionDescription `json:"ActionTemplateEdit,omitempty"`

	// action template view
	ActionTemplateView *models.PermissionDescription `json:"ActionTemplateView,omitempty"`

	// administer system
	AdministerSystem *models.PermissionDescription `json:"AdministerSystem,omitempty"`

	// artifact create
	ArtifactCreate *models.PermissionDescription `json:"ArtifactCreate,omitempty"`

	// artifact delete
	ArtifactDelete *models.PermissionDescription `json:"ArtifactDelete,omitempty"`

	// artifact edit
	ArtifactEdit *models.PermissionDescription `json:"ArtifactEdit,omitempty"`

	// artifact view
	ArtifactView *models.PermissionDescription `json:"ArtifactView,omitempty"`

	// build information administer
	BuildInformationAdminister *models.PermissionDescription `json:"BuildInformationAdminister,omitempty"`

	// build information push
	BuildInformationPush *models.PermissionDescription `json:"BuildInformationPush,omitempty"`

	// built in feed administer
	BuiltInFeedAdminister *models.PermissionDescription `json:"BuiltInFeedAdminister,omitempty"`

	// built in feed download
	BuiltInFeedDownload *models.PermissionDescription `json:"BuiltInFeedDownload,omitempty"`

	// built in feed push
	BuiltInFeedPush *models.PermissionDescription `json:"BuiltInFeedPush,omitempty"`

	// certificate create
	CertificateCreate *models.PermissionDescription `json:"CertificateCreate,omitempty"`

	// certificate delete
	CertificateDelete *models.PermissionDescription `json:"CertificateDelete,omitempty"`

	// certificate edit
	CertificateEdit *models.PermissionDescription `json:"CertificateEdit,omitempty"`

	// certificate export private key
	CertificateExportPrivateKey *models.PermissionDescription `json:"CertificateExportPrivateKey,omitempty"`

	// certificate view
	CertificateView *models.PermissionDescription `json:"CertificateView,omitempty"`

	// configure server
	ConfigureServer *models.PermissionDescription `json:"ConfigureServer,omitempty"`

	// defect report
	DefectReport *models.PermissionDescription `json:"DefectReport,omitempty"`

	// defect resolve
	DefectResolve *models.PermissionDescription `json:"DefectResolve,omitempty"`

	// deployment create
	DeploymentCreate *models.PermissionDescription `json:"DeploymentCreate,omitempty"`

	// deployment delete
	DeploymentDelete *models.PermissionDescription `json:"DeploymentDelete,omitempty"`

	// deployment view
	DeploymentView *models.PermissionDescription `json:"DeploymentView,omitempty"`

	// environment create
	EnvironmentCreate *models.PermissionDescription `json:"EnvironmentCreate,omitempty"`

	// environment delete
	EnvironmentDelete *models.PermissionDescription `json:"EnvironmentDelete,omitempty"`

	// environment edit
	EnvironmentEdit *models.PermissionDescription `json:"EnvironmentEdit,omitempty"`

	// environment view
	EnvironmentView *models.PermissionDescription `json:"EnvironmentView,omitempty"`

	// event view
	EventView *models.PermissionDescription `json:"EventView,omitempty"`

	// feed edit
	FeedEdit *models.PermissionDescription `json:"FeedEdit,omitempty"`

	// feed view
	FeedView *models.PermissionDescription `json:"FeedView,omitempty"`

	// interruption submit
	InterruptionSubmit *models.PermissionDescription `json:"InterruptionSubmit,omitempty"`

	// interruption view
	InterruptionView *models.PermissionDescription `json:"InterruptionView,omitempty"`

	// interruption view submit responsible
	InterruptionViewSubmitResponsible *models.PermissionDescription `json:"InterruptionViewSubmitResponsible,omitempty"`

	// library variable set create
	LibraryVariableSetCreate *models.PermissionDescription `json:"LibraryVariableSetCreate,omitempty"`

	// library variable set delete
	LibraryVariableSetDelete *models.PermissionDescription `json:"LibraryVariableSetDelete,omitempty"`

	// library variable set edit
	LibraryVariableSetEdit *models.PermissionDescription `json:"LibraryVariableSetEdit,omitempty"`

	// library variable set view
	LibraryVariableSetView *models.PermissionDescription `json:"LibraryVariableSetView,omitempty"`

	// lifecycle create
	LifecycleCreate *models.PermissionDescription `json:"LifecycleCreate,omitempty"`

	// lifecycle delete
	LifecycleDelete *models.PermissionDescription `json:"LifecycleDelete,omitempty"`

	// lifecycle edit
	LifecycleEdit *models.PermissionDescription `json:"LifecycleEdit,omitempty"`

	// lifecycle view
	LifecycleView *models.PermissionDescription `json:"LifecycleView,omitempty"`

	// machine create
	MachineCreate *models.PermissionDescription `json:"MachineCreate,omitempty"`

	// machine delete
	MachineDelete *models.PermissionDescription `json:"MachineDelete,omitempty"`

	// machine edit
	MachineEdit *models.PermissionDescription `json:"MachineEdit,omitempty"`

	// machine policy create
	MachinePolicyCreate *models.PermissionDescription `json:"MachinePolicyCreate,omitempty"`

	// machine policy delete
	MachinePolicyDelete *models.PermissionDescription `json:"MachinePolicyDelete,omitempty"`

	// machine policy edit
	MachinePolicyEdit *models.PermissionDescription `json:"MachinePolicyEdit,omitempty"`

	// machine policy view
	MachinePolicyView *models.PermissionDescription `json:"MachinePolicyView,omitempty"`

	// machine view
	MachineView *models.PermissionDescription `json:"MachineView,omitempty"`

	// process edit
	ProcessEdit *models.PermissionDescription `json:"ProcessEdit,omitempty"`

	// process view
	ProcessView *models.PermissionDescription `json:"ProcessView,omitempty"`

	// project create
	ProjectCreate *models.PermissionDescription `json:"ProjectCreate,omitempty"`

	// project delete
	ProjectDelete *models.PermissionDescription `json:"ProjectDelete,omitempty"`

	// project edit
	ProjectEdit *models.PermissionDescription `json:"ProjectEdit,omitempty"`

	// project group create
	ProjectGroupCreate *models.PermissionDescription `json:"ProjectGroupCreate,omitempty"`

	// project group delete
	ProjectGroupDelete *models.PermissionDescription `json:"ProjectGroupDelete,omitempty"`

	// project group edit
	ProjectGroupEdit *models.PermissionDescription `json:"ProjectGroupEdit,omitempty"`

	// project group view
	ProjectGroupView *models.PermissionDescription `json:"ProjectGroupView,omitempty"`

	// project view
	ProjectView *models.PermissionDescription `json:"ProjectView,omitempty"`

	// proxy create
	ProxyCreate *models.PermissionDescription `json:"ProxyCreate,omitempty"`

	// proxy delete
	ProxyDelete *models.PermissionDescription `json:"ProxyDelete,omitempty"`

	// proxy edit
	ProxyEdit *models.PermissionDescription `json:"ProxyEdit,omitempty"`

	// proxy view
	ProxyView *models.PermissionDescription `json:"ProxyView,omitempty"`

	// release create
	ReleaseCreate *models.PermissionDescription `json:"ReleaseCreate,omitempty"`

	// release delete
	ReleaseDelete *models.PermissionDescription `json:"ReleaseDelete,omitempty"`

	// release edit
	ReleaseEdit *models.PermissionDescription `json:"ReleaseEdit,omitempty"`

	// release view
	ReleaseView *models.PermissionDescription `json:"ReleaseView,omitempty"`

	// runbook edit
	RunbookEdit *models.PermissionDescription `json:"RunbookEdit,omitempty"`

	// runbook run create
	RunbookRunCreate *models.PermissionDescription `json:"RunbookRunCreate,omitempty"`

	// runbook run delete
	RunbookRunDelete *models.PermissionDescription `json:"RunbookRunDelete,omitempty"`

	// runbook run view
	RunbookRunView *models.PermissionDescription `json:"RunbookRunView,omitempty"`

	// runbook view
	RunbookView *models.PermissionDescription `json:"RunbookView,omitempty"`

	// space create
	SpaceCreate *models.PermissionDescription `json:"SpaceCreate,omitempty"`

	// space delete
	SpaceDelete *models.PermissionDescription `json:"SpaceDelete,omitempty"`

	// space edit
	SpaceEdit *models.PermissionDescription `json:"SpaceEdit,omitempty"`

	// space view
	SpaceView *models.PermissionDescription `json:"SpaceView,omitempty"`

	// subscription create
	SubscriptionCreate *models.PermissionDescription `json:"SubscriptionCreate,omitempty"`

	// subscription delete
	SubscriptionDelete *models.PermissionDescription `json:"SubscriptionDelete,omitempty"`

	// subscription edit
	SubscriptionEdit *models.PermissionDescription `json:"SubscriptionEdit,omitempty"`

	// subscription view
	SubscriptionView *models.PermissionDescription `json:"SubscriptionView,omitempty"`

	// tag set create
	TagSetCreate *models.PermissionDescription `json:"TagSetCreate,omitempty"`

	// tag set delete
	TagSetDelete *models.PermissionDescription `json:"TagSetDelete,omitempty"`

	// tag set edit
	TagSetEdit *models.PermissionDescription `json:"TagSetEdit,omitempty"`

	// task cancel
	TaskCancel *models.PermissionDescription `json:"TaskCancel,omitempty"`

	// task create
	TaskCreate *models.PermissionDescription `json:"TaskCreate,omitempty"`

	// task edit
	TaskEdit *models.PermissionDescription `json:"TaskEdit,omitempty"`

	// task view
	TaskView *models.PermissionDescription `json:"TaskView,omitempty"`

	// team create
	TeamCreate *models.PermissionDescription `json:"TeamCreate,omitempty"`

	// team delete
	TeamDelete *models.PermissionDescription `json:"TeamDelete,omitempty"`

	// team edit
	TeamEdit *models.PermissionDescription `json:"TeamEdit,omitempty"`

	// team view
	TeamView *models.PermissionDescription `json:"TeamView,omitempty"`

	// tenant create
	TenantCreate *models.PermissionDescription `json:"TenantCreate,omitempty"`

	// tenant delete
	TenantDelete *models.PermissionDescription `json:"TenantDelete,omitempty"`

	// tenant edit
	TenantEdit *models.PermissionDescription `json:"TenantEdit,omitempty"`

	// tenant view
	TenantView *models.PermissionDescription `json:"TenantView,omitempty"`

	// trigger create
	TriggerCreate *models.PermissionDescription `json:"TriggerCreate,omitempty"`

	// trigger delete
	TriggerDelete *models.PermissionDescription `json:"TriggerDelete,omitempty"`

	// trigger edit
	TriggerEdit *models.PermissionDescription `json:"TriggerEdit,omitempty"`

	// trigger view
	TriggerView *models.PermissionDescription `json:"TriggerView,omitempty"`

	// user edit
	UserEdit *models.PermissionDescription `json:"UserEdit,omitempty"`

	// user invite
	UserInvite *models.PermissionDescription `json:"UserInvite,omitempty"`

	// user role edit
	UserRoleEdit *models.PermissionDescription `json:"UserRoleEdit,omitempty"`

	// user role view
	UserRoleView *models.PermissionDescription `json:"UserRoleView,omitempty"`

	// user view
	UserView *models.PermissionDescription `json:"UserView,omitempty"`

	// variable edit
	VariableEdit *models.PermissionDescription `json:"VariableEdit,omitempty"`

	// variable edit unscoped
	VariableEditUnscoped *models.PermissionDescription `json:"VariableEditUnscoped,omitempty"`

	// variable view
	VariableView *models.PermissionDescription `json:"VariableView,omitempty"`

	// variable view unscoped
	VariableViewUnscoped *models.PermissionDescription `json:"VariableViewUnscoped,omitempty"`

	// worker edit
	WorkerEdit *models.PermissionDescription `json:"WorkerEdit,omitempty"`

	// worker view
	WorkerView *models.PermissionDescription `json:"WorkerView,omitempty"`
}

// Validate validates this get permission definitions o k body
func (o *GetPermissionDefinitionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccountDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccountEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccountView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActionTemplateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActionTemplateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActionTemplateEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActionTemplateView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministerSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArtifactCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArtifactDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArtifactEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArtifactView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuildInformationAdminister(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuildInformationPush(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuiltInFeedAdminister(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuiltInFeedDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuiltInFeedPush(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCertificateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCertificateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCertificateEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCertificateExportPrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCertificateView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfigureServer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefectReport(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefectResolve(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeploymentCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeploymentDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeploymentView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnvironmentCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnvironmentDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnvironmentEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnvironmentView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFeedEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFeedView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInterruptionSubmit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInterruptionView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInterruptionViewSubmitResponsible(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLibraryVariableSetCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLibraryVariableSetDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLibraryVariableSetEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLibraryVariableSetView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLifecycleCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLifecycleDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLifecycleEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLifecycleView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMachineCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMachineDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMachineEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMachinePolicyCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMachinePolicyDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMachinePolicyEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMachinePolicyView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMachineView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectGroupCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectGroupDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectGroupEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectGroupView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxyCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxyDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxyEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProxyView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReleaseCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReleaseDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReleaseEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReleaseView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRunbookEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRunbookRunCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRunbookRunDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRunbookRunView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRunbookView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpaceCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpaceDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpaceEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpaceView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTagSetCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTagSetDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTagSetEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaskCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaskCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaskEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaskView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTeamCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTeamDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTeamEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTeamView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTenantCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTenantDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTenantEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTenantView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTriggerCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTriggerDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTriggerEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTriggerView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserRoleEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserRoleView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVariableEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVariableEditUnscoped(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVariableView(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVariableViewUnscoped(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWorkerEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWorkerView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateAccountCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountCreate) { // not required
		return nil
	}

	if o.AccountCreate != nil {
		if err := o.AccountCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "AccountCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateAccountDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountDelete) { // not required
		return nil
	}

	if o.AccountDelete != nil {
		if err := o.AccountDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "AccountDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateAccountEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountEdit) { // not required
		return nil
	}

	if o.AccountEdit != nil {
		if err := o.AccountEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "AccountEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateAccountView(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountView) { // not required
		return nil
	}

	if o.AccountView != nil {
		if err := o.AccountView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "AccountView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateActionTemplateCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.ActionTemplateCreate) { // not required
		return nil
	}

	if o.ActionTemplateCreate != nil {
		if err := o.ActionTemplateCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ActionTemplateCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateActionTemplateDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.ActionTemplateDelete) { // not required
		return nil
	}

	if o.ActionTemplateDelete != nil {
		if err := o.ActionTemplateDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ActionTemplateDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateActionTemplateEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.ActionTemplateEdit) { // not required
		return nil
	}

	if o.ActionTemplateEdit != nil {
		if err := o.ActionTemplateEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ActionTemplateEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateActionTemplateView(formats strfmt.Registry) error {

	if swag.IsZero(o.ActionTemplateView) { // not required
		return nil
	}

	if o.ActionTemplateView != nil {
		if err := o.ActionTemplateView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ActionTemplateView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateAdministerSystem(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministerSystem) { // not required
		return nil
	}

	if o.AdministerSystem != nil {
		if err := o.AdministerSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "AdministerSystem")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateArtifactCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.ArtifactCreate) { // not required
		return nil
	}

	if o.ArtifactCreate != nil {
		if err := o.ArtifactCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ArtifactCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateArtifactDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.ArtifactDelete) { // not required
		return nil
	}

	if o.ArtifactDelete != nil {
		if err := o.ArtifactDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ArtifactDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateArtifactEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.ArtifactEdit) { // not required
		return nil
	}

	if o.ArtifactEdit != nil {
		if err := o.ArtifactEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ArtifactEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateArtifactView(formats strfmt.Registry) error {

	if swag.IsZero(o.ArtifactView) { // not required
		return nil
	}

	if o.ArtifactView != nil {
		if err := o.ArtifactView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ArtifactView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateBuildInformationAdminister(formats strfmt.Registry) error {

	if swag.IsZero(o.BuildInformationAdminister) { // not required
		return nil
	}

	if o.BuildInformationAdminister != nil {
		if err := o.BuildInformationAdminister.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "BuildInformationAdminister")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateBuildInformationPush(formats strfmt.Registry) error {

	if swag.IsZero(o.BuildInformationPush) { // not required
		return nil
	}

	if o.BuildInformationPush != nil {
		if err := o.BuildInformationPush.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "BuildInformationPush")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateBuiltInFeedAdminister(formats strfmt.Registry) error {

	if swag.IsZero(o.BuiltInFeedAdminister) { // not required
		return nil
	}

	if o.BuiltInFeedAdminister != nil {
		if err := o.BuiltInFeedAdminister.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "BuiltInFeedAdminister")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateBuiltInFeedDownload(formats strfmt.Registry) error {

	if swag.IsZero(o.BuiltInFeedDownload) { // not required
		return nil
	}

	if o.BuiltInFeedDownload != nil {
		if err := o.BuiltInFeedDownload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "BuiltInFeedDownload")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateBuiltInFeedPush(formats strfmt.Registry) error {

	if swag.IsZero(o.BuiltInFeedPush) { // not required
		return nil
	}

	if o.BuiltInFeedPush != nil {
		if err := o.BuiltInFeedPush.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "BuiltInFeedPush")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateCertificateCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.CertificateCreate) { // not required
		return nil
	}

	if o.CertificateCreate != nil {
		if err := o.CertificateCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "CertificateCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateCertificateDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.CertificateDelete) { // not required
		return nil
	}

	if o.CertificateDelete != nil {
		if err := o.CertificateDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "CertificateDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateCertificateEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.CertificateEdit) { // not required
		return nil
	}

	if o.CertificateEdit != nil {
		if err := o.CertificateEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "CertificateEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateCertificateExportPrivateKey(formats strfmt.Registry) error {

	if swag.IsZero(o.CertificateExportPrivateKey) { // not required
		return nil
	}

	if o.CertificateExportPrivateKey != nil {
		if err := o.CertificateExportPrivateKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "CertificateExportPrivateKey")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateCertificateView(formats strfmt.Registry) error {

	if swag.IsZero(o.CertificateView) { // not required
		return nil
	}

	if o.CertificateView != nil {
		if err := o.CertificateView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "CertificateView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateConfigureServer(formats strfmt.Registry) error {

	if swag.IsZero(o.ConfigureServer) { // not required
		return nil
	}

	if o.ConfigureServer != nil {
		if err := o.ConfigureServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ConfigureServer")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateDefectReport(formats strfmt.Registry) error {

	if swag.IsZero(o.DefectReport) { // not required
		return nil
	}

	if o.DefectReport != nil {
		if err := o.DefectReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "DefectReport")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateDefectResolve(formats strfmt.Registry) error {

	if swag.IsZero(o.DefectResolve) { // not required
		return nil
	}

	if o.DefectResolve != nil {
		if err := o.DefectResolve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "DefectResolve")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateDeploymentCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.DeploymentCreate) { // not required
		return nil
	}

	if o.DeploymentCreate != nil {
		if err := o.DeploymentCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "DeploymentCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateDeploymentDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.DeploymentDelete) { // not required
		return nil
	}

	if o.DeploymentDelete != nil {
		if err := o.DeploymentDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "DeploymentDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateDeploymentView(formats strfmt.Registry) error {

	if swag.IsZero(o.DeploymentView) { // not required
		return nil
	}

	if o.DeploymentView != nil {
		if err := o.DeploymentView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "DeploymentView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateEnvironmentCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.EnvironmentCreate) { // not required
		return nil
	}

	if o.EnvironmentCreate != nil {
		if err := o.EnvironmentCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "EnvironmentCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateEnvironmentDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.EnvironmentDelete) { // not required
		return nil
	}

	if o.EnvironmentDelete != nil {
		if err := o.EnvironmentDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "EnvironmentDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateEnvironmentEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.EnvironmentEdit) { // not required
		return nil
	}

	if o.EnvironmentEdit != nil {
		if err := o.EnvironmentEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "EnvironmentEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateEnvironmentView(formats strfmt.Registry) error {

	if swag.IsZero(o.EnvironmentView) { // not required
		return nil
	}

	if o.EnvironmentView != nil {
		if err := o.EnvironmentView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "EnvironmentView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateEventView(formats strfmt.Registry) error {

	if swag.IsZero(o.EventView) { // not required
		return nil
	}

	if o.EventView != nil {
		if err := o.EventView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "EventView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateFeedEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.FeedEdit) { // not required
		return nil
	}

	if o.FeedEdit != nil {
		if err := o.FeedEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "FeedEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateFeedView(formats strfmt.Registry) error {

	if swag.IsZero(o.FeedView) { // not required
		return nil
	}

	if o.FeedView != nil {
		if err := o.FeedView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "FeedView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateInterruptionSubmit(formats strfmt.Registry) error {

	if swag.IsZero(o.InterruptionSubmit) { // not required
		return nil
	}

	if o.InterruptionSubmit != nil {
		if err := o.InterruptionSubmit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "InterruptionSubmit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateInterruptionView(formats strfmt.Registry) error {

	if swag.IsZero(o.InterruptionView) { // not required
		return nil
	}

	if o.InterruptionView != nil {
		if err := o.InterruptionView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "InterruptionView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateInterruptionViewSubmitResponsible(formats strfmt.Registry) error {

	if swag.IsZero(o.InterruptionViewSubmitResponsible) { // not required
		return nil
	}

	if o.InterruptionViewSubmitResponsible != nil {
		if err := o.InterruptionViewSubmitResponsible.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "InterruptionViewSubmitResponsible")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateLibraryVariableSetCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.LibraryVariableSetCreate) { // not required
		return nil
	}

	if o.LibraryVariableSetCreate != nil {
		if err := o.LibraryVariableSetCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "LibraryVariableSetCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateLibraryVariableSetDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.LibraryVariableSetDelete) { // not required
		return nil
	}

	if o.LibraryVariableSetDelete != nil {
		if err := o.LibraryVariableSetDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "LibraryVariableSetDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateLibraryVariableSetEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.LibraryVariableSetEdit) { // not required
		return nil
	}

	if o.LibraryVariableSetEdit != nil {
		if err := o.LibraryVariableSetEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "LibraryVariableSetEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateLibraryVariableSetView(formats strfmt.Registry) error {

	if swag.IsZero(o.LibraryVariableSetView) { // not required
		return nil
	}

	if o.LibraryVariableSetView != nil {
		if err := o.LibraryVariableSetView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "LibraryVariableSetView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateLifecycleCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.LifecycleCreate) { // not required
		return nil
	}

	if o.LifecycleCreate != nil {
		if err := o.LifecycleCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "LifecycleCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateLifecycleDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.LifecycleDelete) { // not required
		return nil
	}

	if o.LifecycleDelete != nil {
		if err := o.LifecycleDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "LifecycleDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateLifecycleEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.LifecycleEdit) { // not required
		return nil
	}

	if o.LifecycleEdit != nil {
		if err := o.LifecycleEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "LifecycleEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateLifecycleView(formats strfmt.Registry) error {

	if swag.IsZero(o.LifecycleView) { // not required
		return nil
	}

	if o.LifecycleView != nil {
		if err := o.LifecycleView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "LifecycleView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateMachineCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.MachineCreate) { // not required
		return nil
	}

	if o.MachineCreate != nil {
		if err := o.MachineCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "MachineCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateMachineDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.MachineDelete) { // not required
		return nil
	}

	if o.MachineDelete != nil {
		if err := o.MachineDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "MachineDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateMachineEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.MachineEdit) { // not required
		return nil
	}

	if o.MachineEdit != nil {
		if err := o.MachineEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "MachineEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateMachinePolicyCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.MachinePolicyCreate) { // not required
		return nil
	}

	if o.MachinePolicyCreate != nil {
		if err := o.MachinePolicyCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "MachinePolicyCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateMachinePolicyDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.MachinePolicyDelete) { // not required
		return nil
	}

	if o.MachinePolicyDelete != nil {
		if err := o.MachinePolicyDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "MachinePolicyDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateMachinePolicyEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.MachinePolicyEdit) { // not required
		return nil
	}

	if o.MachinePolicyEdit != nil {
		if err := o.MachinePolicyEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "MachinePolicyEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateMachinePolicyView(formats strfmt.Registry) error {

	if swag.IsZero(o.MachinePolicyView) { // not required
		return nil
	}

	if o.MachinePolicyView != nil {
		if err := o.MachinePolicyView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "MachinePolicyView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateMachineView(formats strfmt.Registry) error {

	if swag.IsZero(o.MachineView) { // not required
		return nil
	}

	if o.MachineView != nil {
		if err := o.MachineView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "MachineView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProcessEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessEdit) { // not required
		return nil
	}

	if o.ProcessEdit != nil {
		if err := o.ProcessEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProcessEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProcessView(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessView) { // not required
		return nil
	}

	if o.ProcessView != nil {
		if err := o.ProcessView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProcessView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProjectCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectCreate) { // not required
		return nil
	}

	if o.ProjectCreate != nil {
		if err := o.ProjectCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProjectCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProjectDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectDelete) { // not required
		return nil
	}

	if o.ProjectDelete != nil {
		if err := o.ProjectDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProjectDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProjectEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectEdit) { // not required
		return nil
	}

	if o.ProjectEdit != nil {
		if err := o.ProjectEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProjectEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProjectGroupCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectGroupCreate) { // not required
		return nil
	}

	if o.ProjectGroupCreate != nil {
		if err := o.ProjectGroupCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProjectGroupCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProjectGroupDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectGroupDelete) { // not required
		return nil
	}

	if o.ProjectGroupDelete != nil {
		if err := o.ProjectGroupDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProjectGroupDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProjectGroupEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectGroupEdit) { // not required
		return nil
	}

	if o.ProjectGroupEdit != nil {
		if err := o.ProjectGroupEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProjectGroupEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProjectGroupView(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectGroupView) { // not required
		return nil
	}

	if o.ProjectGroupView != nil {
		if err := o.ProjectGroupView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProjectGroupView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProjectView(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectView) { // not required
		return nil
	}

	if o.ProjectView != nil {
		if err := o.ProjectView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProjectView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProxyCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.ProxyCreate) { // not required
		return nil
	}

	if o.ProxyCreate != nil {
		if err := o.ProxyCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProxyCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProxyDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.ProxyDelete) { // not required
		return nil
	}

	if o.ProxyDelete != nil {
		if err := o.ProxyDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProxyDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProxyEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.ProxyEdit) { // not required
		return nil
	}

	if o.ProxyEdit != nil {
		if err := o.ProxyEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProxyEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateProxyView(formats strfmt.Registry) error {

	if swag.IsZero(o.ProxyView) { // not required
		return nil
	}

	if o.ProxyView != nil {
		if err := o.ProxyView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ProxyView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateReleaseCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.ReleaseCreate) { // not required
		return nil
	}

	if o.ReleaseCreate != nil {
		if err := o.ReleaseCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ReleaseCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateReleaseDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.ReleaseDelete) { // not required
		return nil
	}

	if o.ReleaseDelete != nil {
		if err := o.ReleaseDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ReleaseDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateReleaseEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.ReleaseEdit) { // not required
		return nil
	}

	if o.ReleaseEdit != nil {
		if err := o.ReleaseEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ReleaseEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateReleaseView(formats strfmt.Registry) error {

	if swag.IsZero(o.ReleaseView) { // not required
		return nil
	}

	if o.ReleaseView != nil {
		if err := o.ReleaseView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "ReleaseView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateRunbookEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.RunbookEdit) { // not required
		return nil
	}

	if o.RunbookEdit != nil {
		if err := o.RunbookEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "RunbookEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateRunbookRunCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.RunbookRunCreate) { // not required
		return nil
	}

	if o.RunbookRunCreate != nil {
		if err := o.RunbookRunCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "RunbookRunCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateRunbookRunDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.RunbookRunDelete) { // not required
		return nil
	}

	if o.RunbookRunDelete != nil {
		if err := o.RunbookRunDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "RunbookRunDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateRunbookRunView(formats strfmt.Registry) error {

	if swag.IsZero(o.RunbookRunView) { // not required
		return nil
	}

	if o.RunbookRunView != nil {
		if err := o.RunbookRunView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "RunbookRunView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateRunbookView(formats strfmt.Registry) error {

	if swag.IsZero(o.RunbookView) { // not required
		return nil
	}

	if o.RunbookView != nil {
		if err := o.RunbookView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "RunbookView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateSpaceCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.SpaceCreate) { // not required
		return nil
	}

	if o.SpaceCreate != nil {
		if err := o.SpaceCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "SpaceCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateSpaceDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.SpaceDelete) { // not required
		return nil
	}

	if o.SpaceDelete != nil {
		if err := o.SpaceDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "SpaceDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateSpaceEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.SpaceEdit) { // not required
		return nil
	}

	if o.SpaceEdit != nil {
		if err := o.SpaceEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "SpaceEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateSpaceView(formats strfmt.Registry) error {

	if swag.IsZero(o.SpaceView) { // not required
		return nil
	}

	if o.SpaceView != nil {
		if err := o.SpaceView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "SpaceView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateSubscriptionCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.SubscriptionCreate) { // not required
		return nil
	}

	if o.SubscriptionCreate != nil {
		if err := o.SubscriptionCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "SubscriptionCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateSubscriptionDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.SubscriptionDelete) { // not required
		return nil
	}

	if o.SubscriptionDelete != nil {
		if err := o.SubscriptionDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "SubscriptionDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateSubscriptionEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.SubscriptionEdit) { // not required
		return nil
	}

	if o.SubscriptionEdit != nil {
		if err := o.SubscriptionEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "SubscriptionEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateSubscriptionView(formats strfmt.Registry) error {

	if swag.IsZero(o.SubscriptionView) { // not required
		return nil
	}

	if o.SubscriptionView != nil {
		if err := o.SubscriptionView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "SubscriptionView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTagSetCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.TagSetCreate) { // not required
		return nil
	}

	if o.TagSetCreate != nil {
		if err := o.TagSetCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TagSetCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTagSetDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.TagSetDelete) { // not required
		return nil
	}

	if o.TagSetDelete != nil {
		if err := o.TagSetDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TagSetDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTagSetEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.TagSetEdit) { // not required
		return nil
	}

	if o.TagSetEdit != nil {
		if err := o.TagSetEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TagSetEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTaskCancel(formats strfmt.Registry) error {

	if swag.IsZero(o.TaskCancel) { // not required
		return nil
	}

	if o.TaskCancel != nil {
		if err := o.TaskCancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TaskCancel")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTaskCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.TaskCreate) { // not required
		return nil
	}

	if o.TaskCreate != nil {
		if err := o.TaskCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TaskCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTaskEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.TaskEdit) { // not required
		return nil
	}

	if o.TaskEdit != nil {
		if err := o.TaskEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TaskEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTaskView(formats strfmt.Registry) error {

	if swag.IsZero(o.TaskView) { // not required
		return nil
	}

	if o.TaskView != nil {
		if err := o.TaskView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TaskView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTeamCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.TeamCreate) { // not required
		return nil
	}

	if o.TeamCreate != nil {
		if err := o.TeamCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TeamCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTeamDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.TeamDelete) { // not required
		return nil
	}

	if o.TeamDelete != nil {
		if err := o.TeamDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TeamDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTeamEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.TeamEdit) { // not required
		return nil
	}

	if o.TeamEdit != nil {
		if err := o.TeamEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TeamEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTeamView(formats strfmt.Registry) error {

	if swag.IsZero(o.TeamView) { // not required
		return nil
	}

	if o.TeamView != nil {
		if err := o.TeamView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TeamView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTenantCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.TenantCreate) { // not required
		return nil
	}

	if o.TenantCreate != nil {
		if err := o.TenantCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TenantCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTenantDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.TenantDelete) { // not required
		return nil
	}

	if o.TenantDelete != nil {
		if err := o.TenantDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TenantDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTenantEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.TenantEdit) { // not required
		return nil
	}

	if o.TenantEdit != nil {
		if err := o.TenantEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TenantEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTenantView(formats strfmt.Registry) error {

	if swag.IsZero(o.TenantView) { // not required
		return nil
	}

	if o.TenantView != nil {
		if err := o.TenantView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TenantView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTriggerCreate(formats strfmt.Registry) error {

	if swag.IsZero(o.TriggerCreate) { // not required
		return nil
	}

	if o.TriggerCreate != nil {
		if err := o.TriggerCreate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TriggerCreate")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTriggerDelete(formats strfmt.Registry) error {

	if swag.IsZero(o.TriggerDelete) { // not required
		return nil
	}

	if o.TriggerDelete != nil {
		if err := o.TriggerDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TriggerDelete")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTriggerEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.TriggerEdit) { // not required
		return nil
	}

	if o.TriggerEdit != nil {
		if err := o.TriggerEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TriggerEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateTriggerView(formats strfmt.Registry) error {

	if swag.IsZero(o.TriggerView) { // not required
		return nil
	}

	if o.TriggerView != nil {
		if err := o.TriggerView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "TriggerView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateUserEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.UserEdit) { // not required
		return nil
	}

	if o.UserEdit != nil {
		if err := o.UserEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "UserEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateUserInvite(formats strfmt.Registry) error {

	if swag.IsZero(o.UserInvite) { // not required
		return nil
	}

	if o.UserInvite != nil {
		if err := o.UserInvite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "UserInvite")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateUserRoleEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.UserRoleEdit) { // not required
		return nil
	}

	if o.UserRoleEdit != nil {
		if err := o.UserRoleEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "UserRoleEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateUserRoleView(formats strfmt.Registry) error {

	if swag.IsZero(o.UserRoleView) { // not required
		return nil
	}

	if o.UserRoleView != nil {
		if err := o.UserRoleView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "UserRoleView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateUserView(formats strfmt.Registry) error {

	if swag.IsZero(o.UserView) { // not required
		return nil
	}

	if o.UserView != nil {
		if err := o.UserView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "UserView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateVariableEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.VariableEdit) { // not required
		return nil
	}

	if o.VariableEdit != nil {
		if err := o.VariableEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "VariableEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateVariableEditUnscoped(formats strfmt.Registry) error {

	if swag.IsZero(o.VariableEditUnscoped) { // not required
		return nil
	}

	if o.VariableEditUnscoped != nil {
		if err := o.VariableEditUnscoped.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "VariableEditUnscoped")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateVariableView(formats strfmt.Registry) error {

	if swag.IsZero(o.VariableView) { // not required
		return nil
	}

	if o.VariableView != nil {
		if err := o.VariableView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "VariableView")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateVariableViewUnscoped(formats strfmt.Registry) error {

	if swag.IsZero(o.VariableViewUnscoped) { // not required
		return nil
	}

	if o.VariableViewUnscoped != nil {
		if err := o.VariableViewUnscoped.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "VariableViewUnscoped")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateWorkerEdit(formats strfmt.Registry) error {

	if swag.IsZero(o.WorkerEdit) { // not required
		return nil
	}

	if o.WorkerEdit != nil {
		if err := o.WorkerEdit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "WorkerEdit")
			}
			return err
		}
	}

	return nil
}

func (o *GetPermissionDefinitionsOKBody) validateWorkerView(formats strfmt.Registry) error {

	if swag.IsZero(o.WorkerView) { // not required
		return nil
	}

	if o.WorkerView != nil {
		if err := o.WorkerView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissionDefinitionsOK" + "." + "WorkerView")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPermissionDefinitionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPermissionDefinitionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetPermissionDefinitionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
