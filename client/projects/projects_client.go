// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectCreated, error)

	CreateProjectLogo(params *CreateProjectLogoParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectLogoOK, error)

	CreateProjectLogoSpaces(params *CreateProjectLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectLogoSpacesOK, error)

	CreateProjectSpaces(params *CreateProjectSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectSpacesCreated, error)

	CreateVersionControlSettingsConnectivityCheck(params *CreateVersionControlSettingsConnectivityCheckParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVersionControlSettingsConnectivityCheckOK, error)

	CreateVersionControlSettingsConnectivityCheckSpaces(params *CreateVersionControlSettingsConnectivityCheckSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVersionControlSettingsConnectivityCheckSpacesOK, error)

	DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectOK, error)

	DeleteProjectSpaces(params *DeleteProjectSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectSpacesOK, error)

	GetProjectByIDOrSlug(params *GetProjectByIDOrSlugParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectByIDOrSlugOK, error)

	GetProjectByIDOrSlugSpaces(params *GetProjectByIDOrSlugSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectByIDOrSlugSpacesOK, error)

	GetProjectLogo(params *GetProjectLogoParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetProjectLogoOK, error)

	GetProjectLogoSpaces(params *GetProjectLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetProjectLogoSpacesOK, error)

	GetProjectSettingsMetadata(params *GetProjectSettingsMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectSettingsMetadataOK, error)

	GetProjectSettingsMetadataSpaces(params *GetProjectSettingsMetadataSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectSettingsMetadataSpacesOK, error)

	GetProjectSummary(params *GetProjectSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectSummaryOK, error)

	GetProjectSummarySpaces(params *GetProjectSummarySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectSummarySpacesOK, error)

	IndexProjects(params *IndexProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectsOK, error)

	IndexProjectsSpaces(params *IndexProjectsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectsSpacesOK, error)

	ListAllProjects(params *ListAllProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllProjectsOK, error)

	ListAllProjectsSpaces(params *ListAllProjectsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllProjectsSpacesOK, error)

	UpdateProject(params *UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectOK, error)

	UpdateProjectLogo(params *UpdateProjectLogoParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectLogoOK, error)

	UpdateProjectLogoSpaces(params *UpdateProjectLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectLogoSpacesOK, error)

	UpdateProjectSpaces(params *UpdateProjectSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateProject creates a project resource

  Creates a new project.
*/
func (a *Client) CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/api/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectLogo Updates the logo associated with the project.
*/
func (a *Client) CreateProjectLogo(params *CreateProjectLogoParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectLogo",
		Method:             "POST",
		PathPattern:        "/api/projects/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectLogoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectLogoSpaces Updates the logo associated with the project.
*/
func (a *Client) CreateProjectLogoSpaces(params *CreateProjectLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectLogo_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectLogoSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectSpaces creates a project resource

  Creates a new project.
*/
func (a *Client) CreateProjectSpaces(params *CreateProjectSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProject_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVersionControlSettingsConnectivityCheck Tests the VCS settings to make sure we can connect
*/
func (a *Client) CreateVersionControlSettingsConnectivityCheck(params *CreateVersionControlSettingsConnectivityCheckParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVersionControlSettingsConnectivityCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVersionControlSettingsConnectivityCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createVersionControlSettingsConnectivityCheck",
		Method:             "POST",
		PathPattern:        "/api/projects/{projectId}/versioncontrolsettings/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVersionControlSettingsConnectivityCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVersionControlSettingsConnectivityCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVersionControlSettingsConnectivityCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVersionControlSettingsConnectivityCheckSpaces Tests the VCS settings to make sure we can connect
*/
func (a *Client) CreateVersionControlSettingsConnectivityCheckSpaces(params *CreateVersionControlSettingsConnectivityCheckSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVersionControlSettingsConnectivityCheckSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVersionControlSettingsConnectivityCheckSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createVersionControlSettingsConnectivityCheck_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/projects/{projectId}/versioncontrolsettings/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVersionControlSettingsConnectivityCheckSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVersionControlSettingsConnectivityCheckSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVersionControlSettingsConnectivityCheck_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProject deletes a project resource by ID

  Deletes an existing project.
*/
func (a *Client) DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/api/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProjectSpaces deletes a project resource by ID

  Deletes an existing project.
*/
func (a *Client) DeleteProjectSpaces(params *DeleteProjectSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProject_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProject_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectByIDOrSlug gets a project resource by ID or slug

  Gets a single project by ID or Slug.
*/
func (a *Client) GetProjectByIDOrSlug(params *GetProjectByIDOrSlugParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectByIDOrSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectByIDOrSlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectByIdOrSlug",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectByIDOrSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectByIDOrSlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectByIdOrSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectByIDOrSlugSpaces gets a project resource by ID or slug

  Gets a single project by ID or Slug.
*/
func (a *Client) GetProjectByIDOrSlugSpaces(params *GetProjectByIDOrSlugSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectByIDOrSlugSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectByIDOrSlugSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectByIdOrSlug_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectByIDOrSlugSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectByIDOrSlugSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectByIdOrSlug_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectLogo Gets the logo associated with the project.
*/
func (a *Client) GetProjectLogo(params *GetProjectLogoParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetProjectLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectLogo",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectLogoReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectLogoSpaces Gets the logo associated with the project.
*/
func (a *Client) GetProjectLogoSpaces(params *GetProjectLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetProjectLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectLogo_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectLogoSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectSettingsMetadata Gets the custom settings metadata from the extensions.
*/
func (a *Client) GetProjectSettingsMetadata(params *GetProjectSettingsMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectSettingsMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectSettingsMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectSettingsMetadata",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectSettingsMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectSettingsMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectSettingsMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectSettingsMetadataSpaces Gets the custom settings metadata from the extensions.
*/
func (a *Client) GetProjectSettingsMetadataSpaces(params *GetProjectSettingsMetadataSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectSettingsMetadataSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectSettingsMetadataSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectSettingsMetadata_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectSettingsMetadataSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectSettingsMetadataSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectSettingsMetadata_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectSummary Gets a summary of project-specific information.
*/
func (a *Client) GetProjectSummary(params *GetProjectSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectSummary",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectSummarySpaces Gets a summary of project-specific information.
*/
func (a *Client) GetProjectSummarySpaces(params *GetProjectSummarySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectSummarySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectSummarySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectSummary_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectSummarySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectSummarySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectSummary_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjects gets a list of project resources

  Lists all of the projects in the supplied Octopus Deploy Space, from all project groups. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexProjects(params *IndexProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjects",
		Method:             "GET",
		PathPattern:        "/api/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectsSpaces gets a list of project resources

  Lists all of the projects in the supplied Octopus Deploy Space, from all project groups. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexProjectsSpaces(params *IndexProjectsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjects_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjects_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllProjects gets a list of project resources

  Lists the name and ID of all of the projects in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllProjects(params *ListAllProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllProjects",
		Method:             "GET",
		PathPattern:        "/api/projects/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllProjectsSpaces gets a list of project resources

  Lists the name and ID of all of the projects in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllProjectsSpaces(params *ListAllProjectsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllProjectsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllProjectsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllProjects_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllProjectsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllProjectsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllProjects_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProject modifies a project resource by ID

  Modifies an existing project.
*/
func (a *Client) UpdateProject(params *UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PUT",
		PathPattern:        "/api/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProjectLogo Updates the logo associated with the project.
*/
func (a *Client) UpdateProjectLogo(params *UpdateProjectLogoParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProjectLogo",
		Method:             "PUT",
		PathPattern:        "/api/projects/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectLogoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProjectLogoSpaces Updates the logo associated with the project.
*/
func (a *Client) UpdateProjectLogoSpaces(params *UpdateProjectLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProjectLogo_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectLogoSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProjectSpaces modifies a project resource by ID

  Modifies an existing project.
*/
func (a *Client) UpdateProjectSpaces(params *UpdateProjectSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProject_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProject_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
