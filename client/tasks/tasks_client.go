// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTask(params *CreateTaskParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskCreated, error)

	CreateTaskCancel(params *CreateTaskCancelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskCancelOK, error)

	CreateTaskCancelSpaces(params *CreateTaskCancelSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskCancelSpacesOK, error)

	CreateTaskRerun(params *CreateTaskRerunParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskRerunOK, error)

	CreateTaskRerunSpaces(params *CreateTaskRerunSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskRerunSpacesOK, error)

	CreateTaskState(params *CreateTaskStateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskStateOK, error)

	CreateTaskStateSpaces(params *CreateTaskStateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskStateSpacesOK, error)

	CreateTaskSpaces(params *CreateTaskSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskSpacesCreated, error)

	GetListTaskTypes(params *GetListTaskTypesParams) (*GetListTaskTypesOK, error)

	GetListTaskTypesSpaces(params *GetListTaskTypesSpacesParams) (*GetListTaskTypesSpacesOK, error)

	GetListTasks(params *GetListTasksParams, authInfo runtime.ClientAuthInfoWriter) (*GetListTasksOK, error)

	GetListTasksSpaces(params *GetListTasksSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListTasksSpacesOK, error)

	GetTaskByID(params *GetTaskByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskByIDOK, error)

	GetTaskByIDSpaces(params *GetTaskByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskByIDSpacesOK, error)

	GetTaskDetails(params *GetTaskDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskDetailsOK, error)

	GetTaskDetailsSpaces(params *GetTaskDetailsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskDetailsSpacesOK, error)

	GetTaskRaw(params *GetTaskRawParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskRawOK, error)

	GetTaskRawSpaces(params *GetTaskRawSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskRawSpacesOK, error)

	IndexTaskQueuedBehind(params *IndexTaskQueuedBehindParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTaskQueuedBehindOK, error)

	IndexTaskQueuedBehindSpaces(params *IndexTaskQueuedBehindSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTaskQueuedBehindSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTask creates a task resource

  Creates a new task.
*/
func (a *Client) CreateTask(params *CreateTaskParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTask",
		Method:             "POST",
		PathPattern:        "/api/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTaskCancel Marks the given task as canceled.
*/
func (a *Client) CreateTaskCancel(params *CreateTaskCancelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTaskCancel",
		Method:             "POST",
		PathPattern:        "/api/tasks/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTaskCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTaskCancelSpaces Marks the given task as canceled.
*/
func (a *Client) CreateTaskCancelSpaces(params *CreateTaskCancelSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskCancelSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskCancelSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTaskCancel_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/tasks/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskCancelSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskCancelSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTaskCancel_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTaskRerun Creates a new task and executes it, using a given task as the input. Note that deployment tasks cannot be re-run.
*/
func (a *Client) CreateTaskRerun(params *CreateTaskRerunParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskRerunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskRerunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTaskRerun",
		Method:             "POST",
		PathPattern:        "/api/tasks/rerun/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskRerunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskRerunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTaskRerun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTaskRerunSpaces Creates a new task and executes it, using a given task as the input. Note that deployment tasks cannot be re-run.
*/
func (a *Client) CreateTaskRerunSpaces(params *CreateTaskRerunSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskRerunSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskRerunSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTaskRerun_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/tasks/rerun/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskRerunSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskRerunSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTaskRerun_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTaskState Change the state of a task
*/
func (a *Client) CreateTaskState(params *CreateTaskStateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTaskState",
		Method:             "POST",
		PathPattern:        "/api/tasks/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTaskState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTaskStateSpaces Change the state of a task
*/
func (a *Client) CreateTaskStateSpaces(params *CreateTaskStateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskStateSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskStateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTaskState_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/tasks/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskStateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskStateSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTaskState_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTaskSpaces creates a task resource

  Creates a new task.
*/
func (a *Client) CreateTaskSpaces(params *CreateTaskSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTaskSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTask_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTask_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListTaskTypes Lists supported task types.
*/
func (a *Client) GetListTaskTypes(params *GetListTaskTypesParams) (*GetListTaskTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListTaskTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListTaskTypes",
		Method:             "GET",
		PathPattern:        "/api/tasks/tasktypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListTaskTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListTaskTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListTaskTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListTaskTypesSpaces Lists supported task types.
*/
func (a *Client) GetListTaskTypesSpaces(params *GetListTaskTypesSpacesParams) (*GetListTaskTypesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListTaskTypesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListTaskTypes_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tasks/tasktypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListTaskTypesSpacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListTaskTypesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListTaskTypes_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListTasks Lists all of the tasks in the supplied Octopus Deploy Space. The results will be sorted from newest to oldest.
*/
func (a *Client) GetListTasks(params *GetListTasksParams, authInfo runtime.ClientAuthInfoWriter) (*GetListTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListTasks",
		Method:             "GET",
		PathPattern:        "/api/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListTasksSpaces Lists all of the tasks in the supplied Octopus Deploy Space. The results will be sorted from newest to oldest.
*/
func (a *Client) GetListTasksSpaces(params *GetListTasksSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListTasksSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListTasksSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListTasks_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListTasksSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListTasksSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListTasks_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskByID gets a task resource by ID

  Gets a single task by ID.
*/
func (a *Client) GetTaskByID(params *GetTaskByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskById",
		Method:             "GET",
		PathPattern:        "/api/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskByIDSpaces gets a task resource by ID

  Gets a single task by ID.
*/
func (a *Client) GetTaskByIDSpaces(params *GetTaskByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskDetails Gets a single task by ID, including the full task log as a tree of activity elements.
*/
func (a *Client) GetTaskDetails(params *GetTaskDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskDetails",
		Method:             "GET",
		PathPattern:        "/api/tasks/{id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskDetailsSpaces Gets a single task by ID, including the full task log as a tree of activity elements.
*/
func (a *Client) GetTaskDetailsSpaces(params *GetTaskDetailsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskDetailsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskDetailsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskDetails_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tasks/{id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskDetailsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskDetailsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskDetails_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskRaw Gets the full task log of a given resource as plain text. Useful when the log needs to be rendered to a console or sent as an email attachment.
*/
func (a *Client) GetTaskRaw(params *GetTaskRawParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskRawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskRaw",
		Method:             "GET",
		PathPattern:        "/api/tasks/{id}/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskRaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskRawSpaces Gets the full task log of a given resource as plain text. Useful when the log needs to be rendered to a console or sent as an email attachment.
*/
func (a *Client) GetTaskRawSpaces(params *GetTaskRawSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskRawSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskRawSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskRaw_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tasks/{id}/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskRawSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskRawSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskRaw_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexTaskQueuedBehind gets a list of task resources for the given task resource

  Gets a list of tasks that this task is currently queued behind.
*/
func (a *Client) IndexTaskQueuedBehind(params *IndexTaskQueuedBehindParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTaskQueuedBehindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexTaskQueuedBehindParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexTaskQueuedBehind",
		Method:             "GET",
		PathPattern:        "/api/tasks/{id}/queued-behind",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexTaskQueuedBehindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexTaskQueuedBehindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexTaskQueuedBehind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexTaskQueuedBehindSpaces gets a list of task resources for the given task resource

  Gets a list of tasks that this task is currently queued behind.
*/
func (a *Client) IndexTaskQueuedBehindSpaces(params *IndexTaskQueuedBehindSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexTaskQueuedBehindSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexTaskQueuedBehindSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexTaskQueuedBehind_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/tasks/{id}/queued-behind",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexTaskQueuedBehindSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexTaskQueuedBehindSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexTaskQueuedBehind_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
