// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"models"
)

// CreateTaskRerunSpacesReader is a Reader for the CreateTaskRerunSpaces structure.
type CreateTaskRerunSpacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTaskRerunSpacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateTaskRerunSpacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTaskRerunSpacesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateTaskRerunSpacesOK creates a CreateTaskRerunSpacesOK with default headers values
func NewCreateTaskRerunSpacesOK() *CreateTaskRerunSpacesOK {
	return &CreateTaskRerunSpacesOK{}
}

/*CreateTaskRerunSpacesOK handles this case with default header values.

TaskResource resource returned
*/
type CreateTaskRerunSpacesOK struct {
	Payload *models.TaskResource
}

func (o *CreateTaskRerunSpacesOK) Error() string {
	return fmt.Sprintf("[POST /api/{baseSpaceId}/tasks/rerun/{id}][%d] createTaskRerunSpacesOK  %+v", 200, o.Payload)
}

func (o *CreateTaskRerunSpacesOK) GetPayload() *models.TaskResource {
	return o.Payload
}

func (o *CreateTaskRerunSpacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTaskRerunSpacesBadRequest creates a CreateTaskRerunSpacesBadRequest with default headers values
func NewCreateTaskRerunSpacesBadRequest() *CreateTaskRerunSpacesBadRequest {
	return &CreateTaskRerunSpacesBadRequest{}
}

/*CreateTaskRerunSpacesBadRequest handles this case with default header values.

No id parameter was provided.
This task cannot be re-run.
*/
type CreateTaskRerunSpacesBadRequest struct {
}

func (o *CreateTaskRerunSpacesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/{baseSpaceId}/tasks/rerun/{id}][%d] createTaskRerunSpacesBadRequest ", 400)
}

func (o *CreateTaskRerunSpacesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
