// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reporting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reporting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeploymentsByProjectReport(params *GetDeploymentsByProjectReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentsByProjectReportOK, error)

	GetDeploymentsByProjectReportSpaces(params *GetDeploymentsByProjectReportSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentsByProjectReportSpacesOK, error)

	GetDeploymentsXML(params *GetDeploymentsXMLParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentsXMLOK, error)

	GetDeploymentsXMLSpaces(params *GetDeploymentsXMLSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentsXMLSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDeploymentsByProjectReport Provides a report summarizing the weekly deployments per project over the last 6 months
*/
func (a *Client) GetDeploymentsByProjectReport(params *GetDeploymentsByProjectReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentsByProjectReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsByProjectReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentsByProjectReport",
		Method:             "GET",
		PathPattern:        "/api/reporting/deployments-counted-by-week",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsByProjectReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsByProjectReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsByProjectReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentsByProjectReportSpaces Provides a report summarizing the weekly deployments per project over the last 6 months
*/
func (a *Client) GetDeploymentsByProjectReportSpaces(params *GetDeploymentsByProjectReportSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentsByProjectReportSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsByProjectReportSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentsByProjectReport_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/reporting/deployments-counted-by-week",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsByProjectReportSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsByProjectReportSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsByProjectReport_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentsXML Provides an XML report that contains all of the information about deployments
*/
func (a *Client) GetDeploymentsXML(params *GetDeploymentsXMLParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentsXMLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsXMLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentsXml",
		Method:             "GET",
		PathPattern:        "/api/reporting/deployments/xml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsXMLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsXMLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsXml: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentsXMLSpaces Provides an XML report that contains all of the information about deployments
*/
func (a *Client) GetDeploymentsXMLSpaces(params *GetDeploymentsXMLSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentsXMLSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsXMLSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentsXml_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/reporting/deployments/xml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentsXMLSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsXMLSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsXml_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
