// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"models"
)

// UpdateLicensePutCurrentReader is a Reader for the UpdateLicensePutCurrent structure.
type UpdateLicensePutCurrentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLicensePutCurrentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLicensePutCurrentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateLicensePutCurrentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateLicensePutCurrentOK creates a UpdateLicensePutCurrentOK with default headers values
func NewUpdateLicensePutCurrentOK() *UpdateLicensePutCurrentOK {
	return &UpdateLicensePutCurrentOK{}
}

/*UpdateLicensePutCurrentOK handles this case with default header values.

LicenseResource resource returned
*/
type UpdateLicensePutCurrentOK struct {
	Payload *models.LicenseResource
}

func (o *UpdateLicensePutCurrentOK) Error() string {
	return fmt.Sprintf("[PUT /api/licenses/licenses-current][%d] updateLicensePutCurrentOK  %+v", 200, o.Payload)
}

func (o *UpdateLicensePutCurrentOK) GetPayload() *models.LicenseResource {
	return o.Payload
}

func (o *UpdateLicensePutCurrentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLicensePutCurrentBadRequest creates a UpdateLicensePutCurrentBadRequest with default headers values
func NewUpdateLicensePutCurrentBadRequest() *UpdateLicensePutCurrentBadRequest {
	return &UpdateLicensePutCurrentBadRequest{}
}

/*UpdateLicensePutCurrentBadRequest handles this case with default header values.

No request body was supplied.
Please provide the text of the license.
The license you've provided doesn't seem to be valid XML. You should paste in the entire XML document, starting with <License> and ending at </License>.
You cannot use this license. Attempting to use it would make this server non-compliant.
*/
type UpdateLicensePutCurrentBadRequest struct {
}

func (o *UpdateLicensePutCurrentBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/licenses/licenses-current][%d] updateLicensePutCurrentBadRequest ", 400)
}

func (o *UpdateLicensePutCurrentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
