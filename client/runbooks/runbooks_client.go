// Code generated by go-swagger; DO NOT EDIT.

package runbooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runbooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runbooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRunbook(params *CreateRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookCreated, error)

	CreateRunbookRunForPublishedRunbookCreate(params *CreateRunbookRunForPublishedRunbookCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookRunForPublishedRunbookCreateCreated, error)

	CreateRunbookRunForPublishedRunbookCreateSpaces(params *CreateRunbookRunForPublishedRunbookCreateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookRunForPublishedRunbookCreateSpacesCreated, error)

	CreateRunbookSpaces(params *CreateRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSpacesCreated, error)

	DeleteRunbook(params *DeleteRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunbookOK, error)

	DeleteRunbookSpaces(params *DeleteRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunbookSpacesOK, error)

	GetRunbookByID(params *GetRunbookByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookByIDOK, error)

	GetRunbookByIDSpaces(params *GetRunbookByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookByIDSpacesOK, error)

	GetRunbookEnvironments(params *GetRunbookEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookEnvironmentsOK, error)

	GetRunbookEnvironmentsSpaces(params *GetRunbookEnvironmentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookEnvironmentsSpacesOK, error)

	GetRunbookRunPreviewForRunbook(params *GetRunbookRunPreviewForRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookOK, error)

	GetRunbookRunPreviewForRunbook1(params *GetRunbookRunPreviewForRunbook1Params, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbook1OK, error)

	GetRunbookRunPreviewForRunbookSpaces(params *GetRunbookRunPreviewForRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSpacesOK, error)

	GetRunbookRunPreviewForRunbookSpaces1(params *GetRunbookRunPreviewForRunbookSpaces1Params, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSpaces1OK, error)

	GetRunbookRunTemplateForRunbook(params *GetRunbookRunTemplateForRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunTemplateForRunbookOK, error)

	GetRunbookRunTemplateForRunbookSpaces(params *GetRunbookRunTemplateForRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunTemplateForRunbookSpacesOK, error)

	GetRunbookSnapshotTemplateForRunbook(params *GetRunbookSnapshotTemplateForRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotTemplateForRunbookOK, error)

	GetRunbookSnapshotTemplateForRunbookSpaces(params *GetRunbookSnapshotTemplateForRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotTemplateForRunbookSpacesOK, error)

	IndexProjectRunbooks(params *IndexProjectRunbooksParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectRunbooksOK, error)

	IndexProjectRunbooksSpaces(params *IndexProjectRunbooksSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectRunbooksSpacesOK, error)

	IndexRunbooks(params *IndexRunbooksParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbooksOK, error)

	IndexRunbooksSpaces(params *IndexRunbooksSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbooksSpacesOK, error)

	ListAllRunbooks(params *ListAllRunbooksParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllRunbooksOK, error)

	ListAllRunbooksSpaces(params *ListAllRunbooksSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllRunbooksSpacesOK, error)

	UpdateRunbook(params *UpdateRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunbookOK, error)

	UpdateRunbookSpaces(params *UpdateRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunbookSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRunbook creates a runbook resource

  Creates a new process.
*/
func (a *Client) CreateRunbook(params *CreateRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRunbook",
		Method:             "POST",
		PathPattern:        "/api/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRunbookRunForPublishedRunbookCreate Runs the published version of this Runbook.
*/
func (a *Client) CreateRunbookRunForPublishedRunbookCreate(params *CreateRunbookRunForPublishedRunbookCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookRunForPublishedRunbookCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookRunForPublishedRunbookCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRunbookRunForPublishedRunbookCreate",
		Method:             "POST",
		PathPattern:        "/api/runbooks/{id}/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRunbookRunForPublishedRunbookCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookRunForPublishedRunbookCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunbookRunForPublishedRunbookCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRunbookRunForPublishedRunbookCreateSpaces Runs the published version of this Runbook.
*/
func (a *Client) CreateRunbookRunForPublishedRunbookCreateSpaces(params *CreateRunbookRunForPublishedRunbookCreateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookRunForPublishedRunbookCreateSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookRunForPublishedRunbookCreateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRunbookRunForPublishedRunbookCreate_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRunbookRunForPublishedRunbookCreateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookRunForPublishedRunbookCreateSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunbookRunForPublishedRunbookCreate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRunbookSpaces creates a runbook resource

  Creates a new process.
*/
func (a *Client) CreateRunbookSpaces(params *CreateRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRunbook_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRunbookSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunbook_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRunbook deletes a runbook resource by ID

  Deletes an existing Runbook.
*/
func (a *Client) DeleteRunbook(params *DeleteRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunbookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRunbook",
		Method:             "DELETE",
		PathPattern:        "/api/runbooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRunbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRunbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRunbookSpaces deletes a runbook resource by ID

  Deletes an existing Runbook.
*/
func (a *Client) DeleteRunbookSpaces(params *DeleteRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunbookSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunbookSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRunbook_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRunbookSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRunbookSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRunbook_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookByID gets a runbook resource by ID

  Gets a process by ID.
*/
func (a *Client) GetRunbookByID(params *GetRunbookByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookById",
		Method:             "GET",
		PathPattern:        "/api/runbooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookByIDSpaces gets a runbook resource by ID

  Gets a process by ID.
*/
func (a *Client) GetRunbookByIDSpaces(params *GetRunbookByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookEnvironments Lists all environments a Runbook can be run within based on it's EnvironmentScope.
*/
func (a *Client) GetRunbookEnvironments(params *GetRunbookEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookEnvironments",
		Method:             "GET",
		PathPattern:        "/api/runbooks/{id}/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookEnvironments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookEnvironmentsSpaces Lists all environments a Runbook can be run within based on it's EnvironmentScope.
*/
func (a *Client) GetRunbookEnvironmentsSpaces(params *GetRunbookEnvironmentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookEnvironmentsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookEnvironmentsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookEnvironments_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookEnvironmentsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookEnvironmentsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookEnvironments_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunPreviewForRunbook Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.
*/
func (a *Client) GetRunbookRunPreviewForRunbook(params *GetRunbookRunPreviewForRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunPreviewForRunbookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunPreviewForRunbook",
		Method:             "GET",
		PathPattern:        "/api/runbooks/{id}/runbookRuns/preview/{environment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunPreviewForRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunPreviewForRunbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunPreviewForRunbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunPreviewForRunbook1 Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.
*/
func (a *Client) GetRunbookRunPreviewForRunbook1(params *GetRunbookRunPreviewForRunbook1Params, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbook1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunPreviewForRunbook1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunPreviewForRunbook_1",
		Method:             "GET",
		PathPattern:        "/api/runbooks/{id}/runbookRuns/preview/{environment}/{tenant}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunPreviewForRunbook1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunPreviewForRunbook1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunPreviewForRunbook_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunPreviewForRunbookSpaces Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.
*/
func (a *Client) GetRunbookRunPreviewForRunbookSpaces(params *GetRunbookRunPreviewForRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunPreviewForRunbookSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunPreviewForRunbook_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}/runbookRuns/preview/{environment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunPreviewForRunbookSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunPreviewForRunbookSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunPreviewForRunbook_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunPreviewForRunbookSpaces1 Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.
*/
func (a *Client) GetRunbookRunPreviewForRunbookSpaces1(params *GetRunbookRunPreviewForRunbookSpaces1Params, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSpaces1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunPreviewForRunbookSpaces1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunPreviewForRunbook_Spaces_1",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}/runbookRuns/preview/{environment}/{tenant}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunPreviewForRunbookSpaces1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunPreviewForRunbookSpaces1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunPreviewForRunbook_Spaces_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunTemplateForRunbook Gets all of the information necessary for creating or editing a Runbook Run for this Runbook (when you do not have a snapshot).
*/
func (a *Client) GetRunbookRunTemplateForRunbook(params *GetRunbookRunTemplateForRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunTemplateForRunbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunTemplateForRunbookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunTemplateForRunbook",
		Method:             "GET",
		PathPattern:        "/api/runbooks/{id}/runbookRunTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunTemplateForRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunTemplateForRunbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunTemplateForRunbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunTemplateForRunbookSpaces Gets all of the information necessary for creating or editing a Runbook Run for this Runbook (when you do not have a snapshot).
*/
func (a *Client) GetRunbookRunTemplateForRunbookSpaces(params *GetRunbookRunTemplateForRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunTemplateForRunbookSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunTemplateForRunbookSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunTemplateForRunbook_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}/runbookRunTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunTemplateForRunbookSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunTemplateForRunbookSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunTemplateForRunbook_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookSnapshotTemplateForRunbook Gets all of the information necessary for creating or editing a release using this Runbook.
*/
func (a *Client) GetRunbookSnapshotTemplateForRunbook(params *GetRunbookSnapshotTemplateForRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotTemplateForRunbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookSnapshotTemplateForRunbookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookSnapshotTemplateForRunbook",
		Method:             "GET",
		PathPattern:        "/api/runbooks/{id}/runbookSnapshotTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookSnapshotTemplateForRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookSnapshotTemplateForRunbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookSnapshotTemplateForRunbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookSnapshotTemplateForRunbookSpaces Gets all of the information necessary for creating or editing a release using this Runbook.
*/
func (a *Client) GetRunbookSnapshotTemplateForRunbookSpaces(params *GetRunbookSnapshotTemplateForRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotTemplateForRunbookSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookSnapshotTemplateForRunbookSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookSnapshotTemplateForRunbook_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}/runbookSnapshotTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookSnapshotTemplateForRunbookSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookSnapshotTemplateForRunbookSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookSnapshotTemplateForRunbook_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectRunbooks gets a list of runbook resources for the given project resource

  Lists all of the Runbooks that belong to the given project.
*/
func (a *Client) IndexProjectRunbooks(params *IndexProjectRunbooksParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectRunbooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectRunbooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectRunbooks",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectRunbooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectRunbooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectRunbooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectRunbooksSpaces gets a list of runbook resources for the given project resource

  Lists all of the Runbooks that belong to the given project.
*/
func (a *Client) IndexProjectRunbooksSpaces(params *IndexProjectRunbooksSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectRunbooksSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectRunbooksSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectRunbooks_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectRunbooksSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectRunbooksSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectRunbooks_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexRunbooks gets a list of runbook resources

  Lists all the Runbooks in the supplied Octopus Deploy Space, sorted by Name
*/
func (a *Client) IndexRunbooks(params *IndexRunbooksParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexRunbooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexRunbooks",
		Method:             "GET",
		PathPattern:        "/api/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexRunbooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexRunbooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexRunbooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexRunbooksSpaces gets a list of runbook resources

  Lists all the Runbooks in the supplied Octopus Deploy Space, sorted by Name
*/
func (a *Client) IndexRunbooksSpaces(params *IndexRunbooksSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbooksSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexRunbooksSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexRunbooks_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexRunbooksSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexRunbooksSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexRunbooks_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllRunbooks gets a list of runbook resources

  Lists all of the runbooks in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllRunbooks(params *ListAllRunbooksParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllRunbooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllRunbooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllRunbooks",
		Method:             "GET",
		PathPattern:        "/api/runbooks/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllRunbooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllRunbooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllRunbooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllRunbooksSpaces gets a list of runbook resources

  Lists all of the runbooks in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllRunbooksSpaces(params *ListAllRunbooksSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllRunbooksSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllRunbooksSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllRunbooks_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllRunbooksSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllRunbooksSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllRunbooks_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRunbook modifies a runbook resource by ID

  Modifies a process. Only allowed for processes owned by a project (cannot be used to change the process owned by a release).
*/
func (a *Client) UpdateRunbook(params *UpdateRunbookParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunbookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRunbook",
		Method:             "PUT",
		PathPattern:        "/api/runbooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRunbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRunbookSpaces modifies a runbook resource by ID

  Modifies a process. Only allowed for processes owned by a project (cannot be used to change the process owned by a release).
*/
func (a *Client) UpdateRunbookSpaces(params *UpdateRunbookSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunbookSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunbookSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRunbook_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRunbookSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunbookSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRunbook_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
