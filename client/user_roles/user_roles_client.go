// Code generated by go-swagger; DO NOT EDIT.

package user_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserRole(params *CreateUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserRoleCreated, error)

	DeleteUserRole(params *DeleteUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserRoleOK, error)

	GetUserRoleByID(params *GetUserRoleByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRoleByIDOK, error)

	IndexUserRoles(params *IndexUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexUserRolesOK, error)

	ListAllUserRoles(params *ListAllUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllUserRolesOK, error)

	UpdateUserRole(params *UpdateUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserRoleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUserRole creates a user role resource

  Creates a custom user role definition.
*/
func (a *Client) CreateUserRole(params *CreateUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserRole",
		Method:             "POST",
		PathPattern:        "/api/userroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserRoleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserRole deletes a user role resource by ID

  Deletes an existing user role.
*/
func (a *Client) DeleteUserRole(params *DeleteUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserRole",
		Method:             "DELETE",
		PathPattern:        "/api/userroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserRoleByID gets a user role resource by ID

  Gets a single user role by ID.
*/
func (a *Client) GetUserRoleByID(params *GetUserRoleByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRoleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRoleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoleById",
		Method:             "GET",
		PathPattern:        "/api/userroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserRoleByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRoleByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserRoleById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexUserRoles gets a list of user role resources

  Lists all of the user roles in the current Octopus Deploy instance. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexUserRoles(params *IndexUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexUserRoles",
		Method:             "GET",
		PathPattern:        "/api/userroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllUserRoles gets a list of user role resources

  Lists all of the user roles in the current Octopus Deploy instance. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllUserRoles(params *ListAllUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllUserRoles",
		Method:             "GET",
		PathPattern:        "/api/userroles/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserRole modifies a user role resource by ID

  Modifies an existing user role definition.
*/
func (a *Client) UpdateUserRole(params *UpdateUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserRole",
		Method:             "PUT",
		PathPattern:        "/api/userroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
