// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"models"
)

// NewUpdateReleaseParams creates a new UpdateReleaseParams object
// with the default values initialized.
func NewUpdateReleaseParams() *UpdateReleaseParams {
	var ()
	return &UpdateReleaseParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateReleaseParamsWithTimeout creates a new UpdateReleaseParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateReleaseParamsWithTimeout(timeout time.Duration) *UpdateReleaseParams {
	var ()
	return &UpdateReleaseParams{

		timeout: timeout,
	}
}

// NewUpdateReleaseParamsWithContext creates a new UpdateReleaseParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateReleaseParamsWithContext(ctx context.Context) *UpdateReleaseParams {
	var ()
	return &UpdateReleaseParams{

		Context: ctx,
	}
}

// NewUpdateReleaseParamsWithHTTPClient creates a new UpdateReleaseParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateReleaseParamsWithHTTPClient(client *http.Client) *UpdateReleaseParams {
	var ()
	return &UpdateReleaseParams{
		HTTPClient: client,
	}
}

/*UpdateReleaseParams contains all the parameters to send to the API endpoint
for the update release operation typically these are written to a http.Request
*/
type UpdateReleaseParams struct {

	/*ReleaseResource
	  The ReleaseResource resource to create

	*/
	ReleaseResource *models.ReleaseResource
	/*ID
	  ID of the ReleaseResource to modify

	*/
	ID string
	/*IgnoreChannelRules
	  Ignore channel rules.

	*/
	IgnoreChannelRules *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update release params
func (o *UpdateReleaseParams) WithTimeout(timeout time.Duration) *UpdateReleaseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update release params
func (o *UpdateReleaseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update release params
func (o *UpdateReleaseParams) WithContext(ctx context.Context) *UpdateReleaseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update release params
func (o *UpdateReleaseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update release params
func (o *UpdateReleaseParams) WithHTTPClient(client *http.Client) *UpdateReleaseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update release params
func (o *UpdateReleaseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithReleaseResource adds the releaseResource to the update release params
func (o *UpdateReleaseParams) WithReleaseResource(releaseResource *models.ReleaseResource) *UpdateReleaseParams {
	o.SetReleaseResource(releaseResource)
	return o
}

// SetReleaseResource adds the releaseResource to the update release params
func (o *UpdateReleaseParams) SetReleaseResource(releaseResource *models.ReleaseResource) {
	o.ReleaseResource = releaseResource
}

// WithID adds the id to the update release params
func (o *UpdateReleaseParams) WithID(id string) *UpdateReleaseParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update release params
func (o *UpdateReleaseParams) SetID(id string) {
	o.ID = id
}

// WithIgnoreChannelRules adds the ignoreChannelRules to the update release params
func (o *UpdateReleaseParams) WithIgnoreChannelRules(ignoreChannelRules *bool) *UpdateReleaseParams {
	o.SetIgnoreChannelRules(ignoreChannelRules)
	return o
}

// SetIgnoreChannelRules adds the ignoreChannelRules to the update release params
func (o *UpdateReleaseParams) SetIgnoreChannelRules(ignoreChannelRules *bool) {
	o.IgnoreChannelRules = ignoreChannelRules
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateReleaseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ReleaseResource != nil {
		if err := r.SetBodyParam(o.ReleaseResource); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IgnoreChannelRules != nil {

		// query param ignoreChannelRules
		var qrIgnoreChannelRules bool
		if o.IgnoreChannelRules != nil {
			qrIgnoreChannelRules = *o.IgnoreChannelRules
		}
		qIgnoreChannelRules := swag.FormatBool(qrIgnoreChannelRules)
		if qIgnoreChannelRules != "" {
			if err := r.SetQueryParam("ignoreChannelRules", qIgnoreChannelRules); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
