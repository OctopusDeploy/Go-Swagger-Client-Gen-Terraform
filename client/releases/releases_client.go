// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new releases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for releases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDefectReported(params *CreateDefectReportedParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDefectReportedOK, error)

	CreateDefectReportedSpaces(params *CreateDefectReportedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDefectReportedSpacesOK, error)

	CreateDefectResolved(params *CreateDefectResolvedParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDefectResolvedOK, error)

	CreateDefectResolvedSpaces(params *CreateDefectResolvedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDefectResolvedSpacesOK, error)

	CreateDeploymentPreviewCollection(params *CreateDeploymentPreviewCollectionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentPreviewCollectionOK, error)

	CreateDeploymentPreviewCollectionSpaces(params *CreateDeploymentPreviewCollectionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentPreviewCollectionSpacesOK, error)

	CreateRelease(params *CreateReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReleaseCreated, error)

	CreateReleaseSnapshotVariables(params *CreateReleaseSnapshotVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReleaseSnapshotVariablesOK, error)

	CreateReleaseSnapshotVariablesSpaces(params *CreateReleaseSnapshotVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReleaseSnapshotVariablesSpacesOK, error)

	CreateReleaseSpaces(params *CreateReleaseSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReleaseSpacesCreated, error)

	DeleteRelease(params *DeleteReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReleaseOK, error)

	DeleteReleaseSpaces(params *DeleteReleaseSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReleaseSpacesOK, error)

	GetDeploymentPreview(params *GetDeploymentPreviewParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentPreviewOK, error)

	GetDeploymentPreview1(params *GetDeploymentPreview1Params, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentPreview1OK, error)

	GetDeploymentPreviewSpaces(params *GetDeploymentPreviewSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentPreviewSpacesOK, error)

	GetDeploymentPreviewSpaces1(params *GetDeploymentPreviewSpaces1Params, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentPreviewSpaces1OK, error)

	GetDeploymentTemplate(params *GetDeploymentTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentTemplateOK, error)

	GetDeploymentTemplateSpaces(params *GetDeploymentTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentTemplateSpacesOK, error)

	GetListDefects(params *GetListDefectsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListDefectsOK, error)

	GetListDefectsSpaces(params *GetListDefectsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListDefectsSpacesOK, error)

	GetReleaseByID(params *GetReleaseByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseByIDOK, error)

	GetReleaseByIDSpaces(params *GetReleaseByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseByIDSpacesOK, error)

	GetReleaseByProjectAndVersion(params *GetReleaseByProjectAndVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseByProjectAndVersionOK, error)

	GetReleaseByProjectAndVersionSpaces(params *GetReleaseByProjectAndVersionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseByProjectAndVersionSpacesOK, error)

	GetReleaseLifecycleProgression(params *GetReleaseLifecycleProgressionParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseLifecycleProgressionOK, error)

	GetReleaseLifecycleProgressionSpaces(params *GetReleaseLifecycleProgressionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseLifecycleProgressionSpacesOK, error)

	IndexProjectReleases(params *IndexProjectReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectReleasesOK, error)

	IndexProjectReleasesSpaces(params *IndexProjectReleasesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectReleasesSpacesOK, error)

	IndexReleaseDeployments(params *IndexReleaseDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexReleaseDeploymentsOK, error)

	IndexReleaseDeploymentsSpaces(params *IndexReleaseDeploymentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexReleaseDeploymentsSpacesOK, error)

	IndexReleases(params *IndexReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexReleasesOK, error)

	IndexReleasesSpaces(params *IndexReleasesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexReleasesSpacesOK, error)

	UpdateRelease(params *UpdateReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReleaseOK, error)

	UpdateReleaseSpaces(params *UpdateReleaseSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReleaseSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDefectReported Record defect in a release.
*/
func (a *Client) CreateDefectReported(params *CreateDefectReportedParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDefectReportedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDefectReportedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDefectReported",
		Method:             "POST",
		PathPattern:        "/api/releases/{id}/defects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDefectReportedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDefectReportedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDefectReported: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDefectReportedSpaces Record defect in a release.
*/
func (a *Client) CreateDefectReportedSpaces(params *CreateDefectReportedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDefectReportedSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDefectReportedSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDefectReported_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/defects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDefectReportedSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDefectReportedSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDefectReported_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDefectResolved Update or resolve defect in a release.
*/
func (a *Client) CreateDefectResolved(params *CreateDefectResolvedParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDefectResolvedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDefectResolvedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDefectResolved",
		Method:             "POST",
		PathPattern:        "/api/releases/{id}/defects/resolve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDefectResolvedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDefectResolvedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDefectResolved: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDefectResolvedSpaces Update or resolve defect in a release.
*/
func (a *Client) CreateDefectResolvedSpaces(params *CreateDefectResolvedSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDefectResolvedSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDefectResolvedSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDefectResolved_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/defects/resolve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDefectResolvedSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDefectResolvedSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDefectResolved_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDeploymentPreviewCollection Returns an array of documents that describes what steps will/won't be run during deployments to a given set of environments and tenants.
*/
func (a *Client) CreateDeploymentPreviewCollection(params *CreateDeploymentPreviewCollectionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentPreviewCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeploymentPreviewCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDeploymentPreviewCollection",
		Method:             "POST",
		PathPattern:        "/api/releases/{id}/deployments/previews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeploymentPreviewCollectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeploymentPreviewCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDeploymentPreviewCollection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDeploymentPreviewCollectionSpaces Returns an array of documents that describes what steps will/won't be run during deployments to a given set of environments and tenants.
*/
func (a *Client) CreateDeploymentPreviewCollectionSpaces(params *CreateDeploymentPreviewCollectionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentPreviewCollectionSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeploymentPreviewCollectionSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDeploymentPreviewCollection_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/deployments/previews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeploymentPreviewCollectionSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeploymentPreviewCollectionSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDeploymentPreviewCollection_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRelease creates a release resource

  Creates a new release.
*/
func (a *Client) CreateRelease(params *CreateReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReleaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRelease",
		Method:             "POST",
		PathPattern:        "/api/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReleaseCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateReleaseSnapshotVariables Refresh the variable snapshots associated with the release. The project's deployment process must not have changed since the release was created.
*/
func (a *Client) CreateReleaseSnapshotVariables(params *CreateReleaseSnapshotVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReleaseSnapshotVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReleaseSnapshotVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createReleaseSnapshotVariables",
		Method:             "POST",
		PathPattern:        "/api/releases/{id}/snapshot-variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReleaseSnapshotVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReleaseSnapshotVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createReleaseSnapshotVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateReleaseSnapshotVariablesSpaces Refresh the variable snapshots associated with the release. The project's deployment process must not have changed since the release was created.
*/
func (a *Client) CreateReleaseSnapshotVariablesSpaces(params *CreateReleaseSnapshotVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReleaseSnapshotVariablesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReleaseSnapshotVariablesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createReleaseSnapshotVariables_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/snapshot-variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReleaseSnapshotVariablesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReleaseSnapshotVariablesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createReleaseSnapshotVariables_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateReleaseSpaces creates a release resource

  Creates a new release.
*/
func (a *Client) CreateReleaseSpaces(params *CreateReleaseSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReleaseSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReleaseSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRelease_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReleaseSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReleaseSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRelease_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRelease deletes a release resource by ID

  Deletes an existing release, along with all of the deployments, tasks and other associated resources belonging to the release.
*/
func (a *Client) DeleteRelease(params *DeleteReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRelease",
		Method:             "DELETE",
		PathPattern:        "/api/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteReleaseSpaces deletes a release resource by ID

  Deletes an existing release, along with all of the deployments, tasks and other associated resources belonging to the release.
*/
func (a *Client) DeleteReleaseSpaces(params *DeleteReleaseSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReleaseSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReleaseSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRelease_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReleaseSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReleaseSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRelease_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentPreview Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).
*/
func (a *Client) GetDeploymentPreview(params *GetDeploymentPreviewParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentPreviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentPreviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentPreview",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/deployments/preview/{environment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentPreviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentPreviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentPreview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentPreview1 Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).
*/
func (a *Client) GetDeploymentPreview1(params *GetDeploymentPreview1Params, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentPreview1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentPreview1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentPreview_1",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/deployments/preview/{environment}/{tenant}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentPreview1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentPreview1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentPreview_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentPreviewSpaces Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).
*/
func (a *Client) GetDeploymentPreviewSpaces(params *GetDeploymentPreviewSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentPreviewSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentPreviewSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentPreview_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/deployments/preview/{environment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentPreviewSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentPreviewSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentPreview_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentPreviewSpaces1 Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).
*/
func (a *Client) GetDeploymentPreviewSpaces1(params *GetDeploymentPreviewSpaces1Params, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentPreviewSpaces1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentPreviewSpaces1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentPreview_Spaces_1",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/deployments/preview/{environment}/{tenant}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentPreviewSpaces1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentPreviewSpaces1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentPreview_Spaces_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentTemplate Gets all of the information necessary for creating or editing a deployment for this release.
*/
func (a *Client) GetDeploymentTemplate(params *GetDeploymentTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentTemplate",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/deployments/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentTemplateSpaces Gets all of the information necessary for creating or editing a deployment for this release.
*/
func (a *Client) GetDeploymentTemplateSpaces(params *GetDeploymentTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentTemplateSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentTemplateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentTemplate_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/deployments/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentTemplateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentTemplateSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentTemplate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListDefects Gets all defects for a release.
*/
func (a *Client) GetListDefects(params *GetListDefectsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListDefectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListDefectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListDefects",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/defects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListDefectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListDefectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListDefects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListDefectsSpaces Gets all defects for a release.
*/
func (a *Client) GetListDefectsSpaces(params *GetListDefectsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListDefectsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListDefectsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListDefects_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/defects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListDefectsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListDefectsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListDefects_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseByID gets a release resource by ID

  Gets a release by ID.
*/
func (a *Client) GetReleaseByID(params *GetReleaseByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseById",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseByIDSpaces gets a release resource by ID

  Gets a release by ID.
*/
func (a *Client) GetReleaseByIDSpaces(params *GetReleaseByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseByProjectAndVersion Gets a single release by project ID and version number.
*/
func (a *Client) GetReleaseByProjectAndVersion(params *GetReleaseByProjectAndVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseByProjectAndVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseByProjectAndVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseByProjectAndVersion",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/releases/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseByProjectAndVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseByProjectAndVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseByProjectAndVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseByProjectAndVersionSpaces Gets a single release by project ID and version number.
*/
func (a *Client) GetReleaseByProjectAndVersionSpaces(params *GetReleaseByProjectAndVersionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseByProjectAndVersionSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseByProjectAndVersionSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseByProjectAndVersion_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/releases/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseByProjectAndVersionSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseByProjectAndVersionSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseByProjectAndVersion_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseLifecycleProgression Gets all of the information necessary for creating or editing a deployment for this release.
*/
func (a *Client) GetReleaseLifecycleProgression(params *GetReleaseLifecycleProgressionParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseLifecycleProgressionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseLifecycleProgressionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseLifecycleProgression",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/progression",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseLifecycleProgressionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseLifecycleProgressionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseLifecycleProgression: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseLifecycleProgressionSpaces Gets all of the information necessary for creating or editing a deployment for this release.
*/
func (a *Client) GetReleaseLifecycleProgressionSpaces(params *GetReleaseLifecycleProgressionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseLifecycleProgressionSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseLifecycleProgressionSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseLifecycleProgression_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/progression",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseLifecycleProgressionSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseLifecycleProgressionSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseLifecycleProgression_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectReleases gets a list of release resources for the given project resource

  Lists all of the releases that belong to the given project. Releases will be ordered from most recent to least recent.
*/
func (a *Client) IndexProjectReleases(params *IndexProjectReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectReleasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectReleases",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectReleasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectReleasesSpaces gets a list of release resources for the given project resource

  Lists all of the releases that belong to the given project. Releases will be ordered from most recent to least recent.
*/
func (a *Client) IndexProjectReleasesSpaces(params *IndexProjectReleasesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectReleasesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectReleasesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectReleases_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectReleasesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectReleasesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectReleases_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexReleaseDeployments gets a list of deployment resources for the given release resource

  Lists all of the deployments that belong to the given release. Deployments will be ordered from most recent to least recent.
*/
func (a *Client) IndexReleaseDeployments(params *IndexReleaseDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexReleaseDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexReleaseDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexReleaseDeployments",
		Method:             "GET",
		PathPattern:        "/api/releases/{id}/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexReleaseDeploymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexReleaseDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexReleaseDeployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexReleaseDeploymentsSpaces gets a list of deployment resources for the given release resource

  Lists all of the deployments that belong to the given release. Deployments will be ordered from most recent to least recent.
*/
func (a *Client) IndexReleaseDeploymentsSpaces(params *IndexReleaseDeploymentsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexReleaseDeploymentsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexReleaseDeploymentsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexReleaseDeployments_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexReleaseDeploymentsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexReleaseDeploymentsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexReleaseDeployments_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexReleases gets a list of release resources

  Lists all of the releases in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent release.
*/
func (a *Client) IndexReleases(params *IndexReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexReleasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexReleases",
		Method:             "GET",
		PathPattern:        "/api/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexReleasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexReleasesSpaces gets a list of release resources

  Lists all of the releases in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent release.
*/
func (a *Client) IndexReleasesSpaces(params *IndexReleasesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexReleasesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexReleasesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexReleases_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexReleasesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexReleasesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexReleases_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRelease modifies a release resource by ID

  Updates an existing release.
*/
func (a *Client) UpdateRelease(params *UpdateReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRelease",
		Method:             "PUT",
		PathPattern:        "/api/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateReleaseSpaces modifies a release resource by ID

  Updates an existing release.
*/
func (a *Client) UpdateReleaseSpaces(params *UpdateReleaseSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReleaseSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReleaseSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRelease_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReleaseSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReleaseSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRelease_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
