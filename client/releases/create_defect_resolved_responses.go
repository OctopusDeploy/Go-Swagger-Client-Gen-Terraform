// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"models"
)

// CreateDefectResolvedReader is a Reader for the CreateDefectResolved structure.
type CreateDefectResolvedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDefectResolvedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDefectResolvedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateDefectResolvedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateDefectResolvedOK creates a CreateDefectResolvedOK with default headers values
func NewCreateDefectResolvedOK() *CreateDefectResolvedOK {
	return &CreateDefectResolvedOK{}
}

/*CreateDefectResolvedOK handles this case with default header values.

DefectResource resource returned
*/
type CreateDefectResolvedOK struct {
	Payload *models.DefectResource
}

func (o *CreateDefectResolvedOK) Error() string {
	return fmt.Sprintf("[POST /api/releases/{id}/defects/resolve][%d] createDefectResolvedOK  %+v", 200, o.Payload)
}

func (o *CreateDefectResolvedOK) GetPayload() *models.DefectResource {
	return o.Payload
}

func (o *CreateDefectResolvedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DefectResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDefectResolvedBadRequest creates a CreateDefectResolvedBadRequest with default headers values
func NewCreateDefectResolvedBadRequest() *CreateDefectResolvedBadRequest {
	return &CreateDefectResolvedBadRequest{}
}

/*CreateDefectResolvedBadRequest handles this case with default header values.

Defect has already been resolved.
Index refers to an invalid defect.
No id parameter was provided.
*/
type CreateDefectResolvedBadRequest struct {
}

func (o *CreateDefectResolvedBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/releases/{id}/defects/resolve][%d] createDefectResolvedBadRequest ", 400)
}

func (o *CreateDefectResolvedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
