// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserCreate(params *CreateUserCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserCreateCreated, error)

	CreateUserLogin(params *CreateUserLoginParams) (*CreateUserLoginOK, error)

	CreateUserLogout(params *CreateUserLogoutParams) (*CreateUserLogoutOK, error)

	CreateUserRegister(params *CreateUserRegisterParams) (*CreateUserRegisterOK, error)

	DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserOK, error)

	GetUserAuthentication(params *GetUserAuthenticationParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserAuthenticationOK, error)

	GetUserAuthentication1(params *GetUserAuthentication1Params, authInfo runtime.ClientAuthInfoWriter) (*GetUserAuthentication1OK, error)

	GetUserByID(params *GetUserByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserByIDOK, error)

	GetUserExternalSearch(params *GetUserExternalSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserExternalSearchOK, error)

	GetUserGetCurrent(params *GetUserGetCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetCurrentOK, error)

	GetUserGetSpaces(params *GetUserGetSpacesParams, authInfo runtime.ClientAuthInfoWriter) error

	GetUserIdentityMetadata(params *GetUserIdentityMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserIdentityMetadataOK, error)

	IndexUsers(params *IndexUsersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexUsersOK, error)

	ListAllUsers(params *ListAllUsersParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllUsersOK, error)

	UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUserCreate Creates a new user.
*/
func (a *Client) CreateUserCreate(params *CreateUserCreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserCreate",
		Method:             "POST",
		PathPattern:        "/api/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserLogin Authenticates a user and returns a response with a cookie for the current user. This cookie can be submitted with future requests to avoid re-authentication.
*/
func (a *Client) CreateUserLogin(params *CreateUserLoginParams) (*CreateUserLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserLogin",
		Method:             "POST",
		PathPattern:        "/api/users/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserLogout Revokes the authentication cookie from the current session.
*/
func (a *Client) CreateUserLogout(params *CreateUserLogoutParams) (*CreateUserLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserLogout",
		Method:             "POST",
		PathPattern:        "/api/users/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserLogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserLogout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserRegister Registers a new user and responds with an authentication cookie. Unless the first administrator user is being registered, an invitation code must be provided.
*/
func (a *Client) CreateUserRegister(params *CreateUserRegisterParams) (*CreateUserRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserRegister",
		Method:             "POST",
		PathPattern:        "/api/users/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserRegisterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserRegister: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUser deletes a user resource by ID

  Delete an existing user.
*/
func (a *Client) DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserAuthentication Provides the details of the enabled authentication providers and whether the current user can edit logins for the given user.
*/
func (a *Client) GetUserAuthentication(params *GetUserAuthenticationParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserAuthenticationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAuthenticationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserAuthentication",
		Method:             "GET",
		PathPattern:        "/api/users/authentication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserAuthenticationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAuthenticationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserAuthentication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserAuthentication1 Provides the details of the enabled authentication providers and whether the current user can edit logins for the given user.
*/
func (a *Client) GetUserAuthentication1(params *GetUserAuthentication1Params, authInfo runtime.ClientAuthInfoWriter) (*GetUserAuthentication1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAuthentication1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserAuthentication_1",
		Method:             "GET",
		PathPattern:        "/api/users/authentication/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserAuthentication1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAuthentication1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserAuthentication_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserByID gets a user resource by ID

  Gets a single user by ID.
*/
func (a *Client) GetUserByID(params *GetUserByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserById",
		Method:             "GET",
		PathPattern:        "/api/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserExternalSearch Searches for users, using the authentication providers.
*/
func (a *Client) GetUserExternalSearch(params *GetUserExternalSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserExternalSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserExternalSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserExternalSearch",
		Method:             "GET",
		PathPattern:        "/api/users/external-search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserExternalSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserExternalSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserExternalSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserGetCurrent Gets information about the current user.
*/
func (a *Client) GetUserGetCurrent(params *GetUserGetCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserGetCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGetCurrentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGetCurrent",
		Method:             "GET",
		PathPattern:        "/api/users/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGetCurrentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGetCurrentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGetCurrent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserGetSpaces Gets a list of spaces available to the current authenticated user only.
*/
func (a *Client) GetUserGetSpaces(params *GetUserGetSpacesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGetSpacesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGetSpaces",
		Method:             "GET",
		PathPattern:        "/api/users/{id}/spaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGetSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetUserIdentityMetadata Gets the metadata to describe the claims/fields used by authentication providers that support identities.
*/
func (a *Client) GetUserIdentityMetadata(params *GetUserIdentityMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserIdentityMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserIdentityMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserIdentityMetadata",
		Method:             "GET",
		PathPattern:        "/api/users/identity-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserIdentityMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserIdentityMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserIdentityMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexUsers gets a list of user resources

  Lists all of the users in the current Octopus Deploy instance, from all teams. The results will be sorted alphabetically by username.
*/
func (a *Client) IndexUsers(params *IndexUsersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexUsers",
		Method:             "GET",
		PathPattern:        "/api/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllUsers gets a list of user resources

  Lists all of the users in the supplied Octopus Deploy Space. The results will be sorted alphabetically by `Username`.
*/
func (a *Client) ListAllUsers(params *ListAllUsersParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllUsers",
		Method:             "GET",
		PathPattern:        "/api/users/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUser Modifies an existing user.
*/
func (a *Client) UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUser",
		Method:             "PUT",
		PathPattern:        "/api/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
