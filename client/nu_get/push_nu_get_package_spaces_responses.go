// Code generated by go-swagger; DO NOT EDIT.

package nu_get

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PushNuGetPackageSpacesReader is a Reader for the PushNuGetPackageSpaces structure.
type PushNuGetPackageSpacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PushNuGetPackageSpacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPushNuGetPackageSpacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPushNuGetPackageSpacesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPushNuGetPackageSpacesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPushNuGetPackageSpacesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPushNuGetPackageSpacesOK creates a PushNuGetPackageSpacesOK with default headers values
func NewPushNuGetPackageSpacesOK() *PushNuGetPackageSpacesOK {
	return &PushNuGetPackageSpacesOK{}
}

/*PushNuGetPackageSpacesOK handles this case with default header values.

OK
*/
type PushNuGetPackageSpacesOK struct {
}

func (o *PushNuGetPackageSpacesOK) Error() string {
	return fmt.Sprintf("[PUT /{baseSpaceId}/nuget/packages][%d] pushNuGetPackageSpacesOK ", 200)
}

func (o *PushNuGetPackageSpacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushNuGetPackageSpacesCreated creates a PushNuGetPackageSpacesCreated with default headers values
func NewPushNuGetPackageSpacesCreated() *PushNuGetPackageSpacesCreated {
	return &PushNuGetPackageSpacesCreated{}
}

/*PushNuGetPackageSpacesCreated handles this case with default header values.

Created
*/
type PushNuGetPackageSpacesCreated struct {
}

func (o *PushNuGetPackageSpacesCreated) Error() string {
	return fmt.Sprintf("[PUT /{baseSpaceId}/nuget/packages][%d] pushNuGetPackageSpacesCreated ", 201)
}

func (o *PushNuGetPackageSpacesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushNuGetPackageSpacesBadRequest creates a PushNuGetPackageSpacesBadRequest with default headers values
func NewPushNuGetPackageSpacesBadRequest() *PushNuGetPackageSpacesBadRequest {
	return &PushNuGetPackageSpacesBadRequest{}
}

/*PushNuGetPackageSpacesBadRequest handles this case with default header values.

A package file must be provided
Package Name is too long.
The uploaded package file had length equal to 0. Please upload a non-empty file.
*/
type PushNuGetPackageSpacesBadRequest struct {
}

func (o *PushNuGetPackageSpacesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /{baseSpaceId}/nuget/packages][%d] pushNuGetPackageSpacesBadRequest ", 400)
}

func (o *PushNuGetPackageSpacesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushNuGetPackageSpacesConflict creates a PushNuGetPackageSpacesConflict with default headers values
func NewPushNuGetPackageSpacesConflict() *PushNuGetPackageSpacesConflict {
	return &PushNuGetPackageSpacesConflict{}
}

/*PushNuGetPackageSpacesConflict handles this case with default header values.

A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists.
*/
type PushNuGetPackageSpacesConflict struct {
}

func (o *PushNuGetPackageSpacesConflict) Error() string {
	return fmt.Sprintf("[PUT /{baseSpaceId}/nuget/packages][%d] pushNuGetPackageSpacesConflict ", 409)
}

func (o *PushNuGetPackageSpacesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
