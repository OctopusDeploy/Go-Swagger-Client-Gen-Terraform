// Code generated by go-swagger; DO NOT EDIT.

package lets_encrypt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetLetsEncryptHTTPChallengeReader is a Reader for the GetLetsEncryptHTTPChallenge structure.
type GetLetsEncryptHTTPChallengeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLetsEncryptHTTPChallengeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLetsEncryptHTTPChallengeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLetsEncryptHTTPChallengeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLetsEncryptHTTPChallengeOK creates a GetLetsEncryptHTTPChallengeOK with default headers values
func NewGetLetsEncryptHTTPChallengeOK() *GetLetsEncryptHTTPChallengeOK {
	return &GetLetsEncryptHTTPChallengeOK{}
}

/*GetLetsEncryptHTTPChallengeOK handles this case with default header values.

OK
*/
type GetLetsEncryptHTTPChallengeOK struct {
}

func (o *GetLetsEncryptHTTPChallengeOK) Error() string {
	return fmt.Sprintf("[GET /.well-known/acme-challenge//{token}][%d] getLetsEncryptHttpChallengeOK ", 200)
}

func (o *GetLetsEncryptHTTPChallengeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLetsEncryptHTTPChallengeBadRequest creates a GetLetsEncryptHTTPChallengeBadRequest with default headers values
func NewGetLetsEncryptHTTPChallengeBadRequest() *GetLetsEncryptHTTPChallengeBadRequest {
	return &GetLetsEncryptHTTPChallengeBadRequest{}
}

/*GetLetsEncryptHTTPChallengeBadRequest handles this case with default header values.

No token parameter was provided.
*/
type GetLetsEncryptHTTPChallengeBadRequest struct {
}

func (o *GetLetsEncryptHTTPChallengeBadRequest) Error() string {
	return fmt.Sprintf("[GET /.well-known/acme-challenge//{token}][%d] getLetsEncryptHttpChallengeBadRequest ", 400)
}

func (o *GetLetsEncryptHTTPChallengeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
