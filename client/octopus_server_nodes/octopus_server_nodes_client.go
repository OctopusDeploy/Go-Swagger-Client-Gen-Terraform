// Code generated by go-swagger; DO NOT EDIT.

package octopus_server_nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new octopus server nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for octopus server nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOctopusServerNode(params *DeleteOctopusServerNodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOctopusServerNodeOK, error)

	GetLoadBalancerPing(params *GetLoadBalancerPingParams) (*GetLoadBalancerPingOK, error)

	GetOctopusServerClusterSummary(params *GetOctopusServerClusterSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusServerClusterSummaryOK, error)

	GetOctopusServerNodeByID(params *GetOctopusServerNodeByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusServerNodeByIDOK, error)

	GetOctopusServerNodeDetails(params *GetOctopusServerNodeDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusServerNodeDetailsOK, error)

	IndexOctopusServerNodes(params *IndexOctopusServerNodesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexOctopusServerNodesOK, error)

	ListAllOctopusServerNodes(params *ListAllOctopusServerNodesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllOctopusServerNodesOK, error)

	UpdateOctopusServerNode(params *UpdateOctopusServerNodeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOctopusServerNodeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteOctopusServerNode deletes a octopus server node resource by ID

  Deletes an Octopus Server node.
*/
func (a *Client) DeleteOctopusServerNode(params *DeleteOctopusServerNodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOctopusServerNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOctopusServerNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOctopusServerNode",
		Method:             "DELETE",
		PathPattern:        "/api/octopusservernodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOctopusServerNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOctopusServerNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOctopusServerNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLoadBalancerPing Returns HTTP ImATeapot (418) when the Octopus Server node is draining or offline, otherwise HTTP OK (200). Always returns the node information in the body.
*/
func (a *Client) GetLoadBalancerPing(params *GetLoadBalancerPingParams) (*GetLoadBalancerPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoadBalancerPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLoadBalancerPing",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoadBalancerPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoadBalancerPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoadBalancerPing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOctopusServerClusterSummary Returns all nodes, with status information
*/
func (a *Client) GetOctopusServerClusterSummary(params *GetOctopusServerClusterSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusServerClusterSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOctopusServerClusterSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOctopusServerClusterSummary",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOctopusServerClusterSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOctopusServerClusterSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOctopusServerClusterSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOctopusServerNodeByID gets a octopus server node resource by ID

  Gets an Octopus Server node by ID.
*/
func (a *Client) GetOctopusServerNodeByID(params *GetOctopusServerNodeByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusServerNodeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOctopusServerNodeByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOctopusServerNodeById",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOctopusServerNodeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOctopusServerNodeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOctopusServerNodeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOctopusServerNodeDetails A count of the running tasks per node.
*/
func (a *Client) GetOctopusServerNodeDetails(params *GetOctopusServerNodeDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOctopusServerNodeDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOctopusServerNodeDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOctopusServerNodeDetails",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes/{id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOctopusServerNodeDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOctopusServerNodeDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOctopusServerNodeDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexOctopusServerNodes gets a list of octopus server node resources

  List all of the Octopus Server nodes participating in the current Octopus Server cluster.
*/
func (a *Client) IndexOctopusServerNodes(params *IndexOctopusServerNodesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexOctopusServerNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexOctopusServerNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexOctopusServerNodes",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexOctopusServerNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexOctopusServerNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexOctopusServerNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllOctopusServerNodes gets a list of octopus server node resources

  Lists the name and ID of all Octopus Server nodes.
*/
func (a *Client) ListAllOctopusServerNodes(params *ListAllOctopusServerNodesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllOctopusServerNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllOctopusServerNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllOctopusServerNodes",
		Method:             "GET",
		PathPattern:        "/api/octopusservernodes/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllOctopusServerNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllOctopusServerNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllOctopusServerNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOctopusServerNode modifies a octopus server node resource by ID

  Modifies an Octopus Server node.
*/
func (a *Client) UpdateOctopusServerNode(params *UpdateOctopusServerNodeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOctopusServerNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOctopusServerNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOctopusServerNode",
		Method:             "PUT",
		PathPattern:        "/api/octopusservernodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOctopusServerNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOctopusServerNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOctopusServerNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
