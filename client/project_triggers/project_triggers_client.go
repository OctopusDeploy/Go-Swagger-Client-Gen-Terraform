// Code generated by go-swagger; DO NOT EDIT.

package project_triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project triggers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project triggers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProjectTrigger(params *CreateProjectTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectTriggerCreated, error)

	CreateProjectTriggerSpaces(params *CreateProjectTriggerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectTriggerSpacesCreated, error)

	DeleteProjectTrigger(params *DeleteProjectTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectTriggerOK, error)

	DeleteProjectTriggerSpaces(params *DeleteProjectTriggerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectTriggerSpacesOK, error)

	GetProjectTriggerByID(params *GetProjectTriggerByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectTriggerByIDOK, error)

	GetProjectTriggerByIDSpaces(params *GetProjectTriggerByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectTriggerByIDSpacesOK, error)

	IndexProjectProjectTriggers(params *IndexProjectProjectTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectProjectTriggersOK, error)

	IndexProjectProjectTriggersSpaces(params *IndexProjectProjectTriggersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectProjectTriggersSpacesOK, error)

	IndexProjectTriggers(params *IndexProjectTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectTriggersOK, error)

	IndexProjectTriggersSpaces(params *IndexProjectTriggersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectTriggersSpacesOK, error)

	UpdateProjectTrigger(params *UpdateProjectTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectTriggerOK, error)

	UpdateProjectTriggerSpaces(params *UpdateProjectTriggerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectTriggerSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateProjectTrigger creates a project trigger resource

  Creates a new project trigger
*/
func (a *Client) CreateProjectTrigger(params *CreateProjectTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectTriggerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectTrigger",
		Method:             "POST",
		PathPattern:        "/api/projecttriggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectTriggerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectTriggerSpaces creates a project trigger resource

  Creates a new project trigger
*/
func (a *Client) CreateProjectTriggerSpaces(params *CreateProjectTriggerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectTriggerSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectTriggerSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectTrigger_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/projecttriggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectTriggerSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectTriggerSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectTrigger_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProjectTrigger deletes a project trigger resource by ID

  Deletes an existing project trigger.
*/
func (a *Client) DeleteProjectTrigger(params *DeleteProjectTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProjectTrigger",
		Method:             "DELETE",
		PathPattern:        "/api/projecttriggers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProjectTriggerSpaces deletes a project trigger resource by ID

  Deletes an existing project trigger.
*/
func (a *Client) DeleteProjectTriggerSpaces(params *DeleteProjectTriggerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectTriggerSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectTriggerSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProjectTrigger_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/projecttriggers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectTriggerSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectTriggerSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectTrigger_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectTriggerByID gets a project trigger resource by ID

  Get a project trigger
*/
func (a *Client) GetProjectTriggerByID(params *GetProjectTriggerByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectTriggerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectTriggerByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectTriggerById",
		Method:             "GET",
		PathPattern:        "/api/projecttriggers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectTriggerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectTriggerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectTriggerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectTriggerByIDSpaces gets a project trigger resource by ID

  Get a project trigger
*/
func (a *Client) GetProjectTriggerByIDSpaces(params *GetProjectTriggerByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectTriggerByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectTriggerByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectTriggerById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projecttriggers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectTriggerByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectTriggerByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectTriggerById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectProjectTriggers gets a list of project trigger resources for the given project resource

  Lists all the project triggers for the given project
*/
func (a *Client) IndexProjectProjectTriggers(params *IndexProjectProjectTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectProjectTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectProjectTriggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectProjectTriggers",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectProjectTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectProjectTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectProjectTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectProjectTriggersSpaces gets a list of project trigger resources for the given project resource

  Lists all the project triggers for the given project
*/
func (a *Client) IndexProjectProjectTriggersSpaces(params *IndexProjectProjectTriggersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectProjectTriggersSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectProjectTriggersSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectProjectTriggers_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectProjectTriggersSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectProjectTriggersSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectProjectTriggers_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectTriggers gets a list of project trigger resources

  Gets all the project triggers in the supplied Octopus Deploy Space, sorted by Id
*/
func (a *Client) IndexProjectTriggers(params *IndexProjectTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectTriggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectTriggers",
		Method:             "GET",
		PathPattern:        "/api/projecttriggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectTriggersSpaces gets a list of project trigger resources

  Gets all the project triggers in the supplied Octopus Deploy Space, sorted by Id
*/
func (a *Client) IndexProjectTriggersSpaces(params *IndexProjectTriggersSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectTriggersSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectTriggersSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectTriggers_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projecttriggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectTriggersSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectTriggersSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectTriggers_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProjectTrigger modifies a project trigger resource by ID

  Updates an existing project trigger
*/
func (a *Client) UpdateProjectTrigger(params *UpdateProjectTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProjectTrigger",
		Method:             "PUT",
		PathPattern:        "/api/projecttriggers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProjectTriggerSpaces modifies a project trigger resource by ID

  Updates an existing project trigger
*/
func (a *Client) UpdateProjectTriggerSpaces(params *UpdateProjectTriggerSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectTriggerSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectTriggerSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProjectTrigger_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/projecttriggers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectTriggerSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectTriggerSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectTrigger_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
