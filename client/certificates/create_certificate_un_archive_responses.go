// Code generated by go-swagger; DO NOT EDIT.

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CreateCertificateUnArchiveReader is a Reader for the CreateCertificateUnArchive structure.
type CreateCertificateUnArchiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateCertificateUnArchiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateCertificateUnArchiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateCertificateUnArchiveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateCertificateUnArchiveOK creates a CreateCertificateUnArchiveOK with default headers values
func NewCreateCertificateUnArchiveOK() *CreateCertificateUnArchiveOK {
	return &CreateCertificateUnArchiveOK{}
}

/*CreateCertificateUnArchiveOK handles this case with default header values.

OK
*/
type CreateCertificateUnArchiveOK struct {
}

func (o *CreateCertificateUnArchiveOK) Error() string {
	return fmt.Sprintf("[POST /api/certificates/{id}/unarchive][%d] createCertificateUnArchiveOK ", 200)
}

func (o *CreateCertificateUnArchiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateCertificateUnArchiveBadRequest creates a CreateCertificateUnArchiveBadRequest with default headers values
func NewCreateCertificateUnArchiveBadRequest() *CreateCertificateUnArchiveBadRequest {
	return &CreateCertificateUnArchiveBadRequest{}
}

/*CreateCertificateUnArchiveBadRequest handles this case with default header values.

No id parameter was provided.
You cannot unarchive a certificate that has been replaced.
*/
type CreateCertificateUnArchiveBadRequest struct {
}

func (o *CreateCertificateUnArchiveBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/certificates/{id}/unarchive][%d] createCertificateUnArchiveBadRequest ", 400)
}

func (o *CreateCertificateUnArchiveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
