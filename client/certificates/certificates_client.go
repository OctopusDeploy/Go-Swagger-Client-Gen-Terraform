// Code generated by go-swagger; DO NOT EDIT.

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCertificate(params *CreateCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateCreated, error)

	CreateCertificateArchive(params *CreateCertificateArchiveParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateArchiveOK, error)

	CreateCertificateArchiveSpaces(params *CreateCertificateArchiveSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateArchiveSpacesOK, error)

	CreateCertificateReplace(params *CreateCertificateReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateReplaceOK, error)

	CreateCertificateReplaceSpaces(params *CreateCertificateReplaceSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateReplaceSpacesOK, error)

	CreateCertificateUnArchive(params *CreateCertificateUnArchiveParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateUnArchiveOK, error)

	CreateCertificateUnArchiveSpaces(params *CreateCertificateUnArchiveSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateUnArchiveSpacesOK, error)

	CreateCertificateSpaces(params *CreateCertificateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateSpacesCreated, error)

	DeleteCertificate(params *DeleteCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCertificateOK, error)

	DeleteCertificateSpaces(params *DeleteCertificateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCertificateSpacesOK, error)

	GetCertificateByIDOrThumbprint(params *GetCertificateByIDOrThumbprintParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateByIDOrThumbprintOK, error)

	GetCertificateByIDOrThumbprintSpaces(params *GetCertificateByIDOrThumbprintSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateByIDOrThumbprintSpacesOK, error)

	GetCertificateExport(params *GetCertificateExportParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetCertificateExportOK, error)

	GetCertificateExportSpaces(params *GetCertificateExportSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetCertificateExportSpacesOK, error)

	GetCertificateUsage(params *GetCertificateUsageParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateUsageOK, error)

	GetCertificateUsageSpaces(params *GetCertificateUsageSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateUsageSpacesOK, error)

	IndexCertificates(params *IndexCertificatesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexCertificatesOK, error)

	IndexCertificatesSpaces(params *IndexCertificatesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexCertificatesSpacesOK, error)

	ListAllCertificates(params *ListAllCertificatesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllCertificatesOK, error)

	ListAllCertificatesSpaces(params *ListAllCertificatesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllCertificatesSpacesOK, error)

	UpdateCertificate(params *UpdateCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCertificateOK, error)

	UpdateCertificateSpaces(params *UpdateCertificateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCertificateSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCertificate creates a certificate resource

  Adds a new certificate
*/
func (a *Client) CreateCertificate(params *CreateCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificate",
		Method:             "POST",
		PathPattern:        "/api/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCertificateArchive Archives a certificate
*/
func (a *Client) CreateCertificateArchive(params *CreateCertificateArchiveParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateArchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificateArchive",
		Method:             "POST",
		PathPattern:        "/api/certificates/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificateArchiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCertificateArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCertificateArchiveSpaces Archives a certificate
*/
func (a *Client) CreateCertificateArchiveSpaces(params *CreateCertificateArchiveSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateArchiveSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateArchiveSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificateArchive_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/certificates/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificateArchiveSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateArchiveSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCertificateArchive_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCertificateReplace Replaces a certificate with another
*/
func (a *Client) CreateCertificateReplace(params *CreateCertificateReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificateReplace",
		Method:             "POST",
		PathPattern:        "/api/certificates/{id}/replace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificateReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateReplaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCertificateReplace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCertificateReplaceSpaces Replaces a certificate with another
*/
func (a *Client) CreateCertificateReplaceSpaces(params *CreateCertificateReplaceSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateReplaceSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateReplaceSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificateReplace_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/certificates/{id}/replace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificateReplaceSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateReplaceSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCertificateReplace_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCertificateUnArchive Un-archives a certificate
*/
func (a *Client) CreateCertificateUnArchive(params *CreateCertificateUnArchiveParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateUnArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateUnArchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificateUnArchive",
		Method:             "POST",
		PathPattern:        "/api/certificates/{id}/unarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificateUnArchiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateUnArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCertificateUnArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCertificateUnArchiveSpaces Un-archives a certificate
*/
func (a *Client) CreateCertificateUnArchiveSpaces(params *CreateCertificateUnArchiveSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateUnArchiveSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateUnArchiveSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificateUnArchive_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/certificates/{id}/unarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificateUnArchiveSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateUnArchiveSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCertificateUnArchive_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCertificateSpaces creates a certificate resource

  Adds a new certificate
*/
func (a *Client) CreateCertificateSpaces(params *CreateCertificateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCertificateSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificate_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCertificate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCertificate deletes a certificate resource by ID

  Permanently deletes a certificate
*/
func (a *Client) DeleteCertificate(params *DeleteCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCertificate",
		Method:             "DELETE",
		PathPattern:        "/api/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCertificateSpaces deletes a certificate resource by ID

  Permanently deletes a certificate
*/
func (a *Client) DeleteCertificateSpaces(params *DeleteCertificateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCertificateSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCertificate_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCertificateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCertificateSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCertificate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificateByIDOrThumbprint Get a certificate by ID or thumbprint
*/
func (a *Client) GetCertificateByIDOrThumbprint(params *GetCertificateByIDOrThumbprintParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateByIDOrThumbprintOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateByIDOrThumbprintParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateByIdOrThumbprint",
		Method:             "GET",
		PathPattern:        "/api/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateByIDOrThumbprintReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateByIDOrThumbprintOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificateByIdOrThumbprint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificateByIDOrThumbprintSpaces Get a certificate by ID or thumbprint
*/
func (a *Client) GetCertificateByIDOrThumbprintSpaces(params *GetCertificateByIDOrThumbprintSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateByIDOrThumbprintSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateByIDOrThumbprintSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateByIdOrThumbprint_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateByIDOrThumbprintSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateByIDOrThumbprintSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificateByIdOrThumbprint_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificateExport Exports the certificate
*/
func (a *Client) GetCertificateExport(params *GetCertificateExportParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetCertificateExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateExport",
		Method:             "GET",
		PathPattern:        "/api/certificates/{id}/export",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateExportReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificateExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificateExportSpaces Exports the certificate
*/
func (a *Client) GetCertificateExportSpaces(params *GetCertificateExportSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetCertificateExportSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateExportSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateExport_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/certificates/{id}/export",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateExportSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateExportSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificateExport_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificateUsage Get the usages of a certificate
*/
func (a *Client) GetCertificateUsage(params *GetCertificateUsageParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateUsage",
		Method:             "GET",
		PathPattern:        "/api/certificates/{id}/usages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificateUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificateUsageSpaces Get the usages of a certificate
*/
func (a *Client) GetCertificateUsageSpaces(params *GetCertificateUsageSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateUsageSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateUsageSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateUsage_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/certificates/{id}/usages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateUsageSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateUsageSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificateUsage_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexCertificates gets a list of certificate resources

  Lists X.509 certificates managed by Octopus
*/
func (a *Client) IndexCertificates(params *IndexCertificatesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexCertificatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexCertificates",
		Method:             "GET",
		PathPattern:        "/api/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexCertificates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexCertificatesSpaces gets a list of certificate resources

  Lists X.509 certificates managed by Octopus
*/
func (a *Client) IndexCertificatesSpaces(params *IndexCertificatesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexCertificatesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexCertificatesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexCertificates_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexCertificatesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexCertificatesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexCertificates_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllCertificates gets a list of certificate resources

  Lists X.509 certificates managed by Octopus
*/
func (a *Client) ListAllCertificates(params *ListAllCertificatesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllCertificatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllCertificates",
		Method:             "GET",
		PathPattern:        "/api/certificates/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllCertificates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllCertificatesSpaces gets a list of certificate resources

  Lists X.509 certificates managed by Octopus
*/
func (a *Client) ListAllCertificatesSpaces(params *ListAllCertificatesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllCertificatesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllCertificatesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllCertificates_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/certificates/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllCertificatesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllCertificatesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllCertificates_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCertificate modifies a certificate resource by ID

  Modifies an existing certificate
*/
func (a *Client) UpdateCertificate(params *UpdateCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCertificate",
		Method:             "PUT",
		PathPattern:        "/api/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCertificateSpaces modifies a certificate resource by ID

  Modifies an existing certificate
*/
func (a *Client) UpdateCertificateSpaces(params *UpdateCertificateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCertificateSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCertificateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCertificate_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCertificateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCertificateSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCertificate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
