// Code generated by go-swagger; DO NOT EDIT.

package runbook_snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runbook snapshots API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runbook snapshots API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRunbookSnapshot(params *CreateRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSnapshotCreated, error)

	CreateRunbookSnapshotSnapshotVariables(params *CreateRunbookSnapshotSnapshotVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSnapshotSnapshotVariablesOK, error)

	CreateRunbookSnapshotSnapshotVariablesSpaces(params *CreateRunbookSnapshotSnapshotVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSnapshotSnapshotVariablesSpacesOK, error)

	CreateRunbookSnapshotSpaces(params *CreateRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSnapshotSpacesCreated, error)

	DeleteRunbookSnapshot(params *DeleteRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunbookSnapshotOK, error)

	DeleteRunbookSnapshotSpaces(params *DeleteRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunbookSnapshotSpacesOK, error)

	GetRunbookRunPreviewForRunbookSnapshot(params *GetRunbookRunPreviewForRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSnapshotOK, error)

	GetRunbookRunPreviewForRunbookSnapshot1(params *GetRunbookRunPreviewForRunbookSnapshot1Params, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSnapshot1OK, error)

	GetRunbookRunPreviewForRunbookSnapshotSpaces(params *GetRunbookRunPreviewForRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSnapshotSpacesOK, error)

	GetRunbookRunPreviewForRunbookSnapshotSpaces1(params *GetRunbookRunPreviewForRunbookSnapshotSpaces1Params, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSnapshotSpaces1OK, error)

	GetRunbookRunTemplateForRunbookSnapshot(params *GetRunbookRunTemplateForRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunTemplateForRunbookSnapshotOK, error)

	GetRunbookRunTemplateForRunbookSnapshotSpaces(params *GetRunbookRunTemplateForRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunTemplateForRunbookSnapshotSpacesOK, error)

	GetRunbookSnapshotByID(params *GetRunbookSnapshotByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotByIDOK, error)

	GetRunbookSnapshotByIDSpaces(params *GetRunbookSnapshotByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotByIDSpacesOK, error)

	GetRunbookSnapshotByProjectAndName(params *GetRunbookSnapshotByProjectAndNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotByProjectAndNameOK, error)

	GetRunbookSnapshotByProjectAndNameSpaces(params *GetRunbookSnapshotByProjectAndNameSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotByProjectAndNameSpacesOK, error)

	IndexProjectRunbookSnapshots(params *IndexProjectRunbookSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectRunbookSnapshotsOK, error)

	IndexProjectRunbookSnapshotsSpaces(params *IndexProjectRunbookSnapshotsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectRunbookSnapshotsSpacesOK, error)

	IndexRunbookRunbookSnapshots(params *IndexRunbookRunbookSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookRunbookSnapshotsOK, error)

	IndexRunbookRunbookSnapshotsSpaces(params *IndexRunbookRunbookSnapshotsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookRunbookSnapshotsSpacesOK, error)

	IndexRunbookSnapshotRunbookRuns(params *IndexRunbookSnapshotRunbookRunsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookSnapshotRunbookRunsOK, error)

	IndexRunbookSnapshotRunbookRunsSpaces(params *IndexRunbookSnapshotRunbookRunsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookSnapshotRunbookRunsSpacesOK, error)

	IndexRunbookSnapshots(params *IndexRunbookSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookSnapshotsOK, error)

	IndexRunbookSnapshotsSpaces(params *IndexRunbookSnapshotsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookSnapshotsSpacesOK, error)

	UpdateRunbookSnapshot(params *UpdateRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunbookSnapshotOK, error)

	UpdateRunbookSnapshotSpaces(params *UpdateRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunbookSnapshotSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRunbookSnapshot creates a runbook snapshot resource

  Creates a new snapshot.
*/
func (a *Client) CreateRunbookSnapshot(params *CreateRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSnapshotCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRunbookSnapshot",
		Method:             "POST",
		PathPattern:        "/api/runbookSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRunbookSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookSnapshotCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunbookSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRunbookSnapshotSnapshotVariables Refresh the variable snapshots associated with the runbook snapshot. The runbook's process must not have changed since the snapshot was created.
*/
func (a *Client) CreateRunbookSnapshotSnapshotVariables(params *CreateRunbookSnapshotSnapshotVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSnapshotSnapshotVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookSnapshotSnapshotVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRunbookSnapshotSnapshotVariables",
		Method:             "POST",
		PathPattern:        "/api/runbookSnapshots/{id}/snapshot-variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRunbookSnapshotSnapshotVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookSnapshotSnapshotVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunbookSnapshotSnapshotVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRunbookSnapshotSnapshotVariablesSpaces Refresh the variable snapshots associated with the runbook snapshot. The runbook's process must not have changed since the snapshot was created.
*/
func (a *Client) CreateRunbookSnapshotSnapshotVariablesSpaces(params *CreateRunbookSnapshotSnapshotVariablesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSnapshotSnapshotVariablesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookSnapshotSnapshotVariablesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRunbookSnapshotSnapshotVariables_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots/{id}/snapshot-variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRunbookSnapshotSnapshotVariablesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookSnapshotSnapshotVariablesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunbookSnapshotSnapshotVariables_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRunbookSnapshotSpaces creates a runbook snapshot resource

  Creates a new snapshot.
*/
func (a *Client) CreateRunbookSnapshotSpaces(params *CreateRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRunbookSnapshotSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookSnapshotSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRunbookSnapshot_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRunbookSnapshotSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookSnapshotSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRunbookSnapshot_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRunbookSnapshot deletes a runbook snapshot resource by ID

  Deletes an existing snapshot, along with all of the runs, tasks and other associated resources belonging to the snapshot.
*/
func (a *Client) DeleteRunbookSnapshot(params *DeleteRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunbookSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunbookSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRunbookSnapshot",
		Method:             "DELETE",
		PathPattern:        "/api/runbookSnapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRunbookSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRunbookSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRunbookSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRunbookSnapshotSpaces deletes a runbook snapshot resource by ID

  Deletes an existing snapshot, along with all of the runs, tasks and other associated resources belonging to the snapshot.
*/
func (a *Client) DeleteRunbookSnapshotSpaces(params *DeleteRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRunbookSnapshotSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunbookSnapshotSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRunbookSnapshot_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRunbookSnapshotSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRunbookSnapshotSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRunbookSnapshot_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunPreviewForRunbookSnapshot Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).
*/
func (a *Client) GetRunbookRunPreviewForRunbookSnapshot(params *GetRunbookRunPreviewForRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunPreviewForRunbookSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunPreviewForRunbookSnapshot",
		Method:             "GET",
		PathPattern:        "/api/runbookSnapshots/{id}/runbookRuns/preview/{environment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunPreviewForRunbookSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunPreviewForRunbookSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunPreviewForRunbookSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunPreviewForRunbookSnapshot1 Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).
*/
func (a *Client) GetRunbookRunPreviewForRunbookSnapshot1(params *GetRunbookRunPreviewForRunbookSnapshot1Params, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSnapshot1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunPreviewForRunbookSnapshot1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunPreviewForRunbookSnapshot_1",
		Method:             "GET",
		PathPattern:        "/api/runbookSnapshots/{id}/runbookRuns/preview/{environment}/{tenant}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunPreviewForRunbookSnapshot1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunPreviewForRunbookSnapshot1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunPreviewForRunbookSnapshot_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunPreviewForRunbookSnapshotSpaces Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).
*/
func (a *Client) GetRunbookRunPreviewForRunbookSnapshotSpaces(params *GetRunbookRunPreviewForRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSnapshotSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunPreviewForRunbookSnapshotSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunPreviewForRunbookSnapshot_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns/preview/{environment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunPreviewForRunbookSnapshotSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunPreviewForRunbookSnapshotSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunPreviewForRunbookSnapshot_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunPreviewForRunbookSnapshotSpaces1 Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).
*/
func (a *Client) GetRunbookRunPreviewForRunbookSnapshotSpaces1(params *GetRunbookRunPreviewForRunbookSnapshotSpaces1Params, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunPreviewForRunbookSnapshotSpaces1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunPreviewForRunbookSnapshotSpaces1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunPreviewForRunbookSnapshot_Spaces_1",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns/preview/{environment}/{tenant}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunPreviewForRunbookSnapshotSpaces1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunPreviewForRunbookSnapshotSpaces1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunPreviewForRunbookSnapshot_Spaces_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunTemplateForRunbookSnapshot Gets all of the information necessary for creating or editing a run for this snapshot.
*/
func (a *Client) GetRunbookRunTemplateForRunbookSnapshot(params *GetRunbookRunTemplateForRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunTemplateForRunbookSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunTemplateForRunbookSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunTemplateForRunbookSnapshot",
		Method:             "GET",
		PathPattern:        "/api/runbookSnapshots/{id}/runbookRuns/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunTemplateForRunbookSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunTemplateForRunbookSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunTemplateForRunbookSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookRunTemplateForRunbookSnapshotSpaces Gets all of the information necessary for creating or editing a run for this snapshot.
*/
func (a *Client) GetRunbookRunTemplateForRunbookSnapshotSpaces(params *GetRunbookRunTemplateForRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookRunTemplateForRunbookSnapshotSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookRunTemplateForRunbookSnapshotSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookRunTemplateForRunbookSnapshot_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookRunTemplateForRunbookSnapshotSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookRunTemplateForRunbookSnapshotSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookRunTemplateForRunbookSnapshot_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookSnapshotByID gets a runbook snapshot resource by ID

  Gets a snapshot by ID.
*/
func (a *Client) GetRunbookSnapshotByID(params *GetRunbookSnapshotByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookSnapshotByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookSnapshotById",
		Method:             "GET",
		PathPattern:        "/api/runbookSnapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookSnapshotByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookSnapshotByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookSnapshotById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookSnapshotByIDSpaces gets a runbook snapshot resource by ID

  Gets a snapshot by ID.
*/
func (a *Client) GetRunbookSnapshotByIDSpaces(params *GetRunbookSnapshotByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookSnapshotByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookSnapshotById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookSnapshotByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookSnapshotByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookSnapshotById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookSnapshotByProjectAndName Gets a single runbookSnapshot by project ID and name.
*/
func (a *Client) GetRunbookSnapshotByProjectAndName(params *GetRunbookSnapshotByProjectAndNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotByProjectAndNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookSnapshotByProjectAndNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookSnapshotByProjectAndName",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/runbookSnapshots/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookSnapshotByProjectAndNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookSnapshotByProjectAndNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookSnapshotByProjectAndName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunbookSnapshotByProjectAndNameSpaces Gets a single runbookSnapshot by project ID and name.
*/
func (a *Client) GetRunbookSnapshotByProjectAndNameSpaces(params *GetRunbookSnapshotByProjectAndNameSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunbookSnapshotByProjectAndNameSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookSnapshotByProjectAndNameSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRunbookSnapshotByProjectAndName_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/runbookSnapshots/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunbookSnapshotByProjectAndNameSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookSnapshotByProjectAndNameSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRunbookSnapshotByProjectAndName_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectRunbookSnapshots gets a list of runbook snapshot resources for the given project resource

  Lists all of the runbookSnapshots that belong to the given project. RunbookSnapshots will be ordered from most recent to least recent.
*/
func (a *Client) IndexProjectRunbookSnapshots(params *IndexProjectRunbookSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectRunbookSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectRunbookSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectRunbookSnapshots",
		Method:             "GET",
		PathPattern:        "/api/projects/{id}/runbookSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectRunbookSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectRunbookSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectRunbookSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexProjectRunbookSnapshotsSpaces gets a list of runbook snapshot resources for the given project resource

  Lists all of the runbookSnapshots that belong to the given project. RunbookSnapshots will be ordered from most recent to least recent.
*/
func (a *Client) IndexProjectRunbookSnapshotsSpaces(params *IndexProjectRunbookSnapshotsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexProjectRunbookSnapshotsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexProjectRunbookSnapshotsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexProjectRunbookSnapshots_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/projects/{id}/runbookSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexProjectRunbookSnapshotsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexProjectRunbookSnapshotsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexProjectRunbookSnapshots_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexRunbookRunbookSnapshots gets a list of runbook snapshot resources for the given runbook resource

  Lists all of the runbookSnapshots that belong to the given runbook. RunbookSnapshots will be ordered from most recent to least recent.
*/
func (a *Client) IndexRunbookRunbookSnapshots(params *IndexRunbookRunbookSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookRunbookSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexRunbookRunbookSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexRunbookRunbookSnapshots",
		Method:             "GET",
		PathPattern:        "/api/runbooks/{id}/runbookSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexRunbookRunbookSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexRunbookRunbookSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexRunbookRunbookSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexRunbookRunbookSnapshotsSpaces gets a list of runbook snapshot resources for the given runbook resource

  Lists all of the runbookSnapshots that belong to the given runbook. RunbookSnapshots will be ordered from most recent to least recent.
*/
func (a *Client) IndexRunbookRunbookSnapshotsSpaces(params *IndexRunbookRunbookSnapshotsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookRunbookSnapshotsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexRunbookRunbookSnapshotsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexRunbookRunbookSnapshots_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbooks/{id}/runbookSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexRunbookRunbookSnapshotsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexRunbookRunbookSnapshotsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexRunbookRunbookSnapshots_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexRunbookSnapshotRunbookRuns gets a list of runbook run resources for the given runbook snapshot resource

  Lists all of the runs that belong to the given snapshot. Runs will be ordered from most recent to least recent.
*/
func (a *Client) IndexRunbookSnapshotRunbookRuns(params *IndexRunbookSnapshotRunbookRunsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookSnapshotRunbookRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexRunbookSnapshotRunbookRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexRunbookSnapshotRunbookRuns",
		Method:             "GET",
		PathPattern:        "/api/runbookSnapshots/{id}/runbookRuns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexRunbookSnapshotRunbookRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexRunbookSnapshotRunbookRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexRunbookSnapshotRunbookRuns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexRunbookSnapshotRunbookRunsSpaces gets a list of runbook run resources for the given runbook snapshot resource

  Lists all of the runs that belong to the given snapshot. Runs will be ordered from most recent to least recent.
*/
func (a *Client) IndexRunbookSnapshotRunbookRunsSpaces(params *IndexRunbookSnapshotRunbookRunsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookSnapshotRunbookRunsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexRunbookSnapshotRunbookRunsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexRunbookSnapshotRunbookRuns_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexRunbookSnapshotRunbookRunsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexRunbookSnapshotRunbookRunsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexRunbookSnapshotRunbookRuns_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexRunbookSnapshots gets a list of runbook snapshot resources

  Lists all of the snapshots in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent snapshot.
*/
func (a *Client) IndexRunbookSnapshots(params *IndexRunbookSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexRunbookSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexRunbookSnapshots",
		Method:             "GET",
		PathPattern:        "/api/runbookSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexRunbookSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexRunbookSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexRunbookSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexRunbookSnapshotsSpaces gets a list of runbook snapshot resources

  Lists all of the snapshots in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent snapshot.
*/
func (a *Client) IndexRunbookSnapshotsSpaces(params *IndexRunbookSnapshotsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexRunbookSnapshotsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexRunbookSnapshotsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexRunbookSnapshots_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexRunbookSnapshotsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexRunbookSnapshotsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexRunbookSnapshots_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRunbookSnapshot modifies a runbook snapshot resource by ID

  Updates an existing snapshot.
*/
func (a *Client) UpdateRunbookSnapshot(params *UpdateRunbookSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunbookSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunbookSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRunbookSnapshot",
		Method:             "PUT",
		PathPattern:        "/api/runbookSnapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRunbookSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunbookSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRunbookSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRunbookSnapshotSpaces modifies a runbook snapshot resource by ID

  Updates an existing snapshot.
*/
func (a *Client) UpdateRunbookSnapshotSpaces(params *UpdateRunbookSnapshotSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunbookSnapshotSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunbookSnapshotSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRunbookSnapshot_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/runbookSnapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRunbookSnapshotSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunbookSnapshotSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRunbookSnapshot_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
