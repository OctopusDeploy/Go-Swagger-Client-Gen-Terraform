// Code generated by go-swagger; DO NOT EDIT.

package scoped_user_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"models"
)

// NewUpdateScopedUserRoleParams creates a new UpdateScopedUserRoleParams object
// with the default values initialized.
func NewUpdateScopedUserRoleParams() *UpdateScopedUserRoleParams {
	var ()
	return &UpdateScopedUserRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateScopedUserRoleParamsWithTimeout creates a new UpdateScopedUserRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateScopedUserRoleParamsWithTimeout(timeout time.Duration) *UpdateScopedUserRoleParams {
	var ()
	return &UpdateScopedUserRoleParams{

		timeout: timeout,
	}
}

// NewUpdateScopedUserRoleParamsWithContext creates a new UpdateScopedUserRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateScopedUserRoleParamsWithContext(ctx context.Context) *UpdateScopedUserRoleParams {
	var ()
	return &UpdateScopedUserRoleParams{

		Context: ctx,
	}
}

// NewUpdateScopedUserRoleParamsWithHTTPClient creates a new UpdateScopedUserRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateScopedUserRoleParamsWithHTTPClient(client *http.Client) *UpdateScopedUserRoleParams {
	var ()
	return &UpdateScopedUserRoleParams{
		HTTPClient: client,
	}
}

/*UpdateScopedUserRoleParams contains all the parameters to send to the API endpoint
for the update scoped user role operation typically these are written to a http.Request
*/
type UpdateScopedUserRoleParams struct {

	/*ScopedUserRoleResource
	  The ScopedUserRoleResource resource to create

	*/
	ScopedUserRoleResource *models.ScopedUserRoleResource
	/*ID
	  ID of the ScopedUserRoleResource to modify

	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update scoped user role params
func (o *UpdateScopedUserRoleParams) WithTimeout(timeout time.Duration) *UpdateScopedUserRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update scoped user role params
func (o *UpdateScopedUserRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update scoped user role params
func (o *UpdateScopedUserRoleParams) WithContext(ctx context.Context) *UpdateScopedUserRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update scoped user role params
func (o *UpdateScopedUserRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update scoped user role params
func (o *UpdateScopedUserRoleParams) WithHTTPClient(client *http.Client) *UpdateScopedUserRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update scoped user role params
func (o *UpdateScopedUserRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithScopedUserRoleResource adds the scopedUserRoleResource to the update scoped user role params
func (o *UpdateScopedUserRoleParams) WithScopedUserRoleResource(scopedUserRoleResource *models.ScopedUserRoleResource) *UpdateScopedUserRoleParams {
	o.SetScopedUserRoleResource(scopedUserRoleResource)
	return o
}

// SetScopedUserRoleResource adds the scopedUserRoleResource to the update scoped user role params
func (o *UpdateScopedUserRoleParams) SetScopedUserRoleResource(scopedUserRoleResource *models.ScopedUserRoleResource) {
	o.ScopedUserRoleResource = scopedUserRoleResource
}

// WithID adds the id to the update scoped user role params
func (o *UpdateScopedUserRoleParams) WithID(id string) *UpdateScopedUserRoleParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update scoped user role params
func (o *UpdateScopedUserRoleParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateScopedUserRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ScopedUserRoleResource != nil {
		if err := r.SetBodyParam(o.ScopedUserRoleResource); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
