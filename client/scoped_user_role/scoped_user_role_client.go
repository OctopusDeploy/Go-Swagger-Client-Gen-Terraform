// Code generated by go-swagger; DO NOT EDIT.

package scoped_user_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scoped user role API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scoped user role API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateScopedUserRole(params *CreateScopedUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateScopedUserRoleCreated, error)

	CreateScopedUserRoleSpaces(params *CreateScopedUserRoleSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateScopedUserRoleSpacesCreated, error)

	DeleteScopedUserRole(params *DeleteScopedUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScopedUserRoleOK, error)

	DeleteScopedUserRoleSpaces(params *DeleteScopedUserRoleSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScopedUserRoleSpacesOK, error)

	GetListScopedUserRole(params *GetListScopedUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*GetListScopedUserRoleOK, error)

	GetListScopedUserRoleSpaces(params *GetListScopedUserRoleSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListScopedUserRoleSpacesOK, error)

	GetScopedUserRoleByID(params *GetScopedUserRoleByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetScopedUserRoleByIDOK, error)

	GetScopedUserRoleByIDSpaces(params *GetScopedUserRoleByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetScopedUserRoleByIDSpacesOK, error)

	UpdateScopedUserRole(params *UpdateScopedUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateScopedUserRoleOK, error)

	UpdateScopedUserRoleSpaces(params *UpdateScopedUserRoleSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateScopedUserRoleSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateScopedUserRole creates a scoped user role resource

  Creates a scoped user role.
*/
func (a *Client) CreateScopedUserRole(params *CreateScopedUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateScopedUserRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScopedUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createScopedUserRole",
		Method:             "POST",
		PathPattern:        "/api/scopeduserroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateScopedUserRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScopedUserRoleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createScopedUserRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateScopedUserRoleSpaces creates a scoped user role resource

  Creates a scoped user role.
*/
func (a *Client) CreateScopedUserRoleSpaces(params *CreateScopedUserRoleSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateScopedUserRoleSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScopedUserRoleSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createScopedUserRole_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/scopeduserroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateScopedUserRoleSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScopedUserRoleSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createScopedUserRole_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteScopedUserRole deletes a scoped user role resource by ID

  Deletes an existing scoped user role.
*/
func (a *Client) DeleteScopedUserRole(params *DeleteScopedUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScopedUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScopedUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteScopedUserRole",
		Method:             "DELETE",
		PathPattern:        "/api/scopeduserroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteScopedUserRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScopedUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScopedUserRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteScopedUserRoleSpaces deletes a scoped user role resource by ID

  Deletes an existing scoped user role.
*/
func (a *Client) DeleteScopedUserRoleSpaces(params *DeleteScopedUserRoleSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScopedUserRoleSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScopedUserRoleSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteScopedUserRole_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/scopeduserroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteScopedUserRoleSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScopedUserRoleSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScopedUserRole_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListScopedUserRole Lists the name and ID of all of the scoped user roles in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) GetListScopedUserRole(params *GetListScopedUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*GetListScopedUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListScopedUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListScopedUserRole",
		Method:             "GET",
		PathPattern:        "/api/scopeduserroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListScopedUserRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListScopedUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListScopedUserRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListScopedUserRoleSpaces Lists the name and ID of all of the scoped user roles in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) GetListScopedUserRoleSpaces(params *GetListScopedUserRoleSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListScopedUserRoleSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListScopedUserRoleSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListScopedUserRole_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/scopeduserroles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListScopedUserRoleSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListScopedUserRoleSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListScopedUserRole_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScopedUserRoleByID gets a scoped user role resource by ID

  Gets a scoped user role by ID.
*/
func (a *Client) GetScopedUserRoleByID(params *GetScopedUserRoleByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetScopedUserRoleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopedUserRoleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScopedUserRoleById",
		Method:             "GET",
		PathPattern:        "/api/scopeduserroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScopedUserRoleByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopedUserRoleByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScopedUserRoleById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScopedUserRoleByIDSpaces gets a scoped user role resource by ID

  Gets a scoped user role by ID.
*/
func (a *Client) GetScopedUserRoleByIDSpaces(params *GetScopedUserRoleByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetScopedUserRoleByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopedUserRoleByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScopedUserRoleById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/scopeduserroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScopedUserRoleByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopedUserRoleByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScopedUserRoleById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateScopedUserRole modifies a scoped user role resource by ID

  Modifies an existing scoped user role.
*/
func (a *Client) UpdateScopedUserRole(params *UpdateScopedUserRoleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateScopedUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScopedUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateScopedUserRole",
		Method:             "PUT",
		PathPattern:        "/api/scopeduserroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateScopedUserRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScopedUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateScopedUserRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateScopedUserRoleSpaces modifies a scoped user role resource by ID

  Modifies an existing scoped user role.
*/
func (a *Client) UpdateScopedUserRoleSpaces(params *UpdateScopedUserRoleSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateScopedUserRoleSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScopedUserRoleSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateScopedUserRole_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/scopeduserroles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateScopedUserRoleSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScopedUserRoleSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateScopedUserRole_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
