// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAccount(params *CreateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccountCreated, error)

	CreateAccountSpaces(params *CreateAccountSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccountSpacesCreated, error)

	DeleteAccount(params *DeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountOK, error)

	DeleteAccountSpaces(params *DeleteAccountSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountSpacesOK, error)

	GetAccountByID(params *GetAccountByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountByIDOK, error)

	GetAccountByIDSpaces(params *GetAccountByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountByIDSpacesOK, error)

	GetAccountPublicKeyDownload(params *GetAccountPublicKeyDownloadParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetAccountPublicKeyDownloadOK, error)

	GetAccountPublicKeyDownloadSpaces(params *GetAccountPublicKeyDownloadSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetAccountPublicKeyDownloadSpacesOK, error)

	GetAccountUsageList(params *GetAccountUsageListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountUsageListOK, error)

	GetAccountUsageListSpaces(params *GetAccountUsageListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountUsageListSpacesOK, error)

	GetAzureResourceGroupsList(params *GetAzureResourceGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureResourceGroupsListOK, error)

	GetAzureResourceGroupsListSpaces(params *GetAzureResourceGroupsListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureResourceGroupsListSpacesOK, error)

	GetAzureStorageAccountsList(params *GetAzureStorageAccountsListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureStorageAccountsListOK, error)

	GetAzureStorageAccountsListSpaces(params *GetAzureStorageAccountsListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureStorageAccountsListSpacesOK, error)

	GetAzureWebSitesList(params *GetAzureWebSitesListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureWebSitesListOK, error)

	GetAzureWebSitesListSpaces(params *GetAzureWebSitesListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureWebSitesListSpacesOK, error)

	GetAzureWebSitesSlotList(params *GetAzureWebSitesSlotListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureWebSitesSlotListOK, error)

	GetAzureWebSitesSlotListSpaces(params *GetAzureWebSitesSlotListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureWebSitesSlotListSpacesOK, error)

	IndexAccounts(params *IndexAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexAccountsOK, error)

	IndexAccountsSpaces(params *IndexAccountsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexAccountsSpacesOK, error)

	ListAllAccounts(params *ListAllAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllAccountsOK, error)

	ListAllAccountsSpaces(params *ListAllAccountsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllAccountsSpacesOK, error)

	UpdateAccount(params *UpdateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccountOK, error)

	UpdateAccountSpaces(params *UpdateAccountSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccountSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAccount creates a account resource

  Creates a new account.
*/
func (a *Client) CreateAccount(params *CreateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAccount",
		Method:             "POST",
		PathPattern:        "/api/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAccountSpaces creates a account resource

  Creates a new account.
*/
func (a *Client) CreateAccountSpaces(params *CreateAccountSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccountSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccountSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAccount_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAccountSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccountSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAccount_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAccount deletes a account resource by ID

  Deletes an existing account.
*/
func (a *Client) DeleteAccount(params *DeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAccount",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAccountSpaces deletes a account resource by ID

  Deletes an existing account.
*/
func (a *Client) DeleteAccountSpaces(params *DeleteAccountSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAccount_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAccountSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccount_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccountByID gets a account resource by ID

  Gets a single account by ID.
*/
func (a *Client) GetAccountByID(params *GetAccountByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountById",
		Method:             "GET",
		PathPattern:        "/api/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccountByIDSpaces gets a account resource by ID

  Gets a single account by ID.
*/
func (a *Client) GetAccountByIDSpaces(params *GetAccountByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccountPublicKeyDownload Downloads the public key portion of the account's associated certificate, if present.
*/
func (a *Client) GetAccountPublicKeyDownload(params *GetAccountPublicKeyDownloadParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetAccountPublicKeyDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountPublicKeyDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountPublicKeyDownload",
		Method:             "GET",
		PathPattern:        "/api/accounts/{id}/pk",
		ProducesMediaTypes: []string{"application/x-x509-ca-cert"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountPublicKeyDownloadReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountPublicKeyDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountPublicKeyDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccountPublicKeyDownloadSpaces Downloads the public key portion of the account's associated certificate, if present.
*/
func (a *Client) GetAccountPublicKeyDownloadSpaces(params *GetAccountPublicKeyDownloadSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetAccountPublicKeyDownloadSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountPublicKeyDownloadSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountPublicKeyDownload_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}/pk",
		ProducesMediaTypes: []string{"application/x-x509-ca-cert"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountPublicKeyDownloadSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountPublicKeyDownloadSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountPublicKeyDownload_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccountUsageList Lists projects and deployments which are using an account.
*/
func (a *Client) GetAccountUsageList(params *GetAccountUsageListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountUsageListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountUsageListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountUsageList",
		Method:             "GET",
		PathPattern:        "/api/accounts/{id}/usages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountUsageListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountUsageListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountUsageList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccountUsageListSpaces Lists projects and deployments which are using an account.
*/
func (a *Client) GetAccountUsageListSpaces(params *GetAccountUsageListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountUsageListSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountUsageListSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountUsageList_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}/usages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountUsageListSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountUsageListSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountUsageList_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureResourceGroupsList Lists the Resource Groups associated with an Azure account.
*/
func (a *Client) GetAzureResourceGroupsList(params *GetAzureResourceGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureResourceGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureResourceGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureResourceGroupsList",
		Method:             "GET",
		PathPattern:        "/api/accounts/{id}/resourceGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureResourceGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureResourceGroupsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureResourceGroupsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureResourceGroupsListSpaces Lists the Resource Groups associated with an Azure account.
*/
func (a *Client) GetAzureResourceGroupsListSpaces(params *GetAzureResourceGroupsListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureResourceGroupsListSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureResourceGroupsListSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureResourceGroupsList_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}/resourceGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureResourceGroupsListSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureResourceGroupsListSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureResourceGroupsList_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureStorageAccountsList Lists the storage accounts associated with an Azure account.
*/
func (a *Client) GetAzureStorageAccountsList(params *GetAzureStorageAccountsListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureStorageAccountsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureStorageAccountsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureStorageAccountsList",
		Method:             "GET",
		PathPattern:        "/api/accounts/{id}/storageAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureStorageAccountsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureStorageAccountsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureStorageAccountsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureStorageAccountsListSpaces Lists the storage accounts associated with an Azure account.
*/
func (a *Client) GetAzureStorageAccountsListSpaces(params *GetAzureStorageAccountsListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureStorageAccountsListSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureStorageAccountsListSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureStorageAccountsList_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}/storageAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureStorageAccountsListSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureStorageAccountsListSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureStorageAccountsList_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureWebSitesList Lists the websites associated with an Azure account.
*/
func (a *Client) GetAzureWebSitesList(params *GetAzureWebSitesListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureWebSitesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureWebSitesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureWebSitesList",
		Method:             "GET",
		PathPattern:        "/api/accounts/{id}/websites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureWebSitesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureWebSitesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureWebSitesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureWebSitesListSpaces Lists the websites associated with an Azure account.
*/
func (a *Client) GetAzureWebSitesListSpaces(params *GetAzureWebSitesListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureWebSitesListSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureWebSitesListSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureWebSitesList_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}/websites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureWebSitesListSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureWebSitesListSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureWebSitesList_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureWebSitesSlotList Lists the slots associated with an Azure Web Site.
*/
func (a *Client) GetAzureWebSitesSlotList(params *GetAzureWebSitesSlotListParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureWebSitesSlotListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureWebSitesSlotListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureWebSitesSlotList",
		Method:             "GET",
		PathPattern:        "/api/accounts/{id}/{resourceGroupName}/websites/{webSiteName}/slots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureWebSitesSlotListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureWebSitesSlotListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureWebSitesSlotList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureWebSitesSlotListSpaces Lists the slots associated with an Azure Web Site.
*/
func (a *Client) GetAzureWebSitesSlotListSpaces(params *GetAzureWebSitesSlotListSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureWebSitesSlotListSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureWebSitesSlotListSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureWebSitesSlotList_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}/{resourceGroupName}/websites/{webSiteName}/slots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAzureWebSitesSlotListSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureWebSitesSlotListSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureWebSitesSlotList_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexAccounts gets a list of account resources

  Lists accounts in the supplied Octopus Deploy Space in pages. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexAccounts(params *IndexAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexAccounts",
		Method:             "GET",
		PathPattern:        "/api/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexAccountsSpaces gets a list of account resources

  Lists accounts in the supplied Octopus Deploy Space in pages. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexAccountsSpaces(params *IndexAccountsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexAccountsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexAccountsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexAccounts_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexAccountsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexAccountsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexAccounts_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllAccounts gets a list of account resources

  Lists all of the accounts in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllAccounts(params *ListAllAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllAccounts",
		Method:             "GET",
		PathPattern:        "/api/accounts/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllAccountsSpaces gets a list of account resources

  Lists all of the accounts in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) ListAllAccountsSpaces(params *ListAllAccountsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllAccountsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllAccountsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllAccounts_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/accounts/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllAccountsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllAccountsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllAccounts_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAccount modifies a account resource by ID

  Modifies an existing account.
*/
func (a *Client) UpdateAccount(params *UpdateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAccount",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAccountSpaces modifies a account resource by ID

  Modifies an existing account.
*/
func (a *Client) UpdateAccountSpaces(params *UpdateAccountSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccountSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccountSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAccount_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAccountSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccountSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAccount_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
