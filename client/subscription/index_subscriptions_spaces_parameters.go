// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIndexSubscriptionsSpacesParams creates a new IndexSubscriptionsSpacesParams object
// with the default values initialized.
func NewIndexSubscriptionsSpacesParams() *IndexSubscriptionsSpacesParams {
	var ()
	return &IndexSubscriptionsSpacesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIndexSubscriptionsSpacesParamsWithTimeout creates a new IndexSubscriptionsSpacesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIndexSubscriptionsSpacesParamsWithTimeout(timeout time.Duration) *IndexSubscriptionsSpacesParams {
	var ()
	return &IndexSubscriptionsSpacesParams{

		timeout: timeout,
	}
}

// NewIndexSubscriptionsSpacesParamsWithContext creates a new IndexSubscriptionsSpacesParams object
// with the default values initialized, and the ability to set a context for a request
func NewIndexSubscriptionsSpacesParamsWithContext(ctx context.Context) *IndexSubscriptionsSpacesParams {
	var ()
	return &IndexSubscriptionsSpacesParams{

		Context: ctx,
	}
}

// NewIndexSubscriptionsSpacesParamsWithHTTPClient creates a new IndexSubscriptionsSpacesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIndexSubscriptionsSpacesParamsWithHTTPClient(client *http.Client) *IndexSubscriptionsSpacesParams {
	var ()
	return &IndexSubscriptionsSpacesParams{
		HTTPClient: client,
	}
}

/*IndexSubscriptionsSpacesParams contains all the parameters to send to the API endpoint
for the index subscriptions spaces operation typically these are written to a http.Request
*/
type IndexSubscriptionsSpacesParams struct {

	/*BaseSpaceID
	  ID of the space

	*/
	BaseSpaceID string
	/*Skip
	  Number of items to skip

	*/
	Skip *int32
	/*Take
	  Number of items to take

	*/
	Take *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) WithTimeout(timeout time.Duration) *IndexSubscriptionsSpacesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) WithContext(ctx context.Context) *IndexSubscriptionsSpacesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) WithHTTPClient(client *http.Client) *IndexSubscriptionsSpacesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaseSpaceID adds the baseSpaceID to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) WithBaseSpaceID(baseSpaceID string) *IndexSubscriptionsSpacesParams {
	o.SetBaseSpaceID(baseSpaceID)
	return o
}

// SetBaseSpaceID adds the baseSpaceId to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) SetBaseSpaceID(baseSpaceID string) {
	o.BaseSpaceID = baseSpaceID
}

// WithSkip adds the skip to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) WithSkip(skip *int32) *IndexSubscriptionsSpacesParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithTake adds the take to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) WithTake(take *int32) *IndexSubscriptionsSpacesParams {
	o.SetTake(take)
	return o
}

// SetTake adds the take to the index subscriptions spaces params
func (o *IndexSubscriptionsSpacesParams) SetTake(take *int32) {
	o.Take = take
}

// WriteToRequest writes these params to a swagger request
func (o *IndexSubscriptionsSpacesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param baseSpaceId
	if err := r.SetPathParam("baseSpaceId", o.BaseSpaceID); err != nil {
		return err
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if o.Take != nil {

		// query param take
		var qrTake int32
		if o.Take != nil {
			qrTake = *o.Take
		}
		qTake := swag.FormatInt32(qrTake)
		if qTake != "" {
			if err := r.SetQueryParam("take", qTake); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
