// Code generated by go-swagger; DO NOT EDIT.

package certificate_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificate configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificate configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetCertificateConfigurationByID(params *GetCertificateConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateConfigurationByIDOK, error)

	GetCertificateConfigurationByIDLegacy(params *GetCertificateConfigurationByIDLegacyParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateConfigurationByIDLegacyOK, error)

	GetCertificatePublicCerDownload(params *GetCertificatePublicCerDownloadParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetCertificatePublicCerDownloadOK, error)

	IndexCertificateConfigurations(params *IndexCertificateConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexCertificateConfigurationsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetCertificateConfigurationByID gets a certificate configuration resource by ID

  Gets a certificate by ID.
*/
func (a *Client) GetCertificateConfigurationByID(params *GetCertificateConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateConfigurationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateConfigurationByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateConfigurationById",
		Method:             "GET",
		PathPattern:        "/api/configuration/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateConfigurationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateConfigurationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificateConfigurationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificateConfigurationByIDLegacy Returns the server thumbprint used to identify this Octopus Server to any Tentacles when executing a deployment. Deprecated.
*/
func (a *Client) GetCertificateConfigurationByIDLegacy(params *GetCertificateConfigurationByIDLegacyParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificateConfigurationByIDLegacyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateConfigurationByIDLegacyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateConfigurationByIdLegacy",
		Method:             "GET",
		PathPattern:        "/api/certificates/certificate-global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateConfigurationByIDLegacyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateConfigurationByIDLegacyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificateConfigurationByIdLegacy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificatePublicCerDownload Downloads the public portion of the certificate in .cer format
*/
func (a *Client) GetCertificatePublicCerDownload(params *GetCertificatePublicCerDownloadParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetCertificatePublicCerDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatePublicCerDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificatePublicCerDownload",
		Method:             "GET",
		PathPattern:        "/api/configuration/certificates/{id}/public-cer",
		ProducesMediaTypes: []string{"application/x-x509-ca-cert"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificatePublicCerDownloadReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificatePublicCerDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificatePublicCerDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexCertificateConfigurations gets a list of certificate configuration resources

  Lists all of the X509 certificates in the current Octopus Deploy installation.
*/
func (a *Client) IndexCertificateConfigurations(params *IndexCertificateConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexCertificateConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexCertificateConfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexCertificateConfigurations",
		Method:             "GET",
		PathPattern:        "/api/configuration/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexCertificateConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexCertificateConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexCertificateConfigurations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
