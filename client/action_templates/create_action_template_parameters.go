// Code generated by go-swagger; DO NOT EDIT.

package action_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"models"
)

// NewCreateActionTemplateParams creates a new CreateActionTemplateParams object
// with the default values initialized.
func NewCreateActionTemplateParams() *CreateActionTemplateParams {
	var ()
	return &CreateActionTemplateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateActionTemplateParamsWithTimeout creates a new CreateActionTemplateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateActionTemplateParamsWithTimeout(timeout time.Duration) *CreateActionTemplateParams {
	var ()
	return &CreateActionTemplateParams{

		timeout: timeout,
	}
}

// NewCreateActionTemplateParamsWithContext creates a new CreateActionTemplateParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateActionTemplateParamsWithContext(ctx context.Context) *CreateActionTemplateParams {
	var ()
	return &CreateActionTemplateParams{

		Context: ctx,
	}
}

// NewCreateActionTemplateParamsWithHTTPClient creates a new CreateActionTemplateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateActionTemplateParamsWithHTTPClient(client *http.Client) *CreateActionTemplateParams {
	var ()
	return &CreateActionTemplateParams{
		HTTPClient: client,
	}
}

/*CreateActionTemplateParams contains all the parameters to send to the API endpoint
for the create action template operation typically these are written to a http.Request
*/
type CreateActionTemplateParams struct {

	/*ActionTemplateResource
	  The ActionTemplateResource resource to create

	*/
	ActionTemplateResource *models.ActionTemplateResource

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create action template params
func (o *CreateActionTemplateParams) WithTimeout(timeout time.Duration) *CreateActionTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create action template params
func (o *CreateActionTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create action template params
func (o *CreateActionTemplateParams) WithContext(ctx context.Context) *CreateActionTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create action template params
func (o *CreateActionTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create action template params
func (o *CreateActionTemplateParams) WithHTTPClient(client *http.Client) *CreateActionTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create action template params
func (o *CreateActionTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionTemplateResource adds the actionTemplateResource to the create action template params
func (o *CreateActionTemplateParams) WithActionTemplateResource(actionTemplateResource *models.ActionTemplateResource) *CreateActionTemplateParams {
	o.SetActionTemplateResource(actionTemplateResource)
	return o
}

// SetActionTemplateResource adds the actionTemplateResource to the create action template params
func (o *CreateActionTemplateParams) SetActionTemplateResource(actionTemplateResource *models.ActionTemplateResource) {
	o.ActionTemplateResource = actionTemplateResource
}

// WriteToRequest writes these params to a swagger request
func (o *CreateActionTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActionTemplateResource != nil {
		if err := r.SetBodyParam(o.ActionTemplateResource); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
