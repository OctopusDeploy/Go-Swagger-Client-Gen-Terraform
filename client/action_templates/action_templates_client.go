// Code generated by go-swagger; DO NOT EDIT.

package action_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new action templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for action templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateActionTemplate(params *CreateActionTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateCreated, error)

	CreateActionTemplateActions(params *CreateActionTemplateActionsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateActionsOK, error)

	CreateActionTemplateActionsSpaces(params *CreateActionTemplateActionsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateActionsSpacesOK, error)

	CreateActionTemplateLogo(params *CreateActionTemplateLogoParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateLogoOK, error)

	CreateActionTemplateLogoSpaces(params *CreateActionTemplateLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateLogoSpacesOK, error)

	CreateActionTemplateSpaces(params *CreateActionTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateSpacesCreated, error)

	DeleteActionTemplate(params *DeleteActionTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteActionTemplateOK, error)

	DeleteActionTemplateSpaces(params *DeleteActionTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteActionTemplateSpacesOK, error)

	GetActionTemplateByID(params *GetActionTemplateByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateByIDOK, error)

	GetActionTemplateByIDSpaces(params *GetActionTemplateByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateByIDSpacesOK, error)

	GetActionTemplateCategories(params *GetActionTemplateCategoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateCategoriesOK, error)

	GetActionTemplateCategoriesSpaces(params *GetActionTemplateCategoriesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateCategoriesSpacesOK, error)

	GetActionTemplateLogo(params *GetActionTemplateLogoParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetActionTemplateLogoOK, error)

	GetActionTemplateLogoVersion(params *GetActionTemplateLogoVersionParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetActionTemplateLogoVersionOK, error)

	GetActionTemplateLogoVersionSpaces(params *GetActionTemplateLogoVersionSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetActionTemplateLogoVersionSpacesOK, error)

	GetActionTemplateLogoSpaces(params *GetActionTemplateLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetActionTemplateLogoSpacesOK, error)

	GetActionTemplateUsage(params *GetActionTemplateUsageParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateUsageOK, error)

	GetActionTemplateUsageSpaces(params *GetActionTemplateUsageSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateUsageSpacesOK, error)

	GetActionTemplateVersion(params *GetActionTemplateVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateVersionOK, error)

	GetActionTemplateVersion1(params *GetActionTemplateVersion1Params, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateVersion1OK, error)

	GetActionTemplateVersionSpaces(params *GetActionTemplateVersionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateVersionSpacesOK, error)

	GetActionTemplateVersionSpaces1(params *GetActionTemplateVersionSpaces1Params, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateVersionSpaces1OK, error)

	GetActionTemplatesSearch(params *GetActionTemplatesSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplatesSearchOK, error)

	GetActionTemplatesSearchSpaces(params *GetActionTemplatesSearchSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplatesSearchSpacesOK, error)

	IndexActionTemplates(params *IndexActionTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexActionTemplatesOK, error)

	IndexActionTemplatesSpaces(params *IndexActionTemplatesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexActionTemplatesSpacesOK, error)

	ListAllActionTemplates(params *ListAllActionTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllActionTemplatesOK, error)

	ListAllActionTemplatesSpaces(params *ListAllActionTemplatesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllActionTemplatesSpacesOK, error)

	UpdateActionTemplate(params *UpdateActionTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionTemplateOK, error)

	UpdateActionTemplateLogo(params *UpdateActionTemplateLogoParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionTemplateLogoOK, error)

	UpdateActionTemplateLogoSpaces(params *UpdateActionTemplateLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionTemplateLogoSpacesOK, error)

	UpdateActionTemplateSpaces(params *UpdateActionTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionTemplateSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateActionTemplate creates a action template resource

  Creates a new action template.
*/
func (a *Client) CreateActionTemplate(params *CreateActionTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActionTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createActionTemplate",
		Method:             "POST",
		PathPattern:        "/api/actiontemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateActionTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActionTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createActionTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateActionTemplateActions Updates deployment actions to specific version of action template
*/
func (a *Client) CreateActionTemplateActions(params *CreateActionTemplateActionsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActionTemplateActionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createActionTemplateActions",
		Method:             "POST",
		PathPattern:        "/api/actiontemplates/{id}/actionsUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateActionTemplateActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActionTemplateActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createActionTemplateActions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateActionTemplateActionsSpaces Updates deployment actions to specific version of action template
*/
func (a *Client) CreateActionTemplateActionsSpaces(params *CreateActionTemplateActionsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateActionsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActionTemplateActionsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createActionTemplateActions_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}/actionsUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateActionTemplateActionsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActionTemplateActionsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createActionTemplateActions_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateActionTemplateLogo Updates the logo associated with the latest version of the action template.
*/
func (a *Client) CreateActionTemplateLogo(params *CreateActionTemplateLogoParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActionTemplateLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createActionTemplateLogo",
		Method:             "POST",
		PathPattern:        "/api/actiontemplates/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateActionTemplateLogoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActionTemplateLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createActionTemplateLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateActionTemplateLogoSpaces Updates the logo associated with the latest version of the action template.
*/
func (a *Client) CreateActionTemplateLogoSpaces(params *CreateActionTemplateLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActionTemplateLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createActionTemplateLogo_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateActionTemplateLogoSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActionTemplateLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createActionTemplateLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateActionTemplateSpaces creates a action template resource

  Creates a new action template.
*/
func (a *Client) CreateActionTemplateSpaces(params *CreateActionTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionTemplateSpacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActionTemplateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createActionTemplate_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateActionTemplateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActionTemplateSpacesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createActionTemplate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteActionTemplate deletes a action template resource by ID

  Deletes an existing action template and all its versions.
*/
func (a *Client) DeleteActionTemplate(params *DeleteActionTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteActionTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteActionTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteActionTemplate",
		Method:             "DELETE",
		PathPattern:        "/api/actiontemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteActionTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteActionTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteActionTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteActionTemplateSpaces deletes a action template resource by ID

  Deletes an existing action template and all its versions.
*/
func (a *Client) DeleteActionTemplateSpaces(params *DeleteActionTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteActionTemplateSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteActionTemplateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteActionTemplate_Spaces",
		Method:             "DELETE",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteActionTemplateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteActionTemplateSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteActionTemplate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateByID gets a action template resource by ID

  Gets a single action template by ID.
*/
func (a *Client) GetActionTemplateByID(params *GetActionTemplateByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateById",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateByIDSpaces gets a action template resource by ID

  Gets a single action template by ID.
*/
func (a *Client) GetActionTemplateByIDSpaces(params *GetActionTemplateByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateCategories Lists action template categories.
*/
func (a *Client) GetActionTemplateCategories(params *GetActionTemplateCategoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateCategories",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateCategoriesSpaces Lists action template categories.
*/
func (a *Client) GetActionTemplateCategoriesSpaces(params *GetActionTemplateCategoriesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateCategoriesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateCategoriesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateCategories_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateCategoriesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateCategoriesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateCategories_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateLogo Gets the logo associated with the latest version of action template.
*/
func (a *Client) GetActionTemplateLogo(params *GetActionTemplateLogoParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetActionTemplateLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateLogo",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/{id}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateLogoReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateLogoVersion Gets the logo associated with specific version of the action template.
*/
func (a *Client) GetActionTemplateLogoVersion(params *GetActionTemplateLogoVersionParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetActionTemplateLogoVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateLogoVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateLogoVersion",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/{typeOrId}/versions/{version}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateLogoVersionReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateLogoVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateLogoVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateLogoVersionSpaces Gets the logo associated with specific version of the action template.
*/
func (a *Client) GetActionTemplateLogoVersionSpaces(params *GetActionTemplateLogoVersionSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetActionTemplateLogoVersionSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateLogoVersionSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateLogoVersion_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{typeOrId}/versions/{version}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateLogoVersionSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateLogoVersionSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateLogoVersion_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateLogoSpaces Gets the logo associated with the latest version of action template.
*/
func (a *Client) GetActionTemplateLogoSpaces(params *GetActionTemplateLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetActionTemplateLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateLogo_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}/logo",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateLogoSpacesReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateUsage Gets a list of all steps/deployment processes that use a given action template.
*/
func (a *Client) GetActionTemplateUsage(params *GetActionTemplateUsageParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateUsage",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/{id}/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateUsageSpaces Gets a list of all steps/deployment processes that use a given action template.
*/
func (a *Client) GetActionTemplateUsageSpaces(params *GetActionTemplateUsageSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateUsageSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateUsageSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateUsage_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateUsageSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateUsageSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateUsage_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateVersion Gets specific version of action template.
*/
func (a *Client) GetActionTemplateVersion(params *GetActionTemplateVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateVersion",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/{id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateVersion1 Gets specific version of action template.
*/
func (a *Client) GetActionTemplateVersion1(params *GetActionTemplateVersion1Params, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateVersion1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateVersion1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateVersion_1",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/{id}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateVersion1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateVersion1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateVersion_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateVersionSpaces Gets specific version of action template.
*/
func (a *Client) GetActionTemplateVersionSpaces(params *GetActionTemplateVersionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateVersionSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateVersionSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateVersion_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateVersionSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateVersionSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateVersion_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplateVersionSpaces1 Gets specific version of action template.
*/
func (a *Client) GetActionTemplateVersionSpaces1(params *GetActionTemplateVersionSpaces1Params, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplateVersionSpaces1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplateVersionSpaces1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplateVersion_Spaces_1",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplateVersionSpaces1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplateVersionSpaces1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplateVersion_Spaces_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplatesSearch Lists all available action templates including built-in, custom and community contributed step templates.
*/
func (a *Client) GetActionTemplatesSearch(params *GetActionTemplatesSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplatesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplatesSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplatesSearch",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplatesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplatesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplatesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionTemplatesSearchSpaces Lists all available action templates including built-in, custom and community contributed step templates.
*/
func (a *Client) GetActionTemplatesSearchSpaces(params *GetActionTemplatesSearchSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionTemplatesSearchSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionTemplatesSearchSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionTemplatesSearch_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActionTemplatesSearchSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionTemplatesSearchSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionTemplatesSearch_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexActionTemplates gets a list of action template resources

  Lists all of the action templates in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexActionTemplates(params *IndexActionTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexActionTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexActionTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexActionTemplates",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexActionTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexActionTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexActionTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexActionTemplatesSpaces gets a list of action template resources

  Lists all of the action templates in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.
*/
func (a *Client) IndexActionTemplatesSpaces(params *IndexActionTemplatesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexActionTemplatesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexActionTemplatesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexActionTemplates_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexActionTemplatesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexActionTemplatesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexActionTemplates_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllActionTemplates gets a list of action template resources

  Lists the all of the action templates in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) ListAllActionTemplates(params *ListAllActionTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllActionTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllActionTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllActionTemplates",
		Method:             "GET",
		PathPattern:        "/api/actiontemplates/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllActionTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllActionTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllActionTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllActionTemplatesSpaces gets a list of action template resources

  Lists the all of the action templates in the supplied Octopus Deploy Space. The results will be sorted by name.
*/
func (a *Client) ListAllActionTemplatesSpaces(params *ListAllActionTemplatesSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAllActionTemplatesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllActionTemplatesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAllActionTemplates_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllActionTemplatesSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllActionTemplatesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllActionTemplates_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateActionTemplate modifies a action template resource by ID

  Modifies an existing action template.
*/
func (a *Client) UpdateActionTemplate(params *UpdateActionTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActionTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateActionTemplate",
		Method:             "PUT",
		PathPattern:        "/api/actiontemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateActionTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActionTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateActionTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateActionTemplateLogo Updates the logo associated with the latest version of the action template.
*/
func (a *Client) UpdateActionTemplateLogo(params *UpdateActionTemplateLogoParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionTemplateLogoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActionTemplateLogoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateActionTemplateLogo",
		Method:             "PUT",
		PathPattern:        "/api/actiontemplates/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateActionTemplateLogoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActionTemplateLogoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateActionTemplateLogo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateActionTemplateLogoSpaces Updates the logo associated with the latest version of the action template.
*/
func (a *Client) UpdateActionTemplateLogoSpaces(params *UpdateActionTemplateLogoSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionTemplateLogoSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActionTemplateLogoSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateActionTemplateLogo_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}/logo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateActionTemplateLogoSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActionTemplateLogoSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateActionTemplateLogo_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateActionTemplateSpaces modifies a action template resource by ID

  Modifies an existing action template.
*/
func (a *Client) UpdateActionTemplateSpaces(params *UpdateActionTemplateSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionTemplateSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActionTemplateSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateActionTemplate_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/actiontemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateActionTemplateSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActionTemplateSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateActionTemplate_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
