// Code generated by go-swagger; DO NOT EDIT.

package interruptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new interruptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for interruptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSubmitInterruption(params *CreateSubmitInterruptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubmitInterruptionOK, error)

	CreateSubmitInterruptionSpaces(params *CreateSubmitInterruptionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubmitInterruptionSpacesOK, error)

	GetInterruptionByID(params *GetInterruptionByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterruptionByIDOK, error)

	GetInterruptionByIDSpaces(params *GetInterruptionByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterruptionByIDSpacesOK, error)

	GetInterruptionResponsibility(params *GetInterruptionResponsibilityParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterruptionResponsibilityOK, error)

	GetInterruptionResponsibilitySpaces(params *GetInterruptionResponsibilitySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterruptionResponsibilitySpacesOK, error)

	IndexInterruptions(params *IndexInterruptionsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexInterruptionsOK, error)

	IndexInterruptionsSpaces(params *IndexInterruptionsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexInterruptionsSpacesOK, error)

	UpdateInterruptionResponsibility(params *UpdateInterruptionResponsibilityParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInterruptionResponsibilityOK, error)

	UpdateInterruptionResponsibilitySpaces(params *UpdateInterruptionResponsibilitySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInterruptionResponsibilitySpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSubmitInterruption Submits a dictionary of form values for the interruption. Only the user with responsibility for this interruption can submit this form.
*/
func (a *Client) CreateSubmitInterruption(params *CreateSubmitInterruptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubmitInterruptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubmitInterruptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSubmitInterruption",
		Method:             "POST",
		PathPattern:        "/api/interruptions/{id}/submit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubmitInterruptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubmitInterruptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubmitInterruption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSubmitInterruptionSpaces Submits a dictionary of form values for the interruption. Only the user with responsibility for this interruption can submit this form.
*/
func (a *Client) CreateSubmitInterruptionSpaces(params *CreateSubmitInterruptionSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubmitInterruptionSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubmitInterruptionSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSubmitInterruption_Spaces",
		Method:             "POST",
		PathPattern:        "/api/{baseSpaceId}/interruptions/{id}/submit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubmitInterruptionSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubmitInterruptionSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubmitInterruption_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInterruptionByID gets a interruption resource by ID

  Gets a single interruption by ID.
*/
func (a *Client) GetInterruptionByID(params *GetInterruptionByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterruptionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterruptionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterruptionById",
		Method:             "GET",
		PathPattern:        "/api/interruptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInterruptionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInterruptionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInterruptionById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInterruptionByIDSpaces gets a interruption resource by ID

  Gets a single interruption by ID.
*/
func (a *Client) GetInterruptionByIDSpaces(params *GetInterruptionByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterruptionByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterruptionByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterruptionById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/interruptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInterruptionByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInterruptionByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInterruptionById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInterruptionResponsibility Gets the user that is currently responsible for this interruption.
*/
func (a *Client) GetInterruptionResponsibility(params *GetInterruptionResponsibilityParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterruptionResponsibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterruptionResponsibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterruptionResponsibility",
		Method:             "GET",
		PathPattern:        "/api/interruptions/{id}/responsible",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInterruptionResponsibilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInterruptionResponsibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInterruptionResponsibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInterruptionResponsibilitySpaces Gets the user that is currently responsible for this interruption.
*/
func (a *Client) GetInterruptionResponsibilitySpaces(params *GetInterruptionResponsibilitySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterruptionResponsibilitySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterruptionResponsibilitySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterruptionResponsibility_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/interruptions/{id}/responsible",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInterruptionResponsibilitySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInterruptionResponsibilitySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInterruptionResponsibility_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexInterruptions gets a list of interruption resources

  Lists interruptions for user attention. The results will be sorted by date from most recently to least recently created.
*/
func (a *Client) IndexInterruptions(params *IndexInterruptionsParams, authInfo runtime.ClientAuthInfoWriter) (*IndexInterruptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexInterruptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexInterruptions",
		Method:             "GET",
		PathPattern:        "/api/interruptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexInterruptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexInterruptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexInterruptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexInterruptionsSpaces gets a list of interruption resources

  Lists interruptions for user attention. The results will be sorted by date from most recently to least recently created.
*/
func (a *Client) IndexInterruptionsSpaces(params *IndexInterruptionsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*IndexInterruptionsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexInterruptionsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexInterruptions_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/interruptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexInterruptionsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexInterruptionsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexInterruptions_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInterruptionResponsibility Allows the current user to take responsibility for this interruption. Only users in one of the responsible teams on this interruption can take responsibility for it.
*/
func (a *Client) UpdateInterruptionResponsibility(params *UpdateInterruptionResponsibilityParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInterruptionResponsibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInterruptionResponsibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInterruptionResponsibility",
		Method:             "PUT",
		PathPattern:        "/api/interruptions/{id}/responsible",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateInterruptionResponsibilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInterruptionResponsibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInterruptionResponsibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInterruptionResponsibilitySpaces Allows the current user to take responsibility for this interruption. Only users in one of the responsible teams on this interruption can take responsibility for it.
*/
func (a *Client) UpdateInterruptionResponsibilitySpaces(params *UpdateInterruptionResponsibilitySpacesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInterruptionResponsibilitySpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInterruptionResponsibilitySpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInterruptionResponsibility_Spaces",
		Method:             "PUT",
		PathPattern:        "/api/{baseSpaceId}/interruptions/{id}/responsible",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateInterruptionResponsibilitySpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInterruptionResponsibilitySpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInterruptionResponsibility_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
