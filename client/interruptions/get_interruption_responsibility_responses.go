// Code generated by go-swagger; DO NOT EDIT.

package interruptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"models"
)

// GetInterruptionResponsibilityReader is a Reader for the GetInterruptionResponsibility structure.
type GetInterruptionResponsibilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInterruptionResponsibilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInterruptionResponsibilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInterruptionResponsibilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetInterruptionResponsibilityMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInterruptionResponsibilityOK creates a GetInterruptionResponsibilityOK with default headers values
func NewGetInterruptionResponsibilityOK() *GetInterruptionResponsibilityOK {
	return &GetInterruptionResponsibilityOK{}
}

/*GetInterruptionResponsibilityOK handles this case with default header values.

UserResource resource returned
*/
type GetInterruptionResponsibilityOK struct {
	Payload *models.UserResource
}

func (o *GetInterruptionResponsibilityOK) Error() string {
	return fmt.Sprintf("[GET /api/interruptions/{id}/responsible][%d] getInterruptionResponsibilityOK  %+v", 200, o.Payload)
}

func (o *GetInterruptionResponsibilityOK) GetPayload() *models.UserResource {
	return o.Payload
}

func (o *GetInterruptionResponsibilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInterruptionResponsibilityBadRequest creates a GetInterruptionResponsibilityBadRequest with default headers values
func NewGetInterruptionResponsibilityBadRequest() *GetInterruptionResponsibilityBadRequest {
	return &GetInterruptionResponsibilityBadRequest{}
}

/*GetInterruptionResponsibilityBadRequest handles this case with default header values.

No id parameter was provided.
This interruption has already been submitted, possibly by another user.
*/
type GetInterruptionResponsibilityBadRequest struct {
}

func (o *GetInterruptionResponsibilityBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/interruptions/{id}/responsible][%d] getInterruptionResponsibilityBadRequest ", 400)
}

func (o *GetInterruptionResponsibilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInterruptionResponsibilityMethodNotAllowed creates a GetInterruptionResponsibilityMethodNotAllowed with default headers values
func NewGetInterruptionResponsibilityMethodNotAllowed() *GetInterruptionResponsibilityMethodNotAllowed {
	return &GetInterruptionResponsibilityMethodNotAllowed{}
}

/*GetInterruptionResponsibilityMethodNotAllowed handles this case with default header values.

MethodNotAllowed
*/
type GetInterruptionResponsibilityMethodNotAllowed struct {
}

func (o *GetInterruptionResponsibilityMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/interruptions/{id}/responsible][%d] getInterruptionResponsibilityMethodNotAllowed ", 405)
}

func (o *GetInterruptionResponsibilityMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
