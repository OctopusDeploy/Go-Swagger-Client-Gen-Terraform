// Code generated by go-swagger; DO NOT EDIT.

package interruptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"models"
)

// CreateSubmitInterruptionSpacesReader is a Reader for the CreateSubmitInterruptionSpaces structure.
type CreateSubmitInterruptionSpacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubmitInterruptionSpacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSubmitInterruptionSpacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSubmitInterruptionSpacesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateSubmitInterruptionSpacesOK creates a CreateSubmitInterruptionSpacesOK with default headers values
func NewCreateSubmitInterruptionSpacesOK() *CreateSubmitInterruptionSpacesOK {
	return &CreateSubmitInterruptionSpacesOK{}
}

/*CreateSubmitInterruptionSpacesOK handles this case with default header values.

InterruptionResource resource returned
*/
type CreateSubmitInterruptionSpacesOK struct {
	Payload *models.InterruptionResource
}

func (o *CreateSubmitInterruptionSpacesOK) Error() string {
	return fmt.Sprintf("[POST /api/{baseSpaceId}/interruptions/{id}/submit][%d] createSubmitInterruptionSpacesOK  %+v", 200, o.Payload)
}

func (o *CreateSubmitInterruptionSpacesOK) GetPayload() *models.InterruptionResource {
	return o.Payload
}

func (o *CreateSubmitInterruptionSpacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InterruptionResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubmitInterruptionSpacesBadRequest creates a CreateSubmitInterruptionSpacesBadRequest with default headers values
func NewCreateSubmitInterruptionSpacesBadRequest() *CreateSubmitInterruptionSpacesBadRequest {
	return &CreateSubmitInterruptionSpacesBadRequest{}
}

/*CreateSubmitInterruptionSpacesBadRequest handles this case with default header values.

No id parameter was provided.
No request body was supplied.
Someone else has taken responsibility for this interruption, and only they are allowed to submit it.
The interruption has already been submitted.
There were errors with the form.
You must take responsibility for this interruption before attempting to submit it.
*/
type CreateSubmitInterruptionSpacesBadRequest struct {
}

func (o *CreateSubmitInterruptionSpacesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/{baseSpaceId}/interruptions/{id}/submit][%d] createSubmitInterruptionSpacesBadRequest ", 400)
}

func (o *CreateSubmitInterruptionSpacesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
