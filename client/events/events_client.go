// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetEventByID(params *GetEventByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventByIDOK, error)

	GetEventByIDSpaces(params *GetEventByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventByIDSpacesOK, error)

	GetListEventAgents(params *GetListEventAgentsParams) (*GetListEventAgentsOK, error)

	GetListEventAgentsSpaces(params *GetListEventAgentsSpacesParams) (*GetListEventAgentsSpacesOK, error)

	GetListEventCategories(params *GetListEventCategoriesParams) (*GetListEventCategoriesOK, error)

	GetListEventCategoriesSpaces(params *GetListEventCategoriesSpacesParams) (*GetListEventCategoriesSpacesOK, error)

	GetListEventDocumentTypes(params *GetListEventDocumentTypesParams) (*GetListEventDocumentTypesOK, error)

	GetListEventDocumentTypesSpaces(params *GetListEventDocumentTypesSpacesParams) (*GetListEventDocumentTypesSpacesOK, error)

	GetListEventGroups(params *GetListEventGroupsParams) (*GetListEventGroupsOK, error)

	GetListEventGroupsSpaces(params *GetListEventGroupsSpacesParams) (*GetListEventGroupsSpacesOK, error)

	GetListEvents(params *GetListEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListEventsOK, error)

	GetListEventsSpaces(params *GetListEventsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListEventsSpacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetEventByID gets a event resource by ID

  Gets a single event by ID.
*/
func (a *Client) GetEventByID(params *GetEventByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventById",
		Method:             "GET",
		PathPattern:        "/api/events/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEventByIDSpaces gets a event resource by ID

  Gets a single event by ID.
*/
func (a *Client) GetEventByIDSpaces(params *GetEventByIDSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventByIDSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventByIDSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventById_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/events/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventByIDSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventByIDSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventById_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventAgents Lists event agents.
*/
func (a *Client) GetListEventAgents(params *GetListEventAgentsParams) (*GetListEventAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEventAgents",
		Method:             "GET",
		PathPattern:        "/api/events/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventAgentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventAgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEventAgents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventAgentsSpaces Lists event agents.
*/
func (a *Client) GetListEventAgentsSpaces(params *GetListEventAgentsSpacesParams) (*GetListEventAgentsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventAgentsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEventAgents_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/events/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventAgentsSpacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventAgentsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEventAgents_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventCategories Lists event categories.
*/
func (a *Client) GetListEventCategories(params *GetListEventCategoriesParams) (*GetListEventCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEventCategories",
		Method:             "GET",
		PathPattern:        "/api/events/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEventCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventCategoriesSpaces Lists event categories.
*/
func (a *Client) GetListEventCategoriesSpaces(params *GetListEventCategoriesSpacesParams) (*GetListEventCategoriesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventCategoriesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEventCategories_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/events/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventCategoriesSpacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventCategoriesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEventCategories_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventDocumentTypes Lists subscription event document types.
*/
func (a *Client) GetListEventDocumentTypes(params *GetListEventDocumentTypesParams) (*GetListEventDocumentTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventDocumentTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEventDocumentTypes",
		Method:             "GET",
		PathPattern:        "/api/events/documenttypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventDocumentTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventDocumentTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEventDocumentTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventDocumentTypesSpaces Lists subscription event document types.
*/
func (a *Client) GetListEventDocumentTypesSpaces(params *GetListEventDocumentTypesSpacesParams) (*GetListEventDocumentTypesSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventDocumentTypesSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEventDocumentTypes_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/events/documenttypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventDocumentTypesSpacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventDocumentTypesSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEventDocumentTypes_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventGroups Lists subscription event groups.
*/
func (a *Client) GetListEventGroups(params *GetListEventGroupsParams) (*GetListEventGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEventGroups",
		Method:             "GET",
		PathPattern:        "/api/events/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEventGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventGroupsSpaces Lists subscription event groups.
*/
func (a *Client) GetListEventGroupsSpaces(params *GetListEventGroupsSpacesParams) (*GetListEventGroupsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventGroupsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEventGroups_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/events/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventGroupsSpacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventGroupsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEventGroups_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEvents List all of the the audit events collected to date. Events can be filtered by various criteria. Events will be ordered by the date of the event, descending.
*/
func (a *Client) GetListEvents(params *GetListEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetListEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEvents",
		Method:             "GET",
		PathPattern:        "/api/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListEventsSpaces List all of the the audit events collected to date. Events can be filtered by various criteria. Events will be ordered by the date of the event, descending.
*/
func (a *Client) GetListEventsSpaces(params *GetListEventsSpacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetListEventsSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListEventsSpacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListEvents_Spaces",
		Method:             "GET",
		PathPattern:        "/api/{baseSpaceId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListEventsSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListEventsSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListEvents_Spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
