// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scheduler API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scheduler API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetScheduledTaskDetails(params *GetScheduledTaskDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetScheduledTaskDetailsOK, error)

	GetScheduledTaskRawDetails(params *GetScheduledTaskRawDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetScheduledTaskRawDetailsOK, error)

	GetScheduler(params *GetSchedulerParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulerOK, error)

	GetSchedulerStart(params *GetSchedulerStartParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulerStartOK, error)

	GetSchedulerStop(params *GetSchedulerStopParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulerStopOK, error)

	GetSchedulerTrigger(params *GetSchedulerTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulerTriggerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetScheduledTaskDetails Get the details of a scheduled task.
*/
func (a *Client) GetScheduledTaskDetails(params *GetScheduledTaskDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetScheduledTaskDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduledTaskDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScheduledTaskDetails",
		Method:             "GET",
		PathPattern:        "/api/scheduler/{name}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScheduledTaskDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduledTaskDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScheduledTaskDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScheduledTaskRawDetails Get the details of a scheduled task as raw text.
*/
func (a *Client) GetScheduledTaskRawDetails(params *GetScheduledTaskRawDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetScheduledTaskRawDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduledTaskRawDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScheduledTaskRawDetails",
		Method:             "GET",
		PathPattern:        "/api/scheduler/{name}/logs/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScheduledTaskRawDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduledTaskRawDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScheduledTaskRawDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScheduler Returns status of Octopus scheduled tasks.
*/
func (a *Client) GetScheduler(params *GetSchedulerParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScheduler",
		Method:             "GET",
		PathPattern:        "/api/scheduler",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchedulerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchedulerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScheduler: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSchedulerStart Returns HTTP OK (200) when the Octopus Server scheduler has been started.
*/
func (a *Client) GetSchedulerStart(params *GetSchedulerStartParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulerStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulerStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSchedulerStart",
		Method:             "GET",
		PathPattern:        "/api/scheduler/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchedulerStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchedulerStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchedulerStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSchedulerStop Returns HTTP OK (200) when the Octopus Server scheduler has been stopped.
*/
func (a *Client) GetSchedulerStop(params *GetSchedulerStopParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulerStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulerStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSchedulerStop",
		Method:             "GET",
		PathPattern:        "/api/scheduler/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchedulerStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchedulerStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchedulerStop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSchedulerTrigger Returns HTTP OK (200) when the Octopus Server scheduler has been triggered.
*/
func (a *Client) GetSchedulerTrigger(params *GetSchedulerTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulerTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulerTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSchedulerTrigger",
		Method:             "GET",
		PathPattern:        "/api/scheduler/trigger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchedulerTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchedulerTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchedulerTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
