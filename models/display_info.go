// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DisplayInfo display info
//
// swagger:model DisplayInfo
type DisplayInfo struct {

	// connectivity check
	ConnectivityCheck *ConnectivityCheck `json:"ConnectivityCheck,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// label
	Label string `json:"Label,omitempty"`

	// list Api
	ListAPI *ListAPIMetadata `json:"ListApi,omitempty"`

	// options
	Options *OptionsMetadata `json:"Options,omitempty"`

	// property applicability
	PropertyApplicability *PropertyApplicability `json:"PropertyApplicability,omitempty"`

	// read only
	ReadOnly bool `json:"ReadOnly,omitempty"`

	// required
	Required bool `json:"Required,omitempty"`

	// show copy to clipboard
	ShowCopyToClipboard bool `json:"ShowCopyToClipboard,omitempty"`
}

// Validate validates this display info
func (m *DisplayInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectivityCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyApplicability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DisplayInfo) validateConnectivityCheck(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectivityCheck) { // not required
		return nil
	}

	if m.ConnectivityCheck != nil {
		if err := m.ConnectivityCheck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConnectivityCheck")
			}
			return err
		}
	}

	return nil
}

func (m *DisplayInfo) validateListAPI(formats strfmt.Registry) error {

	if swag.IsZero(m.ListAPI) { // not required
		return nil
	}

	if m.ListAPI != nil {
		if err := m.ListAPI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListApi")
			}
			return err
		}
	}

	return nil
}

func (m *DisplayInfo) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Options")
			}
			return err
		}
	}

	return nil
}

func (m *DisplayInfo) validatePropertyApplicability(formats strfmt.Registry) error {

	if swag.IsZero(m.PropertyApplicability) { // not required
		return nil
	}

	if m.PropertyApplicability != nil {
		if err := m.PropertyApplicability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PropertyApplicability")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DisplayInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DisplayInfo) UnmarshalBinary(b []byte) error {
	var res DisplayInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
