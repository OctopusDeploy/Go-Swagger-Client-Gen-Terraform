// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionTemplateUsageResource action template usage resource
//
// swagger:model ActionTemplateUsageResource
type ActionTemplateUsageResource struct {

	// action Id
	ActionID string `json:"ActionId,omitempty"`

	// action name
	ActionName string `json:"ActionName,omitempty"`

	// action template Id
	ActionTemplateID string `json:"ActionTemplateId,omitempty"`

	// deployment process Id
	DeploymentProcessID string `json:"DeploymentProcessId,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// process Id
	ProcessID string `json:"ProcessId,omitempty"`

	// process type
	// Enum: [Deployment Runbook]
	ProcessType string `json:"ProcessType,omitempty"`

	// project Id
	ProjectID string `json:"ProjectId,omitempty"`

	// project name
	ProjectName string `json:"ProjectName,omitempty"`

	// project slug
	ProjectSlug string `json:"ProjectSlug,omitempty"`

	// runbook Id
	RunbookID string `json:"RunbookId,omitempty"`

	// runbook name
	RunbookName string `json:"RunbookName,omitempty"`

	// step Id
	StepID string `json:"StepId,omitempty"`

	// step name
	StepName string `json:"StepName,omitempty"`

	// version
	Version string `json:"Version,omitempty"`
}

// Validate validates this action template usage resource
func (m *ActionTemplateUsageResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActionTemplateUsageResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var actionTemplateUsageResourceTypeProcessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Deployment","Runbook"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionTemplateUsageResourceTypeProcessTypePropEnum = append(actionTemplateUsageResourceTypeProcessTypePropEnum, v)
	}
}

const (

	// ActionTemplateUsageResourceProcessTypeDeployment captures enum value "Deployment"
	ActionTemplateUsageResourceProcessTypeDeployment string = "Deployment"

	// ActionTemplateUsageResourceProcessTypeRunbook captures enum value "Runbook"
	ActionTemplateUsageResourceProcessTypeRunbook string = "Runbook"
)

// prop value enum
func (m *ActionTemplateUsageResource) validateProcessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionTemplateUsageResourceTypeProcessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionTemplateUsageResource) validateProcessType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessTypeEnum("ProcessType", "body", m.ProcessType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionTemplateUsageResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionTemplateUsageResource) UnmarshalBinary(b []byte) error {
	var res ActionTemplateUsageResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
