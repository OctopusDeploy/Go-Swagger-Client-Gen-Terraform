// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReleasePackageVersionBuildInformation release package version build information
//
// swagger:model ReleasePackageVersionBuildInformation
type ReleasePackageVersionBuildInformation struct {

	// branch
	Branch string `json:"Branch,omitempty"`

	// build environment
	BuildEnvironment string `json:"BuildEnvironment,omitempty"`

	// build number
	BuildNumber string `json:"BuildNumber,omitempty"`

	// build Url
	BuildURL string `json:"BuildUrl,omitempty"`

	// commits
	Commits []*CommitDetails `json:"Commits"`

	// package Id
	PackageID string `json:"PackageId,omitempty"`

	// vcs commit number
	VcsCommitNumber string `json:"VcsCommitNumber,omitempty"`

	// vcs commit Url
	VcsCommitURL string `json:"VcsCommitUrl,omitempty"`

	// vcs root
	VcsRoot string `json:"VcsRoot,omitempty"`

	// vcs type
	VcsType string `json:"VcsType,omitempty"`

	// version
	Version string `json:"Version,omitempty"`

	// work items
	WorkItems []*WorkItemLink `json:"WorkItems"`
}

// Validate validates this release package version build information
func (m *ReleasePackageVersionBuildInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleasePackageVersionBuildInformation) validateCommits(formats strfmt.Registry) error {

	if swag.IsZero(m.Commits) { // not required
		return nil
	}

	for i := 0; i < len(m.Commits); i++ {
		if swag.IsZero(m.Commits[i]) { // not required
			continue
		}

		if m.Commits[i] != nil {
			if err := m.Commits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Commits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleasePackageVersionBuildInformation) validateWorkItems(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItems) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItems); i++ {
		if swag.IsZero(m.WorkItems[i]) { // not required
			continue
		}

		if m.WorkItems[i] != nil {
			if err := m.WorkItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("WorkItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleasePackageVersionBuildInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleasePackageVersionBuildInformation) UnmarshalBinary(b []byte) error {
	var res ReleasePackageVersionBuildInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
