// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentTargetResource deployment target resource
//
// swagger:model DeploymentTargetResource
type DeploymentTargetResource struct {

	// endpoint
	Endpoint *EndpointResource `json:"Endpoint,omitempty"`

	// environment ids
	EnvironmentIds []string `json:"EnvironmentIds"`

	// has latest calamari
	HasLatestCalamari bool `json:"HasLatestCalamari,omitempty"`

	// health status
	// Enum: [HasWarnings Healthy Unavailable Unhealthy Unknown]
	HealthStatus string `json:"HealthStatus,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is disabled
	IsDisabled bool `json:"IsDisabled,omitempty"`

	// is in process
	IsInProcess bool `json:"IsInProcess,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// machine policy Id
	MachinePolicyID string `json:"MachinePolicyId,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// operating system
	OperatingSystem string `json:"OperatingSystem,omitempty"`

	// roles
	Roles []string `json:"Roles"`

	// shell name
	ShellName string `json:"ShellName,omitempty"`

	// shell version
	ShellVersion string `json:"ShellVersion,omitempty"`

	// space Id
	SpaceID string `json:"SpaceId,omitempty"`

	// status
	// Enum: [CalamariNeedsUpgrade Disabled NeedsUpgrade Offline Online Unknown]
	Status string `json:"Status,omitempty"`

	// status summary
	StatusSummary string `json:"StatusSummary,omitempty"`

	// tenant ids
	TenantIds []string `json:"TenantIds"`

	// tenant tags
	TenantTags []string `json:"TenantTags"`

	// tenanted deployment participation
	// Enum: [Tenanted TenantedOrUntenanted Untenanted]
	TenantedDeploymentParticipation string `json:"TenantedDeploymentParticipation,omitempty"`

	// thumbprint
	Thumbprint string `json:"Thumbprint,omitempty"`

	// Uri
	URI string `json:"Uri,omitempty"`
}

// Validate validates this deployment target resource
func (m *DeploymentTargetResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantedDeploymentParticipation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentTargetResource) validateEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoint) { // not required
		return nil
	}

	if m.Endpoint != nil {
		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Endpoint")
			}
			return err
		}
	}

	return nil
}

var deploymentTargetResourceTypeHealthStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HasWarnings","Healthy","Unavailable","Unhealthy","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTargetResourceTypeHealthStatusPropEnum = append(deploymentTargetResourceTypeHealthStatusPropEnum, v)
	}
}

const (

	// DeploymentTargetResourceHealthStatusHasWarnings captures enum value "HasWarnings"
	DeploymentTargetResourceHealthStatusHasWarnings string = "HasWarnings"

	// DeploymentTargetResourceHealthStatusHealthy captures enum value "Healthy"
	DeploymentTargetResourceHealthStatusHealthy string = "Healthy"

	// DeploymentTargetResourceHealthStatusUnavailable captures enum value "Unavailable"
	DeploymentTargetResourceHealthStatusUnavailable string = "Unavailable"

	// DeploymentTargetResourceHealthStatusUnhealthy captures enum value "Unhealthy"
	DeploymentTargetResourceHealthStatusUnhealthy string = "Unhealthy"

	// DeploymentTargetResourceHealthStatusUnknown captures enum value "Unknown"
	DeploymentTargetResourceHealthStatusUnknown string = "Unknown"
)

// prop value enum
func (m *DeploymentTargetResource) validateHealthStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTargetResourceTypeHealthStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentTargetResource) validateHealthStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthStatusEnum("HealthStatus", "body", m.HealthStatus); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentTargetResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var deploymentTargetResourceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CalamariNeedsUpgrade","Disabled","NeedsUpgrade","Offline","Online","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTargetResourceTypeStatusPropEnum = append(deploymentTargetResourceTypeStatusPropEnum, v)
	}
}

const (

	// DeploymentTargetResourceStatusCalamariNeedsUpgrade captures enum value "CalamariNeedsUpgrade"
	DeploymentTargetResourceStatusCalamariNeedsUpgrade string = "CalamariNeedsUpgrade"

	// DeploymentTargetResourceStatusDisabled captures enum value "Disabled"
	DeploymentTargetResourceStatusDisabled string = "Disabled"

	// DeploymentTargetResourceStatusNeedsUpgrade captures enum value "NeedsUpgrade"
	DeploymentTargetResourceStatusNeedsUpgrade string = "NeedsUpgrade"

	// DeploymentTargetResourceStatusOffline captures enum value "Offline"
	DeploymentTargetResourceStatusOffline string = "Offline"

	// DeploymentTargetResourceStatusOnline captures enum value "Online"
	DeploymentTargetResourceStatusOnline string = "Online"

	// DeploymentTargetResourceStatusUnknown captures enum value "Unknown"
	DeploymentTargetResourceStatusUnknown string = "Unknown"
)

// prop value enum
func (m *DeploymentTargetResource) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTargetResourceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentTargetResource) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var deploymentTargetResourceTypeTenantedDeploymentParticipationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tenanted","TenantedOrUntenanted","Untenanted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTargetResourceTypeTenantedDeploymentParticipationPropEnum = append(deploymentTargetResourceTypeTenantedDeploymentParticipationPropEnum, v)
	}
}

const (

	// DeploymentTargetResourceTenantedDeploymentParticipationTenanted captures enum value "Tenanted"
	DeploymentTargetResourceTenantedDeploymentParticipationTenanted string = "Tenanted"

	// DeploymentTargetResourceTenantedDeploymentParticipationTenantedOrUntenanted captures enum value "TenantedOrUntenanted"
	DeploymentTargetResourceTenantedDeploymentParticipationTenantedOrUntenanted string = "TenantedOrUntenanted"

	// DeploymentTargetResourceTenantedDeploymentParticipationUntenanted captures enum value "Untenanted"
	DeploymentTargetResourceTenantedDeploymentParticipationUntenanted string = "Untenanted"
)

// prop value enum
func (m *DeploymentTargetResource) validateTenantedDeploymentParticipationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTargetResourceTypeTenantedDeploymentParticipationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentTargetResource) validateTenantedDeploymentParticipation(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantedDeploymentParticipation) { // not required
		return nil
	}

	// value enum
	if err := m.validateTenantedDeploymentParticipationEnum("TenantedDeploymentParticipation", "body", m.TenantedDeploymentParticipation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentTargetResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentTargetResource) UnmarshalBinary(b []byte) error {
	var res DeploymentTargetResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
