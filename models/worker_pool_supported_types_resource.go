// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkerPoolSupportedTypesResource worker pool supported types resource
//
// swagger:model WorkerPoolSupportedTypesResource
type WorkerPoolSupportedTypesResource struct {

	// Id
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// supported pool types
	SupportedPoolTypes []string `json:"SupportedPoolTypes"`
}

// Validate validates this worker pool supported types resource
func (m *WorkerPoolSupportedTypesResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportedPoolTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workerPoolSupportedTypesResourceSupportedPoolTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DynamicWorkerPool","StaticWorkerPool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workerPoolSupportedTypesResourceSupportedPoolTypesItemsEnum = append(workerPoolSupportedTypesResourceSupportedPoolTypesItemsEnum, v)
	}
}

func (m *WorkerPoolSupportedTypesResource) validateSupportedPoolTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workerPoolSupportedTypesResourceSupportedPoolTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkerPoolSupportedTypesResource) validateSupportedPoolTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedPoolTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedPoolTypes); i++ {

		// value enum
		if err := m.validateSupportedPoolTypesItemsEnum("SupportedPoolTypes"+"."+strconv.Itoa(i), "body", m.SupportedPoolTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkerPoolSupportedTypesResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkerPoolSupportedTypesResource) UnmarshalBinary(b []byte) error {
	var res WorkerPoolSupportedTypesResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
