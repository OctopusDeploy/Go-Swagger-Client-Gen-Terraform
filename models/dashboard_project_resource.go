// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardProjectResource dashboard project resource
//
// swagger:model DashboardProjectResource
type DashboardProjectResource struct {

	// can perform untenanted deployment
	CanPerformUntenantedDeployment bool `json:"CanPerformUntenantedDeployment,omitempty"`

	// environment ids
	EnvironmentIds []string `json:"EnvironmentIds"`

	// Id
	ID string `json:"Id,omitempty"`

	// is disabled
	IsDisabled bool `json:"IsDisabled,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// project group Id
	ProjectGroupID string `json:"ProjectGroupId,omitempty"`

	// slug
	Slug string `json:"Slug,omitempty"`

	// tenanted deployment mode
	// Enum: [Tenanted TenantedOrUntenanted Untenanted]
	TenantedDeploymentMode string `json:"TenantedDeploymentMode,omitempty"`
}

// Validate validates this dashboard project resource
func (m *DashboardProjectResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantedDeploymentMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardProjectResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var dashboardProjectResourceTypeTenantedDeploymentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tenanted","TenantedOrUntenanted","Untenanted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardProjectResourceTypeTenantedDeploymentModePropEnum = append(dashboardProjectResourceTypeTenantedDeploymentModePropEnum, v)
	}
}

const (

	// DashboardProjectResourceTenantedDeploymentModeTenanted captures enum value "Tenanted"
	DashboardProjectResourceTenantedDeploymentModeTenanted string = "Tenanted"

	// DashboardProjectResourceTenantedDeploymentModeTenantedOrUntenanted captures enum value "TenantedOrUntenanted"
	DashboardProjectResourceTenantedDeploymentModeTenantedOrUntenanted string = "TenantedOrUntenanted"

	// DashboardProjectResourceTenantedDeploymentModeUntenanted captures enum value "Untenanted"
	DashboardProjectResourceTenantedDeploymentModeUntenanted string = "Untenanted"
)

// prop value enum
func (m *DashboardProjectResource) validateTenantedDeploymentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dashboardProjectResourceTypeTenantedDeploymentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DashboardProjectResource) validateTenantedDeploymentMode(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantedDeploymentMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateTenantedDeploymentModeEnum("TenantedDeploymentMode", "body", m.TenantedDeploymentMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardProjectResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardProjectResource) UnmarshalBinary(b []byte) error {
	var res DashboardProjectResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
