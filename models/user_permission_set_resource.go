// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPermissionSetResource user permission set resource
//
// swagger:model UserPermissionSetResource
type UserPermissionSetResource struct {

	// Id
	ID string `json:"Id,omitempty"`

	// is permissions complete
	IsPermissionsComplete bool `json:"IsPermissionsComplete,omitempty"`

	// is teams complete
	IsTeamsComplete bool `json:"IsTeamsComplete,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// space permissions
	SpacePermissions *UserPermissionSetResourceSpacePermissions `json:"SpacePermissions,omitempty"`

	// system permissions
	SystemPermissions []string `json:"SystemPermissions"`

	// teams
	Teams []*ProjectedTeamReferenceDataItem `json:"Teams"`
}

// Validate validates this user permission set resource
func (m *UserPermissionSetResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpacePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermissionSetResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserPermissionSetResource) validateSpacePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.SpacePermissions) { // not required
		return nil
	}

	if m.SpacePermissions != nil {
		if err := m.SpacePermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SpacePermissions")
			}
			return err
		}
	}

	return nil
}

var userPermissionSetResourceSystemPermissionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountCreate","AccountDelete","AccountEdit","AccountView","ActionTemplateCreate","ActionTemplateDelete","ActionTemplateEdit","ActionTemplateView","AdministerSystem","ArtifactCreate","ArtifactDelete","ArtifactEdit","ArtifactView","BuildInformationAdminister","BuildInformationPush","BuiltInFeedAdminister","BuiltInFeedDownload","BuiltInFeedPush","CertificateCreate","CertificateDelete","CertificateEdit","CertificateExportPrivateKey","CertificateView","ConfigureServer","DefectReport","DefectResolve","DeploymentCreate","DeploymentDelete","DeploymentView","EnvironmentCreate","EnvironmentDelete","EnvironmentEdit","EnvironmentView","EventView","FeedEdit","FeedView","InterruptionSubmit","InterruptionView","InterruptionViewSubmitResponsible","LibraryVariableSetCreate","LibraryVariableSetDelete","LibraryVariableSetEdit","LibraryVariableSetView","LifecycleCreate","LifecycleDelete","LifecycleEdit","LifecycleView","MachineCreate","MachineDelete","MachineEdit","MachinePolicyCreate","MachinePolicyDelete","MachinePolicyEdit","MachinePolicyView","MachineView","ProcessEdit","ProcessView","ProjectCreate","ProjectDelete","ProjectEdit","ProjectGroupCreate","ProjectGroupDelete","ProjectGroupEdit","ProjectGroupView","ProjectView","ProxyCreate","ProxyDelete","ProxyEdit","ProxyView","ReleaseCreate","ReleaseDelete","ReleaseEdit","ReleaseView","RunbookEdit","RunbookRunCreate","RunbookRunDelete","RunbookRunView","RunbookView","SpaceCreate","SpaceDelete","SpaceEdit","SpaceView","SubscriptionCreate","SubscriptionDelete","SubscriptionEdit","SubscriptionView","TagSetCreate","TagSetDelete","TagSetEdit","TaskCancel","TaskCreate","TaskEdit","TaskView","TeamCreate","TeamDelete","TeamEdit","TeamView","TenantCreate","TenantDelete","TenantEdit","TenantView","TriggerCreate","TriggerDelete","TriggerEdit","TriggerView","UserEdit","UserInvite","UserRoleEdit","UserRoleView","UserView","VariableEdit","VariableEditUnscoped","VariableView","VariableViewUnscoped","WorkerEdit","WorkerView"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userPermissionSetResourceSystemPermissionsItemsEnum = append(userPermissionSetResourceSystemPermissionsItemsEnum, v)
	}
}

func (m *UserPermissionSetResource) validateSystemPermissionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userPermissionSetResourceSystemPermissionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserPermissionSetResource) validateSystemPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemPermissions) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemPermissions); i++ {

		// value enum
		if err := m.validateSystemPermissionsItemsEnum("SystemPermissions"+"."+strconv.Itoa(i), "body", m.SystemPermissions[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *UserPermissionSetResource) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPermissionSetResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPermissionSetResource) UnmarshalBinary(b []byte) error {
	var res UserPermissionSetResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserPermissionSetResourceSpacePermissions user permission set resource space permissions
//
// swagger:model UserPermissionSetResourceSpacePermissions
type UserPermissionSetResourceSpacePermissions struct {

	// account create
	AccountCreate []*UserPermissionRestriction `json:"AccountCreate"`

	// account delete
	AccountDelete []*UserPermissionRestriction `json:"AccountDelete"`

	// account edit
	AccountEdit []*UserPermissionRestriction `json:"AccountEdit"`

	// account view
	AccountView []*UserPermissionRestriction `json:"AccountView"`

	// action template create
	ActionTemplateCreate []*UserPermissionRestriction `json:"ActionTemplateCreate"`

	// action template delete
	ActionTemplateDelete []*UserPermissionRestriction `json:"ActionTemplateDelete"`

	// action template edit
	ActionTemplateEdit []*UserPermissionRestriction `json:"ActionTemplateEdit"`

	// action template view
	ActionTemplateView []*UserPermissionRestriction `json:"ActionTemplateView"`

	// administer system
	AdministerSystem []*UserPermissionRestriction `json:"AdministerSystem"`

	// artifact create
	ArtifactCreate []*UserPermissionRestriction `json:"ArtifactCreate"`

	// artifact delete
	ArtifactDelete []*UserPermissionRestriction `json:"ArtifactDelete"`

	// artifact edit
	ArtifactEdit []*UserPermissionRestriction `json:"ArtifactEdit"`

	// artifact view
	ArtifactView []*UserPermissionRestriction `json:"ArtifactView"`

	// build information administer
	BuildInformationAdminister []*UserPermissionRestriction `json:"BuildInformationAdminister"`

	// build information push
	BuildInformationPush []*UserPermissionRestriction `json:"BuildInformationPush"`

	// built in feed administer
	BuiltInFeedAdminister []*UserPermissionRestriction `json:"BuiltInFeedAdminister"`

	// built in feed download
	BuiltInFeedDownload []*UserPermissionRestriction `json:"BuiltInFeedDownload"`

	// built in feed push
	BuiltInFeedPush []*UserPermissionRestriction `json:"BuiltInFeedPush"`

	// certificate create
	CertificateCreate []*UserPermissionRestriction `json:"CertificateCreate"`

	// certificate delete
	CertificateDelete []*UserPermissionRestriction `json:"CertificateDelete"`

	// certificate edit
	CertificateEdit []*UserPermissionRestriction `json:"CertificateEdit"`

	// certificate export private key
	CertificateExportPrivateKey []*UserPermissionRestriction `json:"CertificateExportPrivateKey"`

	// certificate view
	CertificateView []*UserPermissionRestriction `json:"CertificateView"`

	// configure server
	ConfigureServer []*UserPermissionRestriction `json:"ConfigureServer"`

	// defect report
	DefectReport []*UserPermissionRestriction `json:"DefectReport"`

	// defect resolve
	DefectResolve []*UserPermissionRestriction `json:"DefectResolve"`

	// deployment create
	DeploymentCreate []*UserPermissionRestriction `json:"DeploymentCreate"`

	// deployment delete
	DeploymentDelete []*UserPermissionRestriction `json:"DeploymentDelete"`

	// deployment view
	DeploymentView []*UserPermissionRestriction `json:"DeploymentView"`

	// environment create
	EnvironmentCreate []*UserPermissionRestriction `json:"EnvironmentCreate"`

	// environment delete
	EnvironmentDelete []*UserPermissionRestriction `json:"EnvironmentDelete"`

	// environment edit
	EnvironmentEdit []*UserPermissionRestriction `json:"EnvironmentEdit"`

	// environment view
	EnvironmentView []*UserPermissionRestriction `json:"EnvironmentView"`

	// event view
	EventView []*UserPermissionRestriction `json:"EventView"`

	// feed edit
	FeedEdit []*UserPermissionRestriction `json:"FeedEdit"`

	// feed view
	FeedView []*UserPermissionRestriction `json:"FeedView"`

	// interruption submit
	InterruptionSubmit []*UserPermissionRestriction `json:"InterruptionSubmit"`

	// interruption view
	InterruptionView []*UserPermissionRestriction `json:"InterruptionView"`

	// interruption view submit responsible
	InterruptionViewSubmitResponsible []*UserPermissionRestriction `json:"InterruptionViewSubmitResponsible"`

	// library variable set create
	LibraryVariableSetCreate []*UserPermissionRestriction `json:"LibraryVariableSetCreate"`

	// library variable set delete
	LibraryVariableSetDelete []*UserPermissionRestriction `json:"LibraryVariableSetDelete"`

	// library variable set edit
	LibraryVariableSetEdit []*UserPermissionRestriction `json:"LibraryVariableSetEdit"`

	// library variable set view
	LibraryVariableSetView []*UserPermissionRestriction `json:"LibraryVariableSetView"`

	// lifecycle create
	LifecycleCreate []*UserPermissionRestriction `json:"LifecycleCreate"`

	// lifecycle delete
	LifecycleDelete []*UserPermissionRestriction `json:"LifecycleDelete"`

	// lifecycle edit
	LifecycleEdit []*UserPermissionRestriction `json:"LifecycleEdit"`

	// lifecycle view
	LifecycleView []*UserPermissionRestriction `json:"LifecycleView"`

	// machine create
	MachineCreate []*UserPermissionRestriction `json:"MachineCreate"`

	// machine delete
	MachineDelete []*UserPermissionRestriction `json:"MachineDelete"`

	// machine edit
	MachineEdit []*UserPermissionRestriction `json:"MachineEdit"`

	// machine policy create
	MachinePolicyCreate []*UserPermissionRestriction `json:"MachinePolicyCreate"`

	// machine policy delete
	MachinePolicyDelete []*UserPermissionRestriction `json:"MachinePolicyDelete"`

	// machine policy edit
	MachinePolicyEdit []*UserPermissionRestriction `json:"MachinePolicyEdit"`

	// machine policy view
	MachinePolicyView []*UserPermissionRestriction `json:"MachinePolicyView"`

	// machine view
	MachineView []*UserPermissionRestriction `json:"MachineView"`

	// process edit
	ProcessEdit []*UserPermissionRestriction `json:"ProcessEdit"`

	// process view
	ProcessView []*UserPermissionRestriction `json:"ProcessView"`

	// project create
	ProjectCreate []*UserPermissionRestriction `json:"ProjectCreate"`

	// project delete
	ProjectDelete []*UserPermissionRestriction `json:"ProjectDelete"`

	// project edit
	ProjectEdit []*UserPermissionRestriction `json:"ProjectEdit"`

	// project group create
	ProjectGroupCreate []*UserPermissionRestriction `json:"ProjectGroupCreate"`

	// project group delete
	ProjectGroupDelete []*UserPermissionRestriction `json:"ProjectGroupDelete"`

	// project group edit
	ProjectGroupEdit []*UserPermissionRestriction `json:"ProjectGroupEdit"`

	// project group view
	ProjectGroupView []*UserPermissionRestriction `json:"ProjectGroupView"`

	// project view
	ProjectView []*UserPermissionRestriction `json:"ProjectView"`

	// proxy create
	ProxyCreate []*UserPermissionRestriction `json:"ProxyCreate"`

	// proxy delete
	ProxyDelete []*UserPermissionRestriction `json:"ProxyDelete"`

	// proxy edit
	ProxyEdit []*UserPermissionRestriction `json:"ProxyEdit"`

	// proxy view
	ProxyView []*UserPermissionRestriction `json:"ProxyView"`

	// release create
	ReleaseCreate []*UserPermissionRestriction `json:"ReleaseCreate"`

	// release delete
	ReleaseDelete []*UserPermissionRestriction `json:"ReleaseDelete"`

	// release edit
	ReleaseEdit []*UserPermissionRestriction `json:"ReleaseEdit"`

	// release view
	ReleaseView []*UserPermissionRestriction `json:"ReleaseView"`

	// runbook edit
	RunbookEdit []*UserPermissionRestriction `json:"RunbookEdit"`

	// runbook run create
	RunbookRunCreate []*UserPermissionRestriction `json:"RunbookRunCreate"`

	// runbook run delete
	RunbookRunDelete []*UserPermissionRestriction `json:"RunbookRunDelete"`

	// runbook run view
	RunbookRunView []*UserPermissionRestriction `json:"RunbookRunView"`

	// runbook view
	RunbookView []*UserPermissionRestriction `json:"RunbookView"`

	// space create
	SpaceCreate []*UserPermissionRestriction `json:"SpaceCreate"`

	// space delete
	SpaceDelete []*UserPermissionRestriction `json:"SpaceDelete"`

	// space edit
	SpaceEdit []*UserPermissionRestriction `json:"SpaceEdit"`

	// space view
	SpaceView []*UserPermissionRestriction `json:"SpaceView"`

	// subscription create
	SubscriptionCreate []*UserPermissionRestriction `json:"SubscriptionCreate"`

	// subscription delete
	SubscriptionDelete []*UserPermissionRestriction `json:"SubscriptionDelete"`

	// subscription edit
	SubscriptionEdit []*UserPermissionRestriction `json:"SubscriptionEdit"`

	// subscription view
	SubscriptionView []*UserPermissionRestriction `json:"SubscriptionView"`

	// tag set create
	TagSetCreate []*UserPermissionRestriction `json:"TagSetCreate"`

	// tag set delete
	TagSetDelete []*UserPermissionRestriction `json:"TagSetDelete"`

	// tag set edit
	TagSetEdit []*UserPermissionRestriction `json:"TagSetEdit"`

	// task cancel
	TaskCancel []*UserPermissionRestriction `json:"TaskCancel"`

	// task create
	TaskCreate []*UserPermissionRestriction `json:"TaskCreate"`

	// task edit
	TaskEdit []*UserPermissionRestriction `json:"TaskEdit"`

	// task view
	TaskView []*UserPermissionRestriction `json:"TaskView"`

	// team create
	TeamCreate []*UserPermissionRestriction `json:"TeamCreate"`

	// team delete
	TeamDelete []*UserPermissionRestriction `json:"TeamDelete"`

	// team edit
	TeamEdit []*UserPermissionRestriction `json:"TeamEdit"`

	// team view
	TeamView []*UserPermissionRestriction `json:"TeamView"`

	// tenant create
	TenantCreate []*UserPermissionRestriction `json:"TenantCreate"`

	// tenant delete
	TenantDelete []*UserPermissionRestriction `json:"TenantDelete"`

	// tenant edit
	TenantEdit []*UserPermissionRestriction `json:"TenantEdit"`

	// tenant view
	TenantView []*UserPermissionRestriction `json:"TenantView"`

	// trigger create
	TriggerCreate []*UserPermissionRestriction `json:"TriggerCreate"`

	// trigger delete
	TriggerDelete []*UserPermissionRestriction `json:"TriggerDelete"`

	// trigger edit
	TriggerEdit []*UserPermissionRestriction `json:"TriggerEdit"`

	// trigger view
	TriggerView []*UserPermissionRestriction `json:"TriggerView"`

	// user edit
	UserEdit []*UserPermissionRestriction `json:"UserEdit"`

	// user invite
	UserInvite []*UserPermissionRestriction `json:"UserInvite"`

	// user role edit
	UserRoleEdit []*UserPermissionRestriction `json:"UserRoleEdit"`

	// user role view
	UserRoleView []*UserPermissionRestriction `json:"UserRoleView"`

	// user view
	UserView []*UserPermissionRestriction `json:"UserView"`

	// variable edit
	VariableEdit []*UserPermissionRestriction `json:"VariableEdit"`

	// variable edit unscoped
	VariableEditUnscoped []*UserPermissionRestriction `json:"VariableEditUnscoped"`

	// variable view
	VariableView []*UserPermissionRestriction `json:"VariableView"`

	// variable view unscoped
	VariableViewUnscoped []*UserPermissionRestriction `json:"VariableViewUnscoped"`

	// worker edit
	WorkerEdit []*UserPermissionRestriction `json:"WorkerEdit"`

	// worker view
	WorkerView []*UserPermissionRestriction `json:"WorkerView"`
}

// Validate validates this user permission set resource space permissions
func (m *UserPermissionSetResourceSpacePermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionTemplateView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministerSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildInformationAdminister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildInformationPush(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedAdminister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltInFeedPush(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateExportPrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificateView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigureServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefectReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefectResolve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionSubmit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterruptionViewSubmitResponsible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachinePolicyView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectGroupView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunbookEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunbookRunCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunbookRunDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunbookRunView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunbookView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpaceCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpaceDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpaceEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpaceView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagSetEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserRoleEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserRoleView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableEditUnscoped(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariableViewUnscoped(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerEdit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateAccountCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountCreate); i++ {
		if swag.IsZero(m.AccountCreate[i]) { // not required
			continue
		}

		if m.AccountCreate[i] != nil {
			if err := m.AccountCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "AccountCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateAccountDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountDelete); i++ {
		if swag.IsZero(m.AccountDelete[i]) { // not required
			continue
		}

		if m.AccountDelete[i] != nil {
			if err := m.AccountDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "AccountDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateAccountEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountEdit); i++ {
		if swag.IsZero(m.AccountEdit[i]) { // not required
			continue
		}

		if m.AccountEdit[i] != nil {
			if err := m.AccountEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "AccountEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateAccountView(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountView) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountView); i++ {
		if swag.IsZero(m.AccountView[i]) { // not required
			continue
		}

		if m.AccountView[i] != nil {
			if err := m.AccountView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "AccountView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateActionTemplateCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionTemplateCreate); i++ {
		if swag.IsZero(m.ActionTemplateCreate[i]) { // not required
			continue
		}

		if m.ActionTemplateCreate[i] != nil {
			if err := m.ActionTemplateCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ActionTemplateCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateActionTemplateDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionTemplateDelete); i++ {
		if swag.IsZero(m.ActionTemplateDelete[i]) { // not required
			continue
		}

		if m.ActionTemplateDelete[i] != nil {
			if err := m.ActionTemplateDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ActionTemplateDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateActionTemplateEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionTemplateEdit); i++ {
		if swag.IsZero(m.ActionTemplateEdit[i]) { // not required
			continue
		}

		if m.ActionTemplateEdit[i] != nil {
			if err := m.ActionTemplateEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ActionTemplateEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateActionTemplateView(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionTemplateView) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionTemplateView); i++ {
		if swag.IsZero(m.ActionTemplateView[i]) { // not required
			continue
		}

		if m.ActionTemplateView[i] != nil {
			if err := m.ActionTemplateView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ActionTemplateView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateAdministerSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministerSystem) { // not required
		return nil
	}

	for i := 0; i < len(m.AdministerSystem); i++ {
		if swag.IsZero(m.AdministerSystem[i]) { // not required
			continue
		}

		if m.AdministerSystem[i] != nil {
			if err := m.AdministerSystem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "AdministerSystem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateArtifactCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactCreate); i++ {
		if swag.IsZero(m.ArtifactCreate[i]) { // not required
			continue
		}

		if m.ArtifactCreate[i] != nil {
			if err := m.ArtifactCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ArtifactCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateArtifactDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactDelete); i++ {
		if swag.IsZero(m.ArtifactDelete[i]) { // not required
			continue
		}

		if m.ArtifactDelete[i] != nil {
			if err := m.ArtifactDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ArtifactDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateArtifactEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactEdit); i++ {
		if swag.IsZero(m.ArtifactEdit[i]) { // not required
			continue
		}

		if m.ArtifactEdit[i] != nil {
			if err := m.ArtifactEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ArtifactEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateArtifactView(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactView) { // not required
		return nil
	}

	for i := 0; i < len(m.ArtifactView); i++ {
		if swag.IsZero(m.ArtifactView[i]) { // not required
			continue
		}

		if m.ArtifactView[i] != nil {
			if err := m.ArtifactView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ArtifactView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateBuildInformationAdminister(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildInformationAdminister) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildInformationAdminister); i++ {
		if swag.IsZero(m.BuildInformationAdminister[i]) { // not required
			continue
		}

		if m.BuildInformationAdminister[i] != nil {
			if err := m.BuildInformationAdminister[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "BuildInformationAdminister" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateBuildInformationPush(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildInformationPush) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildInformationPush); i++ {
		if swag.IsZero(m.BuildInformationPush[i]) { // not required
			continue
		}

		if m.BuildInformationPush[i] != nil {
			if err := m.BuildInformationPush[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "BuildInformationPush" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateBuiltInFeedAdminister(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedAdminister) { // not required
		return nil
	}

	for i := 0; i < len(m.BuiltInFeedAdminister); i++ {
		if swag.IsZero(m.BuiltInFeedAdminister[i]) { // not required
			continue
		}

		if m.BuiltInFeedAdminister[i] != nil {
			if err := m.BuiltInFeedAdminister[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "BuiltInFeedAdminister" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateBuiltInFeedDownload(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedDownload) { // not required
		return nil
	}

	for i := 0; i < len(m.BuiltInFeedDownload); i++ {
		if swag.IsZero(m.BuiltInFeedDownload[i]) { // not required
			continue
		}

		if m.BuiltInFeedDownload[i] != nil {
			if err := m.BuiltInFeedDownload[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "BuiltInFeedDownload" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateBuiltInFeedPush(formats strfmt.Registry) error {

	if swag.IsZero(m.BuiltInFeedPush) { // not required
		return nil
	}

	for i := 0; i < len(m.BuiltInFeedPush); i++ {
		if swag.IsZero(m.BuiltInFeedPush[i]) { // not required
			continue
		}

		if m.BuiltInFeedPush[i] != nil {
			if err := m.BuiltInFeedPush[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "BuiltInFeedPush" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateCertificateCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateCreate); i++ {
		if swag.IsZero(m.CertificateCreate[i]) { // not required
			continue
		}

		if m.CertificateCreate[i] != nil {
			if err := m.CertificateCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "CertificateCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateCertificateDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateDelete); i++ {
		if swag.IsZero(m.CertificateDelete[i]) { // not required
			continue
		}

		if m.CertificateDelete[i] != nil {
			if err := m.CertificateDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "CertificateDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateCertificateEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateEdit); i++ {
		if swag.IsZero(m.CertificateEdit[i]) { // not required
			continue
		}

		if m.CertificateEdit[i] != nil {
			if err := m.CertificateEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "CertificateEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateCertificateExportPrivateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateExportPrivateKey) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateExportPrivateKey); i++ {
		if swag.IsZero(m.CertificateExportPrivateKey[i]) { // not required
			continue
		}

		if m.CertificateExportPrivateKey[i] != nil {
			if err := m.CertificateExportPrivateKey[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "CertificateExportPrivateKey" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateCertificateView(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateView) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificateView); i++ {
		if swag.IsZero(m.CertificateView[i]) { // not required
			continue
		}

		if m.CertificateView[i] != nil {
			if err := m.CertificateView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "CertificateView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateConfigureServer(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigureServer) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigureServer); i++ {
		if swag.IsZero(m.ConfigureServer[i]) { // not required
			continue
		}

		if m.ConfigureServer[i] != nil {
			if err := m.ConfigureServer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ConfigureServer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateDefectReport(formats strfmt.Registry) error {

	if swag.IsZero(m.DefectReport) { // not required
		return nil
	}

	for i := 0; i < len(m.DefectReport); i++ {
		if swag.IsZero(m.DefectReport[i]) { // not required
			continue
		}

		if m.DefectReport[i] != nil {
			if err := m.DefectReport[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "DefectReport" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateDefectResolve(formats strfmt.Registry) error {

	if swag.IsZero(m.DefectResolve) { // not required
		return nil
	}

	for i := 0; i < len(m.DefectResolve); i++ {
		if swag.IsZero(m.DefectResolve[i]) { // not required
			continue
		}

		if m.DefectResolve[i] != nil {
			if err := m.DefectResolve[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "DefectResolve" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateDeploymentCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentCreate); i++ {
		if swag.IsZero(m.DeploymentCreate[i]) { // not required
			continue
		}

		if m.DeploymentCreate[i] != nil {
			if err := m.DeploymentCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "DeploymentCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateDeploymentDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentDelete); i++ {
		if swag.IsZero(m.DeploymentDelete[i]) { // not required
			continue
		}

		if m.DeploymentDelete[i] != nil {
			if err := m.DeploymentDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "DeploymentDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateDeploymentView(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentView) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentView); i++ {
		if swag.IsZero(m.DeploymentView[i]) { // not required
			continue
		}

		if m.DeploymentView[i] != nil {
			if err := m.DeploymentView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "DeploymentView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateEnvironmentCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentCreate); i++ {
		if swag.IsZero(m.EnvironmentCreate[i]) { // not required
			continue
		}

		if m.EnvironmentCreate[i] != nil {
			if err := m.EnvironmentCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "EnvironmentCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateEnvironmentDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentDelete); i++ {
		if swag.IsZero(m.EnvironmentDelete[i]) { // not required
			continue
		}

		if m.EnvironmentDelete[i] != nil {
			if err := m.EnvironmentDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "EnvironmentDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateEnvironmentEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentEdit); i++ {
		if swag.IsZero(m.EnvironmentEdit[i]) { // not required
			continue
		}

		if m.EnvironmentEdit[i] != nil {
			if err := m.EnvironmentEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "EnvironmentEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateEnvironmentView(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentView) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentView); i++ {
		if swag.IsZero(m.EnvironmentView[i]) { // not required
			continue
		}

		if m.EnvironmentView[i] != nil {
			if err := m.EnvironmentView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "EnvironmentView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateEventView(formats strfmt.Registry) error {

	if swag.IsZero(m.EventView) { // not required
		return nil
	}

	for i := 0; i < len(m.EventView); i++ {
		if swag.IsZero(m.EventView[i]) { // not required
			continue
		}

		if m.EventView[i] != nil {
			if err := m.EventView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "EventView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateFeedEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.FeedEdit); i++ {
		if swag.IsZero(m.FeedEdit[i]) { // not required
			continue
		}

		if m.FeedEdit[i] != nil {
			if err := m.FeedEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "FeedEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateFeedView(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedView) { // not required
		return nil
	}

	for i := 0; i < len(m.FeedView); i++ {
		if swag.IsZero(m.FeedView[i]) { // not required
			continue
		}

		if m.FeedView[i] != nil {
			if err := m.FeedView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "FeedView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateInterruptionSubmit(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionSubmit) { // not required
		return nil
	}

	for i := 0; i < len(m.InterruptionSubmit); i++ {
		if swag.IsZero(m.InterruptionSubmit[i]) { // not required
			continue
		}

		if m.InterruptionSubmit[i] != nil {
			if err := m.InterruptionSubmit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "InterruptionSubmit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateInterruptionView(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionView) { // not required
		return nil
	}

	for i := 0; i < len(m.InterruptionView); i++ {
		if swag.IsZero(m.InterruptionView[i]) { // not required
			continue
		}

		if m.InterruptionView[i] != nil {
			if err := m.InterruptionView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "InterruptionView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateInterruptionViewSubmitResponsible(formats strfmt.Registry) error {

	if swag.IsZero(m.InterruptionViewSubmitResponsible) { // not required
		return nil
	}

	for i := 0; i < len(m.InterruptionViewSubmitResponsible); i++ {
		if swag.IsZero(m.InterruptionViewSubmitResponsible[i]) { // not required
			continue
		}

		if m.InterruptionViewSubmitResponsible[i] != nil {
			if err := m.InterruptionViewSubmitResponsible[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "InterruptionViewSubmitResponsible" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateLibraryVariableSetCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetCreate); i++ {
		if swag.IsZero(m.LibraryVariableSetCreate[i]) { // not required
			continue
		}

		if m.LibraryVariableSetCreate[i] != nil {
			if err := m.LibraryVariableSetCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "LibraryVariableSetCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateLibraryVariableSetDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetDelete); i++ {
		if swag.IsZero(m.LibraryVariableSetDelete[i]) { // not required
			continue
		}

		if m.LibraryVariableSetDelete[i] != nil {
			if err := m.LibraryVariableSetDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "LibraryVariableSetDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateLibraryVariableSetEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetEdit); i++ {
		if swag.IsZero(m.LibraryVariableSetEdit[i]) { // not required
			continue
		}

		if m.LibraryVariableSetEdit[i] != nil {
			if err := m.LibraryVariableSetEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "LibraryVariableSetEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateLibraryVariableSetView(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetView) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetView); i++ {
		if swag.IsZero(m.LibraryVariableSetView[i]) { // not required
			continue
		}

		if m.LibraryVariableSetView[i] != nil {
			if err := m.LibraryVariableSetView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "LibraryVariableSetView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateLifecycleCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.LifecycleCreate); i++ {
		if swag.IsZero(m.LifecycleCreate[i]) { // not required
			continue
		}

		if m.LifecycleCreate[i] != nil {
			if err := m.LifecycleCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "LifecycleCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateLifecycleDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.LifecycleDelete); i++ {
		if swag.IsZero(m.LifecycleDelete[i]) { // not required
			continue
		}

		if m.LifecycleDelete[i] != nil {
			if err := m.LifecycleDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "LifecycleDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateLifecycleEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.LifecycleEdit); i++ {
		if swag.IsZero(m.LifecycleEdit[i]) { // not required
			continue
		}

		if m.LifecycleEdit[i] != nil {
			if err := m.LifecycleEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "LifecycleEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateLifecycleView(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleView) { // not required
		return nil
	}

	for i := 0; i < len(m.LifecycleView); i++ {
		if swag.IsZero(m.LifecycleView[i]) { // not required
			continue
		}

		if m.LifecycleView[i] != nil {
			if err := m.LifecycleView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "LifecycleView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateMachineCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineCreate); i++ {
		if swag.IsZero(m.MachineCreate[i]) { // not required
			continue
		}

		if m.MachineCreate[i] != nil {
			if err := m.MachineCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "MachineCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateMachineDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineDelete); i++ {
		if swag.IsZero(m.MachineDelete[i]) { // not required
			continue
		}

		if m.MachineDelete[i] != nil {
			if err := m.MachineDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "MachineDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateMachineEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineEdit); i++ {
		if swag.IsZero(m.MachineEdit[i]) { // not required
			continue
		}

		if m.MachineEdit[i] != nil {
			if err := m.MachineEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "MachineEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateMachinePolicyCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePolicyCreate); i++ {
		if swag.IsZero(m.MachinePolicyCreate[i]) { // not required
			continue
		}

		if m.MachinePolicyCreate[i] != nil {
			if err := m.MachinePolicyCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "MachinePolicyCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateMachinePolicyDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePolicyDelete); i++ {
		if swag.IsZero(m.MachinePolicyDelete[i]) { // not required
			continue
		}

		if m.MachinePolicyDelete[i] != nil {
			if err := m.MachinePolicyDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "MachinePolicyDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateMachinePolicyEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePolicyEdit); i++ {
		if swag.IsZero(m.MachinePolicyEdit[i]) { // not required
			continue
		}

		if m.MachinePolicyEdit[i] != nil {
			if err := m.MachinePolicyEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "MachinePolicyEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateMachinePolicyView(formats strfmt.Registry) error {

	if swag.IsZero(m.MachinePolicyView) { // not required
		return nil
	}

	for i := 0; i < len(m.MachinePolicyView); i++ {
		if swag.IsZero(m.MachinePolicyView[i]) { // not required
			continue
		}

		if m.MachinePolicyView[i] != nil {
			if err := m.MachinePolicyView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "MachinePolicyView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateMachineView(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineView) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineView); i++ {
		if swag.IsZero(m.MachineView[i]) { // not required
			continue
		}

		if m.MachineView[i] != nil {
			if err := m.MachineView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "MachineView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProcessEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessEdit); i++ {
		if swag.IsZero(m.ProcessEdit[i]) { // not required
			continue
		}

		if m.ProcessEdit[i] != nil {
			if err := m.ProcessEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProcessEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProcessView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessView) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessView); i++ {
		if swag.IsZero(m.ProcessView[i]) { // not required
			continue
		}

		if m.ProcessView[i] != nil {
			if err := m.ProcessView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProcessView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProjectCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectCreate); i++ {
		if swag.IsZero(m.ProjectCreate[i]) { // not required
			continue
		}

		if m.ProjectCreate[i] != nil {
			if err := m.ProjectCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProjectCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProjectDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectDelete); i++ {
		if swag.IsZero(m.ProjectDelete[i]) { // not required
			continue
		}

		if m.ProjectDelete[i] != nil {
			if err := m.ProjectDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProjectDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProjectEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectEdit); i++ {
		if swag.IsZero(m.ProjectEdit[i]) { // not required
			continue
		}

		if m.ProjectEdit[i] != nil {
			if err := m.ProjectEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProjectEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProjectGroupCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectGroupCreate); i++ {
		if swag.IsZero(m.ProjectGroupCreate[i]) { // not required
			continue
		}

		if m.ProjectGroupCreate[i] != nil {
			if err := m.ProjectGroupCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProjectGroupCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProjectGroupDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectGroupDelete); i++ {
		if swag.IsZero(m.ProjectGroupDelete[i]) { // not required
			continue
		}

		if m.ProjectGroupDelete[i] != nil {
			if err := m.ProjectGroupDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProjectGroupDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProjectGroupEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectGroupEdit); i++ {
		if swag.IsZero(m.ProjectGroupEdit[i]) { // not required
			continue
		}

		if m.ProjectGroupEdit[i] != nil {
			if err := m.ProjectGroupEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProjectGroupEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProjectGroupView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectGroupView) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectGroupView); i++ {
		if swag.IsZero(m.ProjectGroupView[i]) { // not required
			continue
		}

		if m.ProjectGroupView[i] != nil {
			if err := m.ProjectGroupView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProjectGroupView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProjectView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectView) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectView); i++ {
		if swag.IsZero(m.ProjectView[i]) { // not required
			continue
		}

		if m.ProjectView[i] != nil {
			if err := m.ProjectView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProjectView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProxyCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyCreate); i++ {
		if swag.IsZero(m.ProxyCreate[i]) { // not required
			continue
		}

		if m.ProxyCreate[i] != nil {
			if err := m.ProxyCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProxyCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProxyDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyDelete); i++ {
		if swag.IsZero(m.ProxyDelete[i]) { // not required
			continue
		}

		if m.ProxyDelete[i] != nil {
			if err := m.ProxyDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProxyDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProxyEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyEdit); i++ {
		if swag.IsZero(m.ProxyEdit[i]) { // not required
			continue
		}

		if m.ProxyEdit[i] != nil {
			if err := m.ProxyEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProxyEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateProxyView(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyView) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyView); i++ {
		if swag.IsZero(m.ProxyView[i]) { // not required
			continue
		}

		if m.ProxyView[i] != nil {
			if err := m.ProxyView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ProxyView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateReleaseCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseCreate); i++ {
		if swag.IsZero(m.ReleaseCreate[i]) { // not required
			continue
		}

		if m.ReleaseCreate[i] != nil {
			if err := m.ReleaseCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ReleaseCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateReleaseDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseDelete); i++ {
		if swag.IsZero(m.ReleaseDelete[i]) { // not required
			continue
		}

		if m.ReleaseDelete[i] != nil {
			if err := m.ReleaseDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ReleaseDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateReleaseEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseEdit); i++ {
		if swag.IsZero(m.ReleaseEdit[i]) { // not required
			continue
		}

		if m.ReleaseEdit[i] != nil {
			if err := m.ReleaseEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ReleaseEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateReleaseView(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseView) { // not required
		return nil
	}

	for i := 0; i < len(m.ReleaseView); i++ {
		if swag.IsZero(m.ReleaseView[i]) { // not required
			continue
		}

		if m.ReleaseView[i] != nil {
			if err := m.ReleaseView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "ReleaseView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateRunbookEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.RunbookEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.RunbookEdit); i++ {
		if swag.IsZero(m.RunbookEdit[i]) { // not required
			continue
		}

		if m.RunbookEdit[i] != nil {
			if err := m.RunbookEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "RunbookEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateRunbookRunCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.RunbookRunCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.RunbookRunCreate); i++ {
		if swag.IsZero(m.RunbookRunCreate[i]) { // not required
			continue
		}

		if m.RunbookRunCreate[i] != nil {
			if err := m.RunbookRunCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "RunbookRunCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateRunbookRunDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.RunbookRunDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.RunbookRunDelete); i++ {
		if swag.IsZero(m.RunbookRunDelete[i]) { // not required
			continue
		}

		if m.RunbookRunDelete[i] != nil {
			if err := m.RunbookRunDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "RunbookRunDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateRunbookRunView(formats strfmt.Registry) error {

	if swag.IsZero(m.RunbookRunView) { // not required
		return nil
	}

	for i := 0; i < len(m.RunbookRunView); i++ {
		if swag.IsZero(m.RunbookRunView[i]) { // not required
			continue
		}

		if m.RunbookRunView[i] != nil {
			if err := m.RunbookRunView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "RunbookRunView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateRunbookView(formats strfmt.Registry) error {

	if swag.IsZero(m.RunbookView) { // not required
		return nil
	}

	for i := 0; i < len(m.RunbookView); i++ {
		if swag.IsZero(m.RunbookView[i]) { // not required
			continue
		}

		if m.RunbookView[i] != nil {
			if err := m.RunbookView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "RunbookView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateSpaceCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.SpaceCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.SpaceCreate); i++ {
		if swag.IsZero(m.SpaceCreate[i]) { // not required
			continue
		}

		if m.SpaceCreate[i] != nil {
			if err := m.SpaceCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "SpaceCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateSpaceDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.SpaceDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.SpaceDelete); i++ {
		if swag.IsZero(m.SpaceDelete[i]) { // not required
			continue
		}

		if m.SpaceDelete[i] != nil {
			if err := m.SpaceDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "SpaceDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateSpaceEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.SpaceEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.SpaceEdit); i++ {
		if swag.IsZero(m.SpaceEdit[i]) { // not required
			continue
		}

		if m.SpaceEdit[i] != nil {
			if err := m.SpaceEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "SpaceEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateSpaceView(formats strfmt.Registry) error {

	if swag.IsZero(m.SpaceView) { // not required
		return nil
	}

	for i := 0; i < len(m.SpaceView); i++ {
		if swag.IsZero(m.SpaceView[i]) { // not required
			continue
		}

		if m.SpaceView[i] != nil {
			if err := m.SpaceView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "SpaceView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateSubscriptionCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionCreate); i++ {
		if swag.IsZero(m.SubscriptionCreate[i]) { // not required
			continue
		}

		if m.SubscriptionCreate[i] != nil {
			if err := m.SubscriptionCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "SubscriptionCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateSubscriptionDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionDelete); i++ {
		if swag.IsZero(m.SubscriptionDelete[i]) { // not required
			continue
		}

		if m.SubscriptionDelete[i] != nil {
			if err := m.SubscriptionDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "SubscriptionDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateSubscriptionEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionEdit); i++ {
		if swag.IsZero(m.SubscriptionEdit[i]) { // not required
			continue
		}

		if m.SubscriptionEdit[i] != nil {
			if err := m.SubscriptionEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "SubscriptionEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateSubscriptionView(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionView) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionView); i++ {
		if swag.IsZero(m.SubscriptionView[i]) { // not required
			continue
		}

		if m.SubscriptionView[i] != nil {
			if err := m.SubscriptionView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "SubscriptionView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTagSetCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TagSetCreate); i++ {
		if swag.IsZero(m.TagSetCreate[i]) { // not required
			continue
		}

		if m.TagSetCreate[i] != nil {
			if err := m.TagSetCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TagSetCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTagSetDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.TagSetDelete); i++ {
		if swag.IsZero(m.TagSetDelete[i]) { // not required
			continue
		}

		if m.TagSetDelete[i] != nil {
			if err := m.TagSetDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TagSetDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTagSetEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TagSetEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TagSetEdit); i++ {
		if swag.IsZero(m.TagSetEdit[i]) { // not required
			continue
		}

		if m.TagSetEdit[i] != nil {
			if err := m.TagSetEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TagSetEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTaskCancel(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskCancel) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskCancel); i++ {
		if swag.IsZero(m.TaskCancel[i]) { // not required
			continue
		}

		if m.TaskCancel[i] != nil {
			if err := m.TaskCancel[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TaskCancel" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTaskCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskCreate); i++ {
		if swag.IsZero(m.TaskCreate[i]) { // not required
			continue
		}

		if m.TaskCreate[i] != nil {
			if err := m.TaskCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TaskCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTaskEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskEdit); i++ {
		if swag.IsZero(m.TaskEdit[i]) { // not required
			continue
		}

		if m.TaskEdit[i] != nil {
			if err := m.TaskEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TaskEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTaskView(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskView) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskView); i++ {
		if swag.IsZero(m.TaskView[i]) { // not required
			continue
		}

		if m.TaskView[i] != nil {
			if err := m.TaskView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TaskView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTeamCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamCreate); i++ {
		if swag.IsZero(m.TeamCreate[i]) { // not required
			continue
		}

		if m.TeamCreate[i] != nil {
			if err := m.TeamCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TeamCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTeamDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamDelete); i++ {
		if swag.IsZero(m.TeamDelete[i]) { // not required
			continue
		}

		if m.TeamDelete[i] != nil {
			if err := m.TeamDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TeamDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTeamEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamEdit); i++ {
		if swag.IsZero(m.TeamEdit[i]) { // not required
			continue
		}

		if m.TeamEdit[i] != nil {
			if err := m.TeamEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TeamEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTeamView(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamView) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamView); i++ {
		if swag.IsZero(m.TeamView[i]) { // not required
			continue
		}

		if m.TeamView[i] != nil {
			if err := m.TeamView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TeamView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTenantCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantCreate); i++ {
		if swag.IsZero(m.TenantCreate[i]) { // not required
			continue
		}

		if m.TenantCreate[i] != nil {
			if err := m.TenantCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TenantCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTenantDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantDelete); i++ {
		if swag.IsZero(m.TenantDelete[i]) { // not required
			continue
		}

		if m.TenantDelete[i] != nil {
			if err := m.TenantDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TenantDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTenantEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantEdit); i++ {
		if swag.IsZero(m.TenantEdit[i]) { // not required
			continue
		}

		if m.TenantEdit[i] != nil {
			if err := m.TenantEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TenantEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTenantView(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantView) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantView); i++ {
		if swag.IsZero(m.TenantView[i]) { // not required
			continue
		}

		if m.TenantView[i] != nil {
			if err := m.TenantView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TenantView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTriggerCreate(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerCreate); i++ {
		if swag.IsZero(m.TriggerCreate[i]) { // not required
			continue
		}

		if m.TriggerCreate[i] != nil {
			if err := m.TriggerCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TriggerCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTriggerDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerDelete); i++ {
		if swag.IsZero(m.TriggerDelete[i]) { // not required
			continue
		}

		if m.TriggerDelete[i] != nil {
			if err := m.TriggerDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TriggerDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTriggerEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerEdit); i++ {
		if swag.IsZero(m.TriggerEdit[i]) { // not required
			continue
		}

		if m.TriggerEdit[i] != nil {
			if err := m.TriggerEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TriggerEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateTriggerView(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerView) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerView); i++ {
		if swag.IsZero(m.TriggerView[i]) { // not required
			continue
		}

		if m.TriggerView[i] != nil {
			if err := m.TriggerView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "TriggerView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateUserEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.UserEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.UserEdit); i++ {
		if swag.IsZero(m.UserEdit[i]) { // not required
			continue
		}

		if m.UserEdit[i] != nil {
			if err := m.UserEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "UserEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateUserInvite(formats strfmt.Registry) error {

	if swag.IsZero(m.UserInvite) { // not required
		return nil
	}

	for i := 0; i < len(m.UserInvite); i++ {
		if swag.IsZero(m.UserInvite[i]) { // not required
			continue
		}

		if m.UserInvite[i] != nil {
			if err := m.UserInvite[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "UserInvite" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateUserRoleEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.UserRoleEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.UserRoleEdit); i++ {
		if swag.IsZero(m.UserRoleEdit[i]) { // not required
			continue
		}

		if m.UserRoleEdit[i] != nil {
			if err := m.UserRoleEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "UserRoleEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateUserRoleView(formats strfmt.Registry) error {

	if swag.IsZero(m.UserRoleView) { // not required
		return nil
	}

	for i := 0; i < len(m.UserRoleView); i++ {
		if swag.IsZero(m.UserRoleView[i]) { // not required
			continue
		}

		if m.UserRoleView[i] != nil {
			if err := m.UserRoleView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "UserRoleView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateUserView(formats strfmt.Registry) error {

	if swag.IsZero(m.UserView) { // not required
		return nil
	}

	for i := 0; i < len(m.UserView); i++ {
		if swag.IsZero(m.UserView[i]) { // not required
			continue
		}

		if m.UserView[i] != nil {
			if err := m.UserView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "UserView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateVariableEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableEdit); i++ {
		if swag.IsZero(m.VariableEdit[i]) { // not required
			continue
		}

		if m.VariableEdit[i] != nil {
			if err := m.VariableEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "VariableEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateVariableEditUnscoped(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableEditUnscoped) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableEditUnscoped); i++ {
		if swag.IsZero(m.VariableEditUnscoped[i]) { // not required
			continue
		}

		if m.VariableEditUnscoped[i] != nil {
			if err := m.VariableEditUnscoped[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "VariableEditUnscoped" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateVariableView(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableView) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableView); i++ {
		if swag.IsZero(m.VariableView[i]) { // not required
			continue
		}

		if m.VariableView[i] != nil {
			if err := m.VariableView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "VariableView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateVariableViewUnscoped(formats strfmt.Registry) error {

	if swag.IsZero(m.VariableViewUnscoped) { // not required
		return nil
	}

	for i := 0; i < len(m.VariableViewUnscoped); i++ {
		if swag.IsZero(m.VariableViewUnscoped[i]) { // not required
			continue
		}

		if m.VariableViewUnscoped[i] != nil {
			if err := m.VariableViewUnscoped[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "VariableViewUnscoped" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateWorkerEdit(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkerEdit) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkerEdit); i++ {
		if swag.IsZero(m.WorkerEdit[i]) { // not required
			continue
		}

		if m.WorkerEdit[i] != nil {
			if err := m.WorkerEdit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "WorkerEdit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionSetResourceSpacePermissions) validateWorkerView(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkerView) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkerView); i++ {
		if swag.IsZero(m.WorkerView[i]) { // not required
			continue
		}

		if m.WorkerView[i] != nil {
			if err := m.WorkerView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SpacePermissions" + "." + "WorkerView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPermissionSetResourceSpacePermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPermissionSetResourceSpacePermissions) UnmarshalBinary(b []byte) error {
	var res UserPermissionSetResourceSpacePermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
