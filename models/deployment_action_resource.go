// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentActionResource deployment action resource
//
// swagger:model DeploymentActionResource
type DeploymentActionResource struct {

	// action type
	ActionType string `json:"ActionType,omitempty"`

	// can be used for project versioning
	CanBeUsedForProjectVersioning bool `json:"CanBeUsedForProjectVersioning,omitempty"`

	// channels
	// Read Only: true
	Channels []string `json:"Channels"`

	// condition
	// Enum: [Success Variable]
	Condition string `json:"Condition,omitempty"`

	// container
	Container *DeploymentActionContainerResource `json:"Container,omitempty"`

	// environments
	// Read Only: true
	Environments []string `json:"Environments"`

	// excluded environments
	// Read Only: true
	ExcludedEnvironments []string `json:"ExcludedEnvironments"`

	// Id
	ID string `json:"Id,omitempty"`

	// is disabled
	IsDisabled bool `json:"IsDisabled,omitempty"`

	// is required
	IsRequired bool `json:"IsRequired,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// packages
	Packages []*PackageReference `json:"Packages"`

	// properties
	// Read Only: true
	Properties map[string]PropertyValueResource `json:"Properties,omitempty"`

	// tenant tags
	// Read Only: true
	TenantTags []string `json:"TenantTags"`

	// worker pool Id
	WorkerPoolID string `json:"WorkerPoolId,omitempty"`

	// worker pool variable
	WorkerPoolVariable string `json:"WorkerPoolVariable,omitempty"`
}

// Validate validates this deployment action resource
func (m *DeploymentActionResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deploymentActionResourceTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Variable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentActionResourceTypeConditionPropEnum = append(deploymentActionResourceTypeConditionPropEnum, v)
	}
}

const (

	// DeploymentActionResourceConditionSuccess captures enum value "Success"
	DeploymentActionResourceConditionSuccess string = "Success"

	// DeploymentActionResourceConditionVariable captures enum value "Variable"
	DeploymentActionResourceConditionVariable string = "Variable"
)

// prop value enum
func (m *DeploymentActionResource) validateConditionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentActionResourceTypeConditionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentActionResource) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionEnum("Condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentActionResource) validateContainer(formats strfmt.Registry) error {

	if swag.IsZero(m.Container) { // not required
		return nil
	}

	if m.Container != nil {
		if err := m.Container.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Container")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentActionResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentActionResource) validatePackages(formats strfmt.Registry) error {

	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	for i := 0; i < len(m.Packages); i++ {
		if swag.IsZero(m.Packages[i]) { // not required
			continue
		}

		if m.Packages[i] != nil {
			if err := m.Packages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentActionResource) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for k := range m.Properties {

		if err := validate.Required("Properties"+"."+k, "body", m.Properties[k]); err != nil {
			return err
		}
		if val, ok := m.Properties[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentActionResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentActionResource) UnmarshalBinary(b []byte) error {
	var res DeploymentActionResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
