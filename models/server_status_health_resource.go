// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerStatusHealthResource server status health resource
//
// swagger:model ServerStatusHealthResource
type ServerStatusHealthResource struct {

	// description
	Description string `json:"Description,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is compliant with license
	IsCompliantWithLicense bool `json:"IsCompliantWithLicense,omitempty"`

	// is entire cluster draining tasks
	IsEntireClusterDrainingTasks bool `json:"IsEntireClusterDrainingTasks,omitempty"`

	// is entire cluster read only
	IsEntireClusterReadOnly bool `json:"IsEntireClusterReadOnly,omitempty"`

	// is operating normally
	// Read Only: true
	IsOperatingNormally *bool `json:"IsOperatingNormally,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`
}

// Validate validates this server status health resource
func (m *ServerStatusHealthResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerStatusHealthResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerStatusHealthResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerStatusHealthResource) UnmarshalBinary(b []byte) error {
	var res ServerStatusHealthResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
