// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskResource task resource
//
// swagger:model TaskResource
type TaskResource struct {

	// arguments
	Arguments map[string]interface{} `json:"Arguments,omitempty"`

	// can rerun
	CanRerun bool `json:"CanRerun,omitempty"`

	// completed
	Completed string `json:"Completed,omitempty"`

	// completed time
	// Format: date-time
	CompletedTime strfmt.DateTime `json:"CompletedTime,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// duration
	Duration string `json:"Duration,omitempty"`

	// error message
	ErrorMessage string `json:"ErrorMessage,omitempty"`

	// finished successfully
	// Read Only: true
	FinishedSuccessfully *bool `json:"FinishedSuccessfully,omitempty"`

	// has been picked up by processor
	HasBeenPickedUpByProcessor bool `json:"HasBeenPickedUpByProcessor,omitempty"`

	// has pending interruptions
	HasPendingInterruptions bool `json:"HasPendingInterruptions,omitempty"`

	// has warnings or errors
	HasWarningsOrErrors bool `json:"HasWarningsOrErrors,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is completed
	// Read Only: true
	IsCompleted *bool `json:"IsCompleted,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// last updated time
	// Format: date-time
	LastUpdatedTime strfmt.DateTime `json:"LastUpdatedTime,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// queue time
	// Format: date-time
	QueueTime strfmt.DateTime `json:"QueueTime,omitempty"`

	// queue time expiry
	// Format: date-time
	QueueTimeExpiry strfmt.DateTime `json:"QueueTimeExpiry,omitempty"`

	// server node
	ServerNode string `json:"ServerNode,omitempty"`

	// space Id
	SpaceID string `json:"SpaceId,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"StartTime,omitempty"`

	// state
	// Enum: [Canceled Cancelling Executing Failed Queued Success TimedOut]
	State string `json:"State,omitempty"`
}

// Validate validates this task resource
func (m *TaskResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueTimeExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskResource) validateCompletedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CompletedTime", "body", "date-time", m.CompletedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskResource) validateLastUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastUpdatedTime", "body", "date-time", m.LastUpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskResource) validateQueueTime(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueTime) { // not required
		return nil
	}

	if err := validate.FormatOf("QueueTime", "body", "date-time", m.QueueTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskResource) validateQueueTimeExpiry(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueTimeExpiry) { // not required
		return nil
	}

	if err := validate.FormatOf("QueueTimeExpiry", "body", "date-time", m.QueueTimeExpiry.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskResource) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var taskResourceTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Canceled","Cancelling","Executing","Failed","Queued","Success","TimedOut"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskResourceTypeStatePropEnum = append(taskResourceTypeStatePropEnum, v)
	}
}

const (

	// TaskResourceStateCanceled captures enum value "Canceled"
	TaskResourceStateCanceled string = "Canceled"

	// TaskResourceStateCancelling captures enum value "Cancelling"
	TaskResourceStateCancelling string = "Cancelling"

	// TaskResourceStateExecuting captures enum value "Executing"
	TaskResourceStateExecuting string = "Executing"

	// TaskResourceStateFailed captures enum value "Failed"
	TaskResourceStateFailed string = "Failed"

	// TaskResourceStateQueued captures enum value "Queued"
	TaskResourceStateQueued string = "Queued"

	// TaskResourceStateSuccess captures enum value "Success"
	TaskResourceStateSuccess string = "Success"

	// TaskResourceStateTimedOut captures enum value "TimedOut"
	TaskResourceStateTimedOut string = "TimedOut"
)

// prop value enum
func (m *TaskResource) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskResourceTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskResource) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("State", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskResource) UnmarshalBinary(b []byte) error {
	var res TaskResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
