// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PropertyApplicability property applicability
//
// swagger:model PropertyApplicability
type PropertyApplicability struct {

	// depends on property name
	DependsOnPropertyName string `json:"DependsOnPropertyName,omitempty"`

	// depends on property value
	DependsOnPropertyValue interface{} `json:"DependsOnPropertyValue,omitempty"`

	// mode
	// Enum: [ApplicableIfHasAnyValue ApplicableIfHasNoValue ApplicableIfNotSpecificValue ApplicableIfSpecificValue]
	Mode string `json:"Mode,omitempty"`
}

// Validate validates this property applicability
func (m *PropertyApplicability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var propertyApplicabilityTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ApplicableIfHasAnyValue","ApplicableIfHasNoValue","ApplicableIfNotSpecificValue","ApplicableIfSpecificValue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		propertyApplicabilityTypeModePropEnum = append(propertyApplicabilityTypeModePropEnum, v)
	}
}

const (

	// PropertyApplicabilityModeApplicableIfHasAnyValue captures enum value "ApplicableIfHasAnyValue"
	PropertyApplicabilityModeApplicableIfHasAnyValue string = "ApplicableIfHasAnyValue"

	// PropertyApplicabilityModeApplicableIfHasNoValue captures enum value "ApplicableIfHasNoValue"
	PropertyApplicabilityModeApplicableIfHasNoValue string = "ApplicableIfHasNoValue"

	// PropertyApplicabilityModeApplicableIfNotSpecificValue captures enum value "ApplicableIfNotSpecificValue"
	PropertyApplicabilityModeApplicableIfNotSpecificValue string = "ApplicableIfNotSpecificValue"

	// PropertyApplicabilityModeApplicableIfSpecificValue captures enum value "ApplicableIfSpecificValue"
	PropertyApplicabilityModeApplicableIfSpecificValue string = "ApplicableIfSpecificValue"
)

// prop value enum
func (m *PropertyApplicability) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, propertyApplicabilityTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PropertyApplicability) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("Mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PropertyApplicability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PropertyApplicability) UnmarshalBinary(b []byte) error {
	var res PropertyApplicability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
