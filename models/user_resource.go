// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserResource user resource
//
// swagger:model UserResource
type UserResource struct {

	// can password be edited
	CanPasswordBeEdited bool `json:"CanPasswordBeEdited,omitempty"`

	// display name
	// Required: true
	// Max Length: 64
	// Min Length: 0
	DisplayName *string `json:"DisplayName"`

	// email address
	// Max Length: 256
	// Min Length: 0
	EmailAddress *string `json:"EmailAddress,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// identities
	Identities []*IdentityResource `json:"Identities"`

	// is active
	IsActive bool `json:"IsActive,omitempty"`

	// is requestor
	IsRequestor bool `json:"IsRequestor,omitempty"`

	// is service
	IsService bool `json:"IsService,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// password
	Password string `json:"Password,omitempty"`

	// username
	// Max Length: 64
	// Min Length: 0
	Username *string `json:"Username,omitempty"`
}

// Validate validates this user resource
func (m *UserResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserResource) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("DisplayName", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("DisplayName", "body", string(*m.DisplayName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("DisplayName", "body", string(*m.DisplayName), 64); err != nil {
		return err
	}

	return nil
}

func (m *UserResource) validateEmailAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailAddress) { // not required
		return nil
	}

	if err := validate.MinLength("EmailAddress", "body", string(*m.EmailAddress), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("EmailAddress", "body", string(*m.EmailAddress), 256); err != nil {
		return err
	}

	return nil
}

func (m *UserResource) validateIdentities(formats strfmt.Registry) error {

	if swag.IsZero(m.Identities) { // not required
		return nil
	}

	for i := 0; i < len(m.Identities); i++ {
		if swag.IsZero(m.Identities[i]) { // not required
			continue
		}

		if m.Identities[i] != nil {
			if err := m.Identities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Identities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserResource) validateUsername(formats strfmt.Registry) error {

	if swag.IsZero(m.Username) { // not required
		return nil
	}

	if err := validate.MinLength("Username", "body", string(*m.Username), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Username", "body", string(*m.Username), 64); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserResource) UnmarshalBinary(b []byte) error {
	var res UserResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
