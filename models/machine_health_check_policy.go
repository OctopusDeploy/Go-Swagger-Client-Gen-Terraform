// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MachineHealthCheckPolicy machine health check policy
//
// swagger:model MachineHealthCheckPolicy
type MachineHealthCheckPolicy struct {

	// bash health check policy
	BashHealthCheckPolicy *MachineScriptPolicy `json:"BashHealthCheckPolicy,omitempty"`

	// health check cron
	HealthCheckCron string `json:"HealthCheckCron,omitempty"`

	// health check cron timezone
	HealthCheckCronTimezone string `json:"HealthCheckCronTimezone,omitempty"`

	// health check interval
	HealthCheckInterval string `json:"HealthCheckInterval,omitempty"`

	// health check type
	// Enum: [OnlyConnectivity RunScript]
	HealthCheckType string `json:"HealthCheckType,omitempty"`

	// power shell health check policy
	PowerShellHealthCheckPolicy *MachineScriptPolicy `json:"PowerShellHealthCheckPolicy,omitempty"`
}

// Validate validates this machine health check policy
func (m *MachineHealthCheckPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBashHealthCheckPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthCheckType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerShellHealthCheckPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MachineHealthCheckPolicy) validateBashHealthCheckPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.BashHealthCheckPolicy) { // not required
		return nil
	}

	if m.BashHealthCheckPolicy != nil {
		if err := m.BashHealthCheckPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BashHealthCheckPolicy")
			}
			return err
		}
	}

	return nil
}

var machineHealthCheckPolicyTypeHealthCheckTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnlyConnectivity","RunScript"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		machineHealthCheckPolicyTypeHealthCheckTypePropEnum = append(machineHealthCheckPolicyTypeHealthCheckTypePropEnum, v)
	}
}

const (

	// MachineHealthCheckPolicyHealthCheckTypeOnlyConnectivity captures enum value "OnlyConnectivity"
	MachineHealthCheckPolicyHealthCheckTypeOnlyConnectivity string = "OnlyConnectivity"

	// MachineHealthCheckPolicyHealthCheckTypeRunScript captures enum value "RunScript"
	MachineHealthCheckPolicyHealthCheckTypeRunScript string = "RunScript"
)

// prop value enum
func (m *MachineHealthCheckPolicy) validateHealthCheckTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, machineHealthCheckPolicyTypeHealthCheckTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MachineHealthCheckPolicy) validateHealthCheckType(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthCheckType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthCheckTypeEnum("HealthCheckType", "body", m.HealthCheckType); err != nil {
		return err
	}

	return nil
}

func (m *MachineHealthCheckPolicy) validatePowerShellHealthCheckPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerShellHealthCheckPolicy) { // not required
		return nil
	}

	if m.PowerShellHealthCheckPolicy != nil {
		if err := m.PowerShellHealthCheckPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PowerShellHealthCheckPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MachineHealthCheckPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MachineHealthCheckPolicy) UnmarshalBinary(b []byte) error {
	var res MachineHealthCheckPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
