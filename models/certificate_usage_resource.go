// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateUsageResource certificate usage resource
//
// swagger:model CertificateUsageResource
type CertificateUsageResource struct {

	// deployment target usages
	DeploymentTargetUsages []*DeploymentTargetResource `json:"DeploymentTargetUsages"`

	// Id
	ID string `json:"Id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// library variable set usages
	LibraryVariableSetUsages []*LibraryVariableSetResource `json:"LibraryVariableSetUsages"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// project usages
	ProjectUsages []*ProjectResource `json:"ProjectUsages"`

	// tenant usages
	TenantUsages []*TenantResource `json:"TenantUsages"`
}

// Validate validates this certificate usage resource
func (m *CertificateUsageResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentTargetUsages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryVariableSetUsages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectUsages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantUsages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateUsageResource) validateDeploymentTargetUsages(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentTargetUsages) { // not required
		return nil
	}

	for i := 0; i < len(m.DeploymentTargetUsages); i++ {
		if swag.IsZero(m.DeploymentTargetUsages[i]) { // not required
			continue
		}

		if m.DeploymentTargetUsages[i] != nil {
			if err := m.DeploymentTargetUsages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DeploymentTargetUsages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateUsageResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateUsageResource) validateLibraryVariableSetUsages(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryVariableSetUsages) { // not required
		return nil
	}

	for i := 0; i < len(m.LibraryVariableSetUsages); i++ {
		if swag.IsZero(m.LibraryVariableSetUsages[i]) { // not required
			continue
		}

		if m.LibraryVariableSetUsages[i] != nil {
			if err := m.LibraryVariableSetUsages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LibraryVariableSetUsages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateUsageResource) validateProjectUsages(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectUsages) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectUsages); i++ {
		if swag.IsZero(m.ProjectUsages[i]) { // not required
			continue
		}

		if m.ProjectUsages[i] != nil {
			if err := m.ProjectUsages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProjectUsages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateUsageResource) validateTenantUsages(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantUsages) { // not required
		return nil
	}

	for i := 0; i < len(m.TenantUsages); i++ {
		if swag.IsZero(m.TenantUsages[i]) { // not required
			continue
		}

		if m.TenantUsages[i] != nil {
			if err := m.TenantUsages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TenantUsages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateUsageResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateUsageResource) UnmarshalBinary(b []byte) error {
	var res CertificateUsageResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
