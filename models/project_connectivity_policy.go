// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectConnectivityPolicy project connectivity policy
//
// swagger:model ProjectConnectivityPolicy
type ProjectConnectivityPolicy struct {

	// allow deployments to no targets
	AllowDeploymentsToNoTargets bool `json:"AllowDeploymentsToNoTargets,omitempty"`

	// exclude unhealthy targets
	ExcludeUnhealthyTargets bool `json:"ExcludeUnhealthyTargets,omitempty"`

	// skip machine behavior
	// Enum: [None SkipUnavailableMachines]
	SkipMachineBehavior string `json:"SkipMachineBehavior,omitempty"`

	// target roles
	TargetRoles []string `json:"TargetRoles"`
}

// Validate validates this project connectivity policy
func (m *ProjectConnectivityPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSkipMachineBehavior(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectConnectivityPolicyTypeSkipMachineBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","SkipUnavailableMachines"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectConnectivityPolicyTypeSkipMachineBehaviorPropEnum = append(projectConnectivityPolicyTypeSkipMachineBehaviorPropEnum, v)
	}
}

const (

	// ProjectConnectivityPolicySkipMachineBehaviorNone captures enum value "None"
	ProjectConnectivityPolicySkipMachineBehaviorNone string = "None"

	// ProjectConnectivityPolicySkipMachineBehaviorSkipUnavailableMachines captures enum value "SkipUnavailableMachines"
	ProjectConnectivityPolicySkipMachineBehaviorSkipUnavailableMachines string = "SkipUnavailableMachines"
)

// prop value enum
func (m *ProjectConnectivityPolicy) validateSkipMachineBehaviorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectConnectivityPolicyTypeSkipMachineBehaviorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectConnectivityPolicy) validateSkipMachineBehavior(formats strfmt.Registry) error {

	if swag.IsZero(m.SkipMachineBehavior) { // not required
		return nil
	}

	// value enum
	if err := m.validateSkipMachineBehaviorEnum("SkipMachineBehavior", "body", m.SkipMachineBehavior); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectConnectivityPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectConnectivityPolicy) UnmarshalBinary(b []byte) error {
	var res ProjectConnectivityPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
