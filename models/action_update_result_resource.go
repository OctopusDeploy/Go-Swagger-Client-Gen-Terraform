// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionUpdateResultResource action update result resource
//
// swagger:model ActionUpdateResultResource
type ActionUpdateResultResource struct {

	// Id
	ID string `json:"Id,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// manual merge required reasons by property name
	ManualMergeRequiredReasonsByPropertyName map[string][]string `json:"ManualMergeRequiredReasonsByPropertyName,omitempty"`

	// names of new parameters missing default value
	NamesOfNewParametersMissingDefaultValue []string `json:"NamesOfNewParametersMissingDefaultValue"`

	// outcome
	// Enum: [DefaultParamterValueMissing ManualMergeRequired RemovedPackageInUse Success]
	Outcome string `json:"Outcome,omitempty"`

	// removed package usages
	RemovedPackageUsages []*ActionUpdateRemovedPackageUsage `json:"RemovedPackageUsages"`
}

// Validate validates this action update result resource
func (m *ActionUpdateResultResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovedPackageUsages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var actionUpdateResultResourceTypeOutcomePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DefaultParamterValueMissing","ManualMergeRequired","RemovedPackageInUse","Success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionUpdateResultResourceTypeOutcomePropEnum = append(actionUpdateResultResourceTypeOutcomePropEnum, v)
	}
}

const (

	// ActionUpdateResultResourceOutcomeDefaultParamterValueMissing captures enum value "DefaultParamterValueMissing"
	ActionUpdateResultResourceOutcomeDefaultParamterValueMissing string = "DefaultParamterValueMissing"

	// ActionUpdateResultResourceOutcomeManualMergeRequired captures enum value "ManualMergeRequired"
	ActionUpdateResultResourceOutcomeManualMergeRequired string = "ManualMergeRequired"

	// ActionUpdateResultResourceOutcomeRemovedPackageInUse captures enum value "RemovedPackageInUse"
	ActionUpdateResultResourceOutcomeRemovedPackageInUse string = "RemovedPackageInUse"

	// ActionUpdateResultResourceOutcomeSuccess captures enum value "Success"
	ActionUpdateResultResourceOutcomeSuccess string = "Success"
)

// prop value enum
func (m *ActionUpdateResultResource) validateOutcomeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionUpdateResultResourceTypeOutcomePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionUpdateResultResource) validateOutcome(formats strfmt.Registry) error {

	if swag.IsZero(m.Outcome) { // not required
		return nil
	}

	// value enum
	if err := m.validateOutcomeEnum("Outcome", "body", m.Outcome); err != nil {
		return err
	}

	return nil
}

func (m *ActionUpdateResultResource) validateRemovedPackageUsages(formats strfmt.Registry) error {

	if swag.IsZero(m.RemovedPackageUsages) { // not required
		return nil
	}

	for i := 0; i < len(m.RemovedPackageUsages); i++ {
		if swag.IsZero(m.RemovedPackageUsages[i]) { // not required
			continue
		}

		if m.RemovedPackageUsages[i] != nil {
			if err := m.RemovedPackageUsages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RemovedPackageUsages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionUpdateResultResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionUpdateResultResource) UnmarshalBinary(b []byte) error {
	var res ActionUpdateResultResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
