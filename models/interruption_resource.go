// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InterruptionResource interruption resource
//
// swagger:model InterruptionResource
type InterruptionResource struct {

	// can take responsibility
	CanTakeResponsibility bool `json:"CanTakeResponsibility,omitempty"`

	// correlation Id
	CorrelationID string `json:"CorrelationId,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// form
	Form *Form `json:"Form,omitempty"`

	// has responsibility
	HasResponsibility bool `json:"HasResponsibility,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is linked to other interruption
	IsLinkedToOtherInterruption bool `json:"IsLinkedToOtherInterruption,omitempty"`

	// is pending
	IsPending bool `json:"IsPending,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// related document ids
	RelatedDocumentIds []string `json:"RelatedDocumentIds"`

	// responsible team ids
	ResponsibleTeamIds []string `json:"ResponsibleTeamIds"`

	// responsible user Id
	ResponsibleUserID string `json:"ResponsibleUserId,omitempty"`

	// space Id
	SpaceID string `json:"SpaceId,omitempty"`

	// task Id
	TaskID string `json:"TaskId,omitempty"`

	// title
	Title string `json:"Title,omitempty"`
}

// Validate validates this interruption resource
func (m *InterruptionResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterruptionResource) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("Created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InterruptionResource) validateForm(formats strfmt.Registry) error {

	if swag.IsZero(m.Form) { // not required
		return nil
	}

	if m.Form != nil {
		if err := m.Form.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Form")
			}
			return err
		}
	}

	return nil
}

func (m *InterruptionResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterruptionResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterruptionResource) UnmarshalBinary(b []byte) error {
	var res InterruptionResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
