// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// X509Certificate x509 certificate
//
// swagger:model X509Certificate
type X509Certificate struct {

	// issuer distinguished name
	IssuerDistinguishedName string `json:"IssuerDistinguishedName,omitempty"`

	// not after
	// Format: date-time
	NotAfter strfmt.DateTime `json:"NotAfter,omitempty"`

	// not before
	// Format: date-time
	NotBefore strfmt.DateTime `json:"NotBefore,omitempty"`

	// serial number
	SerialNumber string `json:"SerialNumber,omitempty"`

	// signature algorithm name
	SignatureAlgorithmName string `json:"SignatureAlgorithmName,omitempty"`

	// subject distinguished name
	SubjectDistinguishedName string `json:"SubjectDistinguishedName,omitempty"`

	// thumbprint
	Thumbprint string `json:"Thumbprint,omitempty"`

	// version
	Version int32 `json:"Version,omitempty"`
}

// Validate validates this x509 certificate
func (m *X509Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotBefore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X509Certificate) validateNotAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.NotAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("NotAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validateNotBefore(formats strfmt.Registry) error {

	if swag.IsZero(m.NotBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("NotBefore", "body", "date-time", m.NotBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *X509Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X509Certificate) UnmarshalBinary(b []byte) error {
	var res X509Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
