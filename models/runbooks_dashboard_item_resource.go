// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunbooksDashboardItemResource runbooks dashboard item resource
//
// swagger:model RunbooksDashboardItemResource
type RunbooksDashboardItemResource struct {

	// completed time
	// Format: date-time
	CompletedTime strfmt.DateTime `json:"CompletedTime,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// duration
	Duration string `json:"Duration,omitempty"`

	// environment Id
	EnvironmentID string `json:"EnvironmentId,omitempty"`

	// error message
	ErrorMessage string `json:"ErrorMessage,omitempty"`

	// has pending interruptions
	HasPendingInterruptions bool `json:"HasPendingInterruptions,omitempty"`

	// has warnings or errors
	HasWarningsOrErrors bool `json:"HasWarningsOrErrors,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is completed
	IsCompleted bool `json:"IsCompleted,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// project Id
	ProjectID string `json:"ProjectId,omitempty"`

	// queue time
	// Format: date-time
	QueueTime strfmt.DateTime `json:"QueueTime,omitempty"`

	// run by
	RunBy string `json:"RunBy,omitempty"`

	// runbook Id
	RunbookID string `json:"RunbookId,omitempty"`

	// runbook snapshot Id
	RunbookSnapshotID string `json:"RunbookSnapshotId,omitempty"`

	// runbook snapshot name
	RunbookSnapshotName string `json:"RunbookSnapshotName,omitempty"`

	// runbook snapshot notes
	RunbookSnapshotNotes string `json:"RunbookSnapshotNotes,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"StartTime,omitempty"`

	// state
	// Enum: [Canceled Cancelling Executing Failed Queued Success TimedOut]
	State string `json:"State,omitempty"`

	// task Id
	TaskID string `json:"TaskId,omitempty"`

	// tenant Id
	TenantID string `json:"TenantId,omitempty"`
}

// Validate validates this runbooks dashboard item resource
func (m *RunbooksDashboardItemResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunbooksDashboardItemResource) validateCompletedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CompletedTime", "body", "date-time", m.CompletedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RunbooksDashboardItemResource) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("Created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RunbooksDashboardItemResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RunbooksDashboardItemResource) validateQueueTime(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueTime) { // not required
		return nil
	}

	if err := validate.FormatOf("QueueTime", "body", "date-time", m.QueueTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RunbooksDashboardItemResource) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var runbooksDashboardItemResourceTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Canceled","Cancelling","Executing","Failed","Queued","Success","TimedOut"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runbooksDashboardItemResourceTypeStatePropEnum = append(runbooksDashboardItemResourceTypeStatePropEnum, v)
	}
}

const (

	// RunbooksDashboardItemResourceStateCanceled captures enum value "Canceled"
	RunbooksDashboardItemResourceStateCanceled string = "Canceled"

	// RunbooksDashboardItemResourceStateCancelling captures enum value "Cancelling"
	RunbooksDashboardItemResourceStateCancelling string = "Cancelling"

	// RunbooksDashboardItemResourceStateExecuting captures enum value "Executing"
	RunbooksDashboardItemResourceStateExecuting string = "Executing"

	// RunbooksDashboardItemResourceStateFailed captures enum value "Failed"
	RunbooksDashboardItemResourceStateFailed string = "Failed"

	// RunbooksDashboardItemResourceStateQueued captures enum value "Queued"
	RunbooksDashboardItemResourceStateQueued string = "Queued"

	// RunbooksDashboardItemResourceStateSuccess captures enum value "Success"
	RunbooksDashboardItemResourceStateSuccess string = "Success"

	// RunbooksDashboardItemResourceStateTimedOut captures enum value "TimedOut"
	RunbooksDashboardItemResourceStateTimedOut string = "TimedOut"
)

// prop value enum
func (m *RunbooksDashboardItemResource) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runbooksDashboardItemResourceTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RunbooksDashboardItemResource) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("State", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunbooksDashboardItemResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunbooksDashboardItemResource) UnmarshalBinary(b []byte) error {
	var res RunbooksDashboardItemResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
