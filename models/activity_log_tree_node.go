// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActivityLogTreeNode activity log tree node
//
// swagger:model ActivityLogTreeNode
type ActivityLogTreeNode struct {

	// children
	// Read Only: true
	Children []*ActivityLogTreeNode `json:"Children"`

	// ended
	// Format: date-time
	Ended strfmt.DateTime `json:"Ended,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// log elements
	// Read Only: true
	LogElements []*ActivityLogEntry `json:"LogElements"`

	// name
	Name string `json:"Name,omitempty"`

	// progress message
	ProgressMessage string `json:"ProgressMessage,omitempty"`

	// progress percentage
	ProgressPercentage int32 `json:"ProgressPercentage,omitempty"`

	// show at summary level
	// Read Only: true
	ShowAtSummaryLevel *bool `json:"ShowAtSummaryLevel,omitempty"`

	// started
	// Format: date-time
	Started strfmt.DateTime `json:"Started,omitempty"`

	// status
	// Enum: [Canceled Failed Pending Running Skipped Success SuccessWithWarning]
	Status string `json:"Status,omitempty"`
}

// Validate validates this activity log tree node
func (m *ActivityLogTreeNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogElements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityLogTreeNode) validateChildren(formats strfmt.Registry) error {

	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivityLogTreeNode) validateEnded(formats strfmt.Registry) error {

	if swag.IsZero(m.Ended) { // not required
		return nil
	}

	if err := validate.FormatOf("Ended", "body", "date-time", m.Ended.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ActivityLogTreeNode) validateLogElements(formats strfmt.Registry) error {

	if swag.IsZero(m.LogElements) { // not required
		return nil
	}

	for i := 0; i < len(m.LogElements); i++ {
		if swag.IsZero(m.LogElements[i]) { // not required
			continue
		}

		if m.LogElements[i] != nil {
			if err := m.LogElements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LogElements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivityLogTreeNode) validateStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("Started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

var activityLogTreeNodeTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Canceled","Failed","Pending","Running","Skipped","Success","SuccessWithWarning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		activityLogTreeNodeTypeStatusPropEnum = append(activityLogTreeNodeTypeStatusPropEnum, v)
	}
}

const (

	// ActivityLogTreeNodeStatusCanceled captures enum value "Canceled"
	ActivityLogTreeNodeStatusCanceled string = "Canceled"

	// ActivityLogTreeNodeStatusFailed captures enum value "Failed"
	ActivityLogTreeNodeStatusFailed string = "Failed"

	// ActivityLogTreeNodeStatusPending captures enum value "Pending"
	ActivityLogTreeNodeStatusPending string = "Pending"

	// ActivityLogTreeNodeStatusRunning captures enum value "Running"
	ActivityLogTreeNodeStatusRunning string = "Running"

	// ActivityLogTreeNodeStatusSkipped captures enum value "Skipped"
	ActivityLogTreeNodeStatusSkipped string = "Skipped"

	// ActivityLogTreeNodeStatusSuccess captures enum value "Success"
	ActivityLogTreeNodeStatusSuccess string = "Success"

	// ActivityLogTreeNodeStatusSuccessWithWarning captures enum value "SuccessWithWarning"
	ActivityLogTreeNodeStatusSuccessWithWarning string = "SuccessWithWarning"
)

// prop value enum
func (m *ActivityLogTreeNode) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, activityLogTreeNodeTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActivityLogTreeNode) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActivityLogTreeNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActivityLogTreeNode) UnmarshalBinary(b []byte) error {
	var res ActivityLogTreeNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
