// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountResource account resource
//
// swagger:model AccountResource
type AccountResource struct {

	// account type
	// Read Only: true
	// Enum: [AmazonWebServicesAccount AzureServicePrincipal AzureSubscription None SshKeyPair Token UsernamePassword]
	AccountType string `json:"AccountType,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// environment ids
	EnvironmentIds []string `json:"EnvironmentIds"`

	// Id
	ID string `json:"Id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// space Id
	SpaceID string `json:"SpaceId,omitempty"`

	// tenant ids
	TenantIds []string `json:"TenantIds"`

	// tenant tags
	TenantTags []string `json:"TenantTags"`

	// tenanted deployment participation
	// Enum: [Tenanted TenantedOrUntenanted Untenanted]
	TenantedDeploymentParticipation string `json:"TenantedDeploymentParticipation,omitempty"`
}

// Validate validates this account resource
func (m *AccountResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantedDeploymentParticipation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var accountResourceTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AmazonWebServicesAccount","AzureServicePrincipal","AzureSubscription","None","SshKeyPair","Token","UsernamePassword"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountResourceTypeAccountTypePropEnum = append(accountResourceTypeAccountTypePropEnum, v)
	}
}

const (

	// AccountResourceAccountTypeAmazonWebServicesAccount captures enum value "AmazonWebServicesAccount"
	AccountResourceAccountTypeAmazonWebServicesAccount string = "AmazonWebServicesAccount"

	// AccountResourceAccountTypeAzureServicePrincipal captures enum value "AzureServicePrincipal"
	AccountResourceAccountTypeAzureServicePrincipal string = "AzureServicePrincipal"

	// AccountResourceAccountTypeAzureSubscription captures enum value "AzureSubscription"
	AccountResourceAccountTypeAzureSubscription string = "AzureSubscription"

	// AccountResourceAccountTypeNone captures enum value "None"
	AccountResourceAccountTypeNone string = "None"

	// AccountResourceAccountTypeSSHKeyPair captures enum value "SshKeyPair"
	AccountResourceAccountTypeSSHKeyPair string = "SshKeyPair"

	// AccountResourceAccountTypeToken captures enum value "Token"
	AccountResourceAccountTypeToken string = "Token"

	// AccountResourceAccountTypeUsernamePassword captures enum value "UsernamePassword"
	AccountResourceAccountTypeUsernamePassword string = "UsernamePassword"
)

// prop value enum
func (m *AccountResource) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountResourceTypeAccountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountResource) validateAccountType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountTypeEnum("AccountType", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *AccountResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var accountResourceTypeTenantedDeploymentParticipationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tenanted","TenantedOrUntenanted","Untenanted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountResourceTypeTenantedDeploymentParticipationPropEnum = append(accountResourceTypeTenantedDeploymentParticipationPropEnum, v)
	}
}

const (

	// AccountResourceTenantedDeploymentParticipationTenanted captures enum value "Tenanted"
	AccountResourceTenantedDeploymentParticipationTenanted string = "Tenanted"

	// AccountResourceTenantedDeploymentParticipationTenantedOrUntenanted captures enum value "TenantedOrUntenanted"
	AccountResourceTenantedDeploymentParticipationTenantedOrUntenanted string = "TenantedOrUntenanted"

	// AccountResourceTenantedDeploymentParticipationUntenanted captures enum value "Untenanted"
	AccountResourceTenantedDeploymentParticipationUntenanted string = "Untenanted"
)

// prop value enum
func (m *AccountResource) validateTenantedDeploymentParticipationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountResourceTypeTenantedDeploymentParticipationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountResource) validateTenantedDeploymentParticipation(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantedDeploymentParticipation) { // not required
		return nil
	}

	// value enum
	if err := m.validateTenantedDeploymentParticipationEnum("TenantedDeploymentParticipation", "body", m.TenantedDeploymentParticipation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountResource) UnmarshalBinary(b []byte) error {
	var res AccountResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
