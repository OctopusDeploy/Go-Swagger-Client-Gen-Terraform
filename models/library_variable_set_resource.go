// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LibraryVariableSetResource library variable set resource
//
// swagger:model LibraryVariableSetResource
type LibraryVariableSetResource struct {

	// content type
	// Enum: [ScriptModule Variables]
	ContentType string `json:"ContentType,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// space Id
	SpaceID string `json:"SpaceId,omitempty"`

	// templates
	Templates []*ActionTemplateParameterResource `json:"Templates"`

	// variable set Id
	VariableSetID string `json:"VariableSetId,omitempty"`
}

// Validate validates this library variable set resource
func (m *LibraryVariableSetResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var libraryVariableSetResourceTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ScriptModule","Variables"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		libraryVariableSetResourceTypeContentTypePropEnum = append(libraryVariableSetResourceTypeContentTypePropEnum, v)
	}
}

const (

	// LibraryVariableSetResourceContentTypeScriptModule captures enum value "ScriptModule"
	LibraryVariableSetResourceContentTypeScriptModule string = "ScriptModule"

	// LibraryVariableSetResourceContentTypeVariables captures enum value "Variables"
	LibraryVariableSetResourceContentTypeVariables string = "Variables"
)

// prop value enum
func (m *LibraryVariableSetResource) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, libraryVariableSetResourceTypeContentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LibraryVariableSetResource) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("ContentType", "body", m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *LibraryVariableSetResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LibraryVariableSetResource) validateTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.Templates) { // not required
		return nil
	}

	for i := 0; i < len(m.Templates); i++ {
		if swag.IsZero(m.Templates[i]) { // not required
			continue
		}

		if m.Templates[i] != nil {
			if err := m.Templates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LibraryVariableSetResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LibraryVariableSetResource) UnmarshalBinary(b []byte) error {
	var res LibraryVariableSetResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
