// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PhaseResource phase resource
//
// swagger:model PhaseResource
type PhaseResource struct {

	// automatic deployment targets
	AutomaticDeploymentTargets []string `json:"AutomaticDeploymentTargets"`

	// Id
	ID string `json:"Id,omitempty"`

	// is optional phase
	IsOptionalPhase bool `json:"IsOptionalPhase,omitempty"`

	// minimum environments before promotion
	MinimumEnvironmentsBeforePromotion int32 `json:"MinimumEnvironmentsBeforePromotion,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// optional deployment targets
	OptionalDeploymentTargets []string `json:"OptionalDeploymentTargets"`

	// release retention policy
	ReleaseRetentionPolicy *RetentionPeriod `json:"ReleaseRetentionPolicy,omitempty"`

	// tentacle retention policy
	TentacleRetentionPolicy *RetentionPeriod `json:"TentacleRetentionPolicy,omitempty"`
}

// Validate validates this phase resource
func (m *PhaseResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleaseRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTentacleRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhaseResource) validateReleaseRetentionPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseRetentionPolicy) { // not required
		return nil
	}

	if m.ReleaseRetentionPolicy != nil {
		if err := m.ReleaseRetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ReleaseRetentionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *PhaseResource) validateTentacleRetentionPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.TentacleRetentionPolicy) { // not required
		return nil
	}

	if m.TentacleRetentionPolicy != nil {
		if err := m.TentacleRetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TentacleRetentionPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhaseResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhaseResource) UnmarshalBinary(b []byte) error {
	var res PhaseResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
