// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeploymentTemplateStep deployment template step
//
// swagger:model DeploymentTemplateStep
type DeploymentTemplateStep struct {

	// action Id
	ActionID string `json:"ActionId,omitempty"`

	// action name
	ActionName string `json:"ActionName,omitempty"`

	// action number
	ActionNumber string `json:"ActionNumber,omitempty"`

	// can be skipped
	CanBeSkipped bool `json:"CanBeSkipped,omitempty"`

	// excluded machines
	ExcludedMachines []*ReferenceDataItem `json:"ExcludedMachines"`

	// has no applicable machines
	HasNoApplicableMachines bool `json:"HasNoApplicableMachines,omitempty"`

	// is disabled
	IsDisabled bool `json:"IsDisabled,omitempty"`

	// machine names
	MachineNames []string `json:"MachineNames"`

	// machines
	Machines []*MachineDeploymentPreview `json:"Machines"`

	// roles
	Roles []string `json:"Roles"`

	// unavailable machines
	UnavailableMachines []*ReferenceDataItem `json:"UnavailableMachines"`
}

// Validate validates this deployment template step
func (m *DeploymentTemplateStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcludedMachines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnavailableMachines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentTemplateStep) validateExcludedMachines(formats strfmt.Registry) error {

	if swag.IsZero(m.ExcludedMachines) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludedMachines); i++ {
		if swag.IsZero(m.ExcludedMachines[i]) { // not required
			continue
		}

		if m.ExcludedMachines[i] != nil {
			if err := m.ExcludedMachines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExcludedMachines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentTemplateStep) validateMachines(formats strfmt.Registry) error {

	if swag.IsZero(m.Machines) { // not required
		return nil
	}

	for i := 0; i < len(m.Machines); i++ {
		if swag.IsZero(m.Machines[i]) { // not required
			continue
		}

		if m.Machines[i] != nil {
			if err := m.Machines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Machines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentTemplateStep) validateUnavailableMachines(formats strfmt.Registry) error {

	if swag.IsZero(m.UnavailableMachines) { // not required
		return nil
	}

	for i := 0; i < len(m.UnavailableMachines); i++ {
		if swag.IsZero(m.UnavailableMachines[i]) { // not required
			continue
		}

		if m.UnavailableMachines[i] != nil {
			if err := m.UnavailableMachines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UnavailableMachines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentTemplateStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentTemplateStep) UnmarshalBinary(b []byte) error {
	var res DeploymentTemplateStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
