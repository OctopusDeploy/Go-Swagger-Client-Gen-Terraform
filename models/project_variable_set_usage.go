// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectVariableSetUsage project variable set usage
//
// swagger:model ProjectVariableSetUsage
type ProjectVariableSetUsage struct {

	// is currently being used in project
	IsCurrentlyBeingUsedInProject bool `json:"IsCurrentlyBeingUsedInProject,omitempty"`

	// project Id
	ProjectID string `json:"ProjectId,omitempty"`

	// project name
	ProjectName string `json:"ProjectName,omitempty"`

	// project slug
	ProjectSlug string `json:"ProjectSlug,omitempty"`

	// releases
	Releases []*ReleaseUsageEntry `json:"Releases"`

	// runbook snapshots
	RunbookSnapshots []*RunbookSnapshotUsageEntry `json:"RunbookSnapshots"`
}

// Validate validates this project variable set usage
func (m *ProjectVariableSetUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunbookSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectVariableSetUsage) validateReleases(formats strfmt.Registry) error {

	if swag.IsZero(m.Releases) { // not required
		return nil
	}

	for i := 0; i < len(m.Releases); i++ {
		if swag.IsZero(m.Releases[i]) { // not required
			continue
		}

		if m.Releases[i] != nil {
			if err := m.Releases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Releases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectVariableSetUsage) validateRunbookSnapshots(formats strfmt.Registry) error {

	if swag.IsZero(m.RunbookSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.RunbookSnapshots); i++ {
		if swag.IsZero(m.RunbookSnapshots[i]) { // not required
			continue
		}

		if m.RunbookSnapshots[i] != nil {
			if err := m.RunbookSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RunbookSnapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectVariableSetUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectVariableSetUsage) UnmarshalBinary(b []byte) error {
	var res ProjectVariableSetUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
