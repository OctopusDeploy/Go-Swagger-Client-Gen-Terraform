// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkerPoolResource worker pool resource
//
// swagger:model WorkerPoolResource
type WorkerPoolResource struct {

	// can add workers
	CanAddWorkers bool `json:"CanAddWorkers,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is default
	IsDefault bool `json:"IsDefault,omitempty"`

	// last modified by
	LastModifiedBy string `json:"LastModifiedBy,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"LastModifiedOn,omitempty"`

	// links
	Links map[string]string `json:"Links,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// sort order
	SortOrder int32 `json:"SortOrder,omitempty"`

	// space Id
	SpaceID string `json:"SpaceId,omitempty"`

	// worker pool type
	// Enum: [DynamicWorkerPool StaticWorkerPool]
	WorkerPoolType string `json:"WorkerPoolType,omitempty"`
}

// Validate validates this worker pool resource
func (m *WorkerPoolResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerPoolType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkerPoolResource) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModifiedOn", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var workerPoolResourceTypeWorkerPoolTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DynamicWorkerPool","StaticWorkerPool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workerPoolResourceTypeWorkerPoolTypePropEnum = append(workerPoolResourceTypeWorkerPoolTypePropEnum, v)
	}
}

const (

	// WorkerPoolResourceWorkerPoolTypeDynamicWorkerPool captures enum value "DynamicWorkerPool"
	WorkerPoolResourceWorkerPoolTypeDynamicWorkerPool string = "DynamicWorkerPool"

	// WorkerPoolResourceWorkerPoolTypeStaticWorkerPool captures enum value "StaticWorkerPool"
	WorkerPoolResourceWorkerPoolTypeStaticWorkerPool string = "StaticWorkerPool"
)

// prop value enum
func (m *WorkerPoolResource) validateWorkerPoolTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workerPoolResourceTypeWorkerPoolTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkerPoolResource) validateWorkerPoolType(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkerPoolType) { // not required
		return nil
	}

	// value enum
	if err := m.validateWorkerPoolTypeEnum("WorkerPoolType", "body", m.WorkerPoolType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkerPoolResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkerPoolResource) UnmarshalBinary(b []byte) error {
	var res WorkerPoolResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
